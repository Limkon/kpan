<%# views/files.ejs %>
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= locals.pageTitle || ( (locals.viewContextUser ? viewContextUser.username : user.username) + ' 的文件') %> - 網路硬碟</title>
    <link rel="stylesheet" href="/style.css">
    <link id="theme-stylesheet" rel="stylesheet" href="">
    <style>
    :root {
        --button-primary-bg-color: #007bff;
        --button-primary-text-color: #ffffff;
        --button-primary-border-color: #007bff;
        --button-secondary-bg-color: #6c757d;
        --button-secondary-text-color: #ffffff;
        --button-secondary-border-color: #6c757d;
        --input-border-color: #ccc;
        --input-bg-color: #fff;
        --input-text-color: #333;
        --modal-bg: #ffffff;
        --modal-text-color: #333;
        --modal-border-color: #888;
        --video-modal-bg: #1c1c1c;
        --video-modal-text-color: #f1f1f1;
        --video-modal-border-color: #333;
        --video-modal-close-btn-color: #aaa;
        --video-modal-close-btn-hover-color: #fff;
        --tab-inactive-bg: #e9ecef;
        --tab-inactive-text: #495057;
        --tab-active-bg: #007bff;
        --tab-active-text: #ffffff;
        --tab-border: #dee2e6;
        --link-color: #007bff;
        --link-hover-color: #0056b3;
        --public-link-display-bg: #f8f9fa;
        --public-link-display-border: #ced4da;
        --action-bar-bg: #f0f0f0;
        --action-bar-border: #ccc;
        --hover-bg: #f0f0f0;
    }

    .dark-theme {
        --button-primary-bg-color: #0056b3;
        --button-primary-border-color: #0056b3;
        --button-secondary-bg-color: #5a6268;
        --button-secondary-border-color: #545b62;
        --input-border-color: #555;
        --input-bg-color: #2c2c2c;
        --input-text-color: #e0e0e0;
        --modal-bg: #2c2c2c;
        --modal-text-color: #e0e0e0;
        --modal-border-color: #555;
        --video-modal-bg: #2a2a2a;
        --video-modal-text-color: #e0e0e0;
        --video-modal-border-color: #444;
        --video-modal-close-btn-color: #bbb;
        --video-modal-close-btn-hover-color: #fff;
        --tab-inactive-bg: #3a3a3a;
        --tab-inactive-text: #adb5bd;
        --tab-active-bg: #0056b3;
        --tab-border: #495057;
        --link-color: #6cb2eb;
        --link-hover-color: #8dc9f0;
        --public-link-display-bg: #2c2c2c;
        --public-link-display-border: #495057;
        --action-bar-bg: #252525;
        --action-bar-border: #444;
        --hover-bg: #4a4a4a;
    }

    .nav-tabs { display: flex; margin-bottom: 15px; border-bottom: 1px solid var(--tab-border); }
    .nav-tabs .nav-link { padding: 10px 15px; text-decoration: none; background-color: var(--tab-inactive-bg); color: var(--tab-inactive-text); border: 1px solid var(--tab-border); border-bottom: none; margin-right: 5px; border-radius: 5px 5px 0 0; font-weight: 500; cursor: pointer; transition: background-color 0.2s, color 0.2s; }
    .nav-tabs .nav-link.active { background-color: var(--tab-active-bg); color: var(--tab-active-text); border-color: var(--tab-active-bg); }
    .nav-tabs .nav-link:hover:not(.active) { background-color: var(--hover-bg); opacity: 1; }

    #selection-action-bar, #public-link-selection-action-bar {
        padding: 10px;
        background-color: var(--action-bar-bg);
        border-bottom: 1px solid var(--action-bar-border);
        margin-bottom: 15px;
        display: none;
        flex-wrap: wrap;
        gap: 10px;
        align-items: center;
    }
    #selection-action-bar button, #public-link-selection-action-bar button { margin: 0; }

    .item-checkbox, .public-link-checkbox {
        display: none;
        margin-right: 10px;
        width: 18px;
        height: 18px;
        vertical-align: middle;
    }
    #file-container.multi-select-mode-active .item-checkbox,
    #file-container.multi-select-mode-active .public-link-checkbox {
        display: inline-block;
    }

    .file-entry-selectable { display: flex; align-items: center; width: 100%; }
    #file-container.list-view .file-entry-selectable { padding: 5px 0; }
    #file-container.grid-view .file-entry-selectable { padding: 0; flex-direction: column; height: 100%; }

    .file-content-wrapper { flex-grow: 1; display: flex; justify-content: space-between; align-items: center; cursor: pointer; overflow: hidden; width: 100%; }
    #file-container.grid-view .file-content-wrapper { flex-direction: column; justify-content: flex-start; text-align: center; }

    .list-view li { position: relative; }
    .list-view .file-entry { display: flex; align-items: center; gap: 8px; flex-grow: 1; min-width: 0; }
    .list-view .file-entry .file-name { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; flex-shrink: 1; }

    .list-view .file-details { display: flex; align-items: center; gap: 15px; font-size: 0.85em; color: #555; margin-left: auto; padding-left: 10px; white-space: nowrap; flex-shrink: 0; }
    .dark-theme .list-view .file-details { color: #bbb; }
    .list-view .file-details .file-size,
    .list-view .file-details .file-modified,
    .list-view .file-details .file-public-link,
    .list-view .file-details .file-created-at {
        min-width: 80px; text-align: right;
    }
    .list-view .file-details .file-public-link a { color: var(--link-color); text-decoration: none; }
    .list-view .file-details .file-public-link a:hover { color: var(--link-hover-color); text-decoration: underline; }

    #file-container.grid-view .file-details { display: none; }

    .list-view .file-actions-placeholder { min-width: 40px; text-align: right; font-size: 0.9em; color: #666; flex-shrink: 0; }
    .dark-theme .list-view .file-actions-placeholder { color: #aaa; }

    .list-view li.single-selected-item > .file-entry-selectable,
    .grid-view li.single-selected-item { background-color: #e9e9e9; border-radius: 4px; }
    .dark-theme .list-view li.single-selected-item > .file-entry-selectable,
    .dark-theme .grid-view li.single-selected-item { background-color: #404040; }

    .modal {
        display: none; position: fixed; z-index: 1001; left: 0; top: 0; width: 100%; height: 100%;
        overflow: auto; background-color: rgba(0,0,0,0.5);
    }
    #move-modal, #create-item-modal, #overwrite-confirm-modal, #video-player-modal, #share-modal, #public-link-display-modal, #existing-links-modal, #rename-item-modal {
        /* Inherits .modal styles */
    }
    .modal-content { background-color: var(--modal-bg) !important; color: var(--modal-text-color); margin: 10% auto; padding: 20px; border: 1px solid var(--modal-border-color); border-radius: 8px; width: 90%; max-width: 500px; box-shadow: 0 5px 15px rgba(0,0,0,0.3); }
    .modal-content h3 { margin-top: 0; }
    .modal-content .form-group { margin-bottom: 15px; }
    .modal-content .form-group label { display: block; margin-bottom: 5px; font-weight: 500; }
    .modal-content .form-group input[type="text"],
    .modal-content .form-group input[type="email"],
    .modal-content .form-group input[type="url"] {
        width: 100%; padding: 10px; box-sizing: border-box;
        border: 1px solid var(--input-border-color); border-radius: 4px;
        background-color: var(--input-bg-color); color: var(--input-text-color);
    }
    .modal-actions { text-align: right; margin-top: 20px; display: flex; gap: 10px; justify-content: flex-end; }

    #video-player-modal .modal-content { background-color: var(--video-modal-bg) !important; color: var(--video-modal-text-color); border-color: var(--video-modal-border-color); max-width: 900px; margin: 5% auto; }
    #video-player-modal #video-modal-title { color: var(--video-modal-text-color); margin-bottom: 15px; }
    #video-player-modal .close-modal-btn { color: var(--video-modal-close-btn-color); }
    #video-player-modal .close-modal-btn:hover,
    #video-player-modal .close-modal-btn:focus { color: var(--video-modal-close-btn-hover-color); text-decoration: none; cursor: pointer; }
    #html5-video-player { width: 100%; max-height: 75vh; display: block; margin-top: 10px; background-color: #000; border-radius: 4px; }

    #public-link-display-modal .modal-content, #existing-links-modal .modal-content { max-width: 600px; }
    #generated-public-link {
        width: calc(100% - 85px);
        padding: 10px;
        border: 1px solid var(--public-link-display-border);
        background-color: var(--public-link-display-bg);
        border-radius: 4px 0 0 4px;
        font-family: monospace;
        font-size: 0.9em;
        box-sizing: border-box;
        color: var(--input-text-color);
    }
    #copy-public-link-btn {
        padding: 10px 15px;
        border-radius: 0 4px 4px 0;
        margin-left: -1px;
        border: 1px solid var(--button-primary-border-color);
        background-color: var(--button-primary-bg-color);
        color: var(--button-primary-text-color);
        cursor: pointer;
        box-sizing: border-box;
        height: calc(20px + 2*10px + 2*1px);
    }
    #copy-public-link-btn:hover { opacity: 0.9; }
    .public-link-container { display: flex; align-items: center; margin-top: 10px; }
    #existing-links-list-container ul { list-style-type: none; padding-left: 0; }
    #existing-links-list-container li { padding: 8px 0; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center; }
    .dark-theme #existing-links-list-container li { border-bottom-color: #444; }
    #existing-links-list-container li:last-child { border-bottom: none; }
    #existing-links-list-container .link-info { flex-grow: 1; }
    #existing-links-list-container .link-info a { word-break: break-all; }
    #existing-links-list-container .link-details { font-size: 0.8em; color: #777; display: block; margin-top: 3px;}
    .dark-theme #existing-links-list-container .link-details { color: #aaa; }

    #directory-tree-container { max-height: 250px; overflow-y: auto; border: 1px solid var(--input-border-color); padding: 10px; margin-bottom: 15px; background-color: var(--input-bg-color); }
    #directory-tree-container ul { list-style-type: none; padding-left: 20px; }
    #directory-tree-container li { padding: 5px 0; cursor: pointer; border-bottom: 1px dashed var(--input-border-color); }
    #directory-tree-container li:last-child { border-bottom: none; }
    #directory-tree-container li:hover { background-color: var(--hover-bg); }
    #directory-tree-container li.selected-dir { background-color: #007bff; color: white; }
    .dark-theme #directory-tree-container li.selected-dir { background-color: #0056b3; }


    .close-modal-btn { float: right; font-size: 1.5em; font-weight: bold; cursor: pointer; line-height: 1; padding: 0 5px;}

    /* === Grid View Styles - REFINED START === */
    #file-container.grid-view ul {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(110px, 1fr));
        gap: 10px;
        list-style-type: none; padding: 0; margin: 0;
    }

    #file-container.grid-view li {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: 8px;
        border-radius: 6px;
        position: relative;
        min-height: 110px;
        background-color: var(--input-bg-color);
        border: 1px solid var(--input-border-color);
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        overflow: hidden;
    }

    .dark-theme #file-container.grid-view li {
        background-color: #3a3a3a;
        border-color: #555;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }

    #file-container.grid-view li .file-entry-selectable {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
    }

    .grid-view .file-entry {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 0;
        width: 100%;
        flex-grow: 1;
        padding-top: 4px;
    }

    .grid-view .file-icon-large {
        font-size: 3.5em;
        line-height: 1;
        margin-bottom: 4px;
        flex-shrink: 0;
    }

    .grid-view .file-name {
        font-size: 0.8em;
        line-height: 1.25;
        word-break: break-all;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: calc(100% - 4px);
        min-height: calc(0.8em * 1.25 * 2);
        margin-bottom: 6px;
        color: var(--input-text-color);
        flex-shrink: 0;
    }
    .dark-theme .grid-view .file-name {
        color: var(--input-text-color);
    }

    #file-container.grid-view.multi-select-mode-active .item-checkbox,
    #file-container.grid-view.multi-select-mode-active .public-link-checkbox {
        position: absolute;
        top: 6px;
        left: 6px;
        margin-bottom: 0;
    }

    .grid-view .link-actions-group { /* For 'userShares' view items */
        display: flex;
        justify-content: center; /* Center the buttons horizontally */
        align-items: center;
        gap: 5px; /* Space between buttons */
        width: 100%; /* Take full width to allow centering */
        margin-top: auto;
        padding-top: 4px;
        padding-bottom: 4px; /* Added padding at the bottom */
        flex-wrap: nowrap; /* Prevent buttons from wrapping to ensure they stay in one line */
        flex-shrink: 0;
        box-sizing: border-box; /* Include padding in width calculation */
    }
    .grid-view .link-actions-group .action-button-small,
    .grid-view .link-actions-group .revoke-single-link-form, /* Target the form for flex properties */
    .grid-view .link-actions-group .revoke-single-link-form button {
        font-size: 0.7em;
        padding: 4px 8px; /* Increased padding for better touch target and appearance */
        white-space: nowrap;
        flex-grow: 0; /* Prevent buttons from growing */
        flex-shrink: 0; /* Prevent buttons from shrinking excessively */
        margin: 0 2px; /* Small margin between items if needed */
    }
    .grid-view .link-actions-group .revoke-single-link-form {
        display: inline-flex; /* Make form behave like a button for flex layout */
    }

    /* === Grid View Styles - REFINED END === */


    #select-all-container, #select-all-public-links-container {
        display: none;
        align-items: center;
        padding: 5px 10px;
        background-color: #f9f9f9;
        border-bottom: 1px solid #eee;
    }
    .dark-theme #select-all-container, .dark-theme #select-all-public-links-container {
        background-color: #2e2e2e;
        border-bottom-color: #444;
    }

    #select-all-container.visible-in-multiselect,
    #select-all-public-links-container.visible-in-multiselect {
        display: flex;
    }

    #select-all-container label, #select-all-public-links-container label {
        margin-left: 5px;
        font-weight: normal;
    }

    #upload-actions-container { display: none; padding: 10px 0; gap: 10px; flex-wrap: wrap; align-items: center; margin-bottom: 15px; }
    #upload-actions-container button { margin: 0; }
    #upload-section { display: none; padding: 20px; border: 1px solid #dee2e6; border-radius: 6px; margin-top: 0; background-color: #f8f9fa; }
    .dark-theme #upload-section { background-color: #3a3a3a; border-color: #444; }
    #drop-area { border: 2px dashed #007bff; padding: 20px; text-align: center; border-radius: 5px; background-color: #fff; }
    .dark-theme #drop-area { border-color: #0056b3; background-color: #2c2c2c; }
    #drop-area.highlight { border-color: #28a745; background-color: #e9f7ef; }
    .dark-theme #drop-area.highlight { background-color: #333; }
    #drop-area p { margin-bottom: 15px; font-size: 1.1em; color: #6c757d; }
    .dark-theme #drop-area p { color: #adb5bd; }
    #upload-button { display: none; margin-top: 15px; }

    .search-results-info { padding: 10px; background-color: #e9ecef; border-radius: 5px; margin-bottom: 15px; font-size: 0.9em; }
    .dark-theme .search-results-info { background-color: #3a3a3a; }
    .file-location-in-search { font-size: 0.8em; color: #6c757d; margin-left: 8px; }
    .dark-theme .file-location-in-search { color: #adb5bd; }

    .file-browser-controls { display: flex; flex-wrap: wrap; align-items: center; gap: 10px; margin-bottom: 20px; }
    .file-browser-controls .actions-group-left { display: flex; gap: 10px; align-items: center; flex-shrink: 0; }
    .file-browser-controls .actions-group-left button, #toggle-multi-select-btn { padding: 8px 12px; font-size: 0.9em; margin: 0; background-color: var(--button-primary-bg-color); color: var(--button-primary-text-color); border: 1px solid var(--button-primary-border-color); border-radius: 4px; cursor: pointer; transition: opacity 0.2s; }
    .file-browser-controls .actions-group-left button:hover, #toggle-multi-select-btn:hover { opacity: 0.9; }
    .file-browser-controls .search-form-right { display: flex; align-items: center; gap: 5px; margin-left: auto; flex-shrink: 0; }
    .file-browser-controls .search-form-right input[type="search"] { width: 180px; padding: 8px 10px; font-size: 0.9em; border: 1px solid var(--input-border-color); background-color: var(--input-bg-color); color: var(--input-text-color); border-radius: 4px; margin: 0; }
    .file-browser-controls .search-form-right button { padding: 8px 12px; font-size: 0.9em; margin: 0; background-color: var(--button-primary-bg-color); color: var(--button-primary-text-color); border: 1px solid var(--button-primary-border-color); border-radius: 4px; cursor: pointer; transition: opacity 0.2s; }
    .file-browser-controls .search-form-right button:hover { opacity: 0.9; }
    .file-browser-controls .view-toggle { display: flex; gap: 8px; align-items: center; flex-shrink: 0; }
    .file-browser-controls .view-toggle button { padding: 8px 12px; font-size: 0.9em; margin: 0; background-color: var(--button-secondary-bg-color); color: var(--button-secondary-text-color); border: 1px solid var(--button-secondary-border-color); border-radius: 4px; cursor: pointer; transition: background-color 0.2s, border-color 0.2s; }
    .file-browser-controls .view-toggle button:not(.active):hover { opacity: 0.9; }
    .file-browser-controls .view-toggle button.active { background-color: var(--button-primary-bg-color); border-color: var(--button-primary-border-color); color: var(--button-primary-text-color); }
    .file-browser-controls:not(:has(.actions-group-left)) .search-form-right { margin-left: 0; flex-grow: 1; }
    .file-browser-controls:not(:has(.actions-group-left)) .search-form-right input[type="search"] { flex-grow: 1; }
    .file-browser-controls:not(:has(.actions-group-left)) .view-toggle { margin-left: auto; }

    .progress-bar-container { width: 100%; background-color: #e9ecef; border-radius: 4px; margin-top: 10px; padding: 2px; display: none; box-sizing: border-box; }
    .dark-theme .progress-bar-container { background-color: #495057; }
    .progress-bar { display: block; width: 0%; height: 20px; background-color: #007bff; border: 1px solid #0056b3; border-radius: 2px; text-align: center; line-height: 18px; color: white; font-size: 0.8em; font-weight: bold; transition: width 0.1s ease-in-out; box-sizing: border-box; overflow: hidden; }
    .dark-theme .progress-bar { background-color: #0056b3; border-color: #003d80; }

    #file-container { max-height: calc(100vh - 360px); overflow-y: auto; padding-right: 5px; box-sizing: border-box; }
    .action-button-small, a.action-button-small {
        padding: 3px 6px;
        font-size: 0.8em;
        margin-left: 5px;
        text-decoration: none;
        border: 1px solid var(--button-secondary-border-color);
        background-color: var(--button-secondary-bg-color);
        color: var(--button-secondary-text-color);
        border-radius: 3px;
        display: inline-block;
        cursor: pointer;
        line-height: normal;
        vertical-align: middle;
    }
    .action-button-small:hover, a.action-button-small:hover {
        opacity: 0.9;
    }
    .dark-theme .action-button-small, .dark-theme a.action-button-small {
          border-color: var(--button-secondary-border-color);
          background-color: var(--button-secondary-bg-color);
          color: var(--button-secondary-text-color);
    }

    #share-modal .form-group label[for="share-allow-download"],
    #share-modal .form-group label[for="share-allow-view"] {
        display: inline-block; margin-left: 5px; font-weight: normal;
    }
    #share-modal .form-group input[type="checkbox"] {
        width: auto; vertical-align: middle;
    }
    .link-actions-group { /* General for list view */
        display: flex;
        gap: 5px;
        align-items: center;
        margin-left: auto;
        padding-left: 10px;
        flex-shrink: 0;
    }
</style>
</head>
<body>
    <div class="container">
        <header>
            <h1>
                <%
                let headerTitle = (locals.viewContextUser ? viewContextUser.username : user.username) + ' 的文件';
                if (locals.isSearchResult && locals.searchQuery) {
                    headerTitle = `有關 "${searchQuery}" 的搜尋結果`;
                    if (locals.viewContextUser && locals.viewContextUser.username !== user.username) {
                        headerTitle += ` (在 ${viewContextUser.username} 的文件中)`;
                    } else {
                        headerTitle += ` (在您的文件中)`;
                    }
                } else if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') {
                    headerTitle = `管理員視角: ${viewContextUser.username} 的文件`;
                } else if (locals.viewMode === 'userShares') {
                    headerTitle = `我創建的公開連結`;
                    if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') {
                        headerTitle += ` (來自 ${viewContextUser.username})`;
                    }
                }
                %>
                <%= headerTitle %>
            </h1>
            <div class="header-controls">
                <nav>
                    <% if (user.role === 'admin') { %><a href="/admin">管理面板</a><% } %>
                    <a href="/change-password">修改密碼</a>
                    <a href="/logout">登出</a>
                </nav>
                <%- include('partials/theme-switcher') %>
            </div>
        </header>

        <% if (locals.message) { %>
            <p class="message <%= (locals.messageType === 'error' || (locals.message && (message.includes('失敗') || message.includes('错误') || message.includes('沒有選擇文件') || message.includes('無效的') ))) ? 'error-message' : (locals.messageType === 'success' ? '' : (locals.messageType === 'warning' ? 'warning-message' : '') ) %>"><%= message %></p>
        <% } %>

        <div class="nav-tabs">
            <a href="/files<%= locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewContextUser.username) : '' %>"
               class="nav-link <%= (!locals.viewMode || locals.viewMode === 'myfiles') ? 'active' : '' %>" target="_self">
                我的文件
            </a>
            <a href="/files?viewMode=userShares<%= locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewContextUser.username) : '' %>"
               class="nav-link <%= locals.viewMode === 'userShares' ? 'active' : '' %>" target="_self">
                我的公開連結
            </a>
        </div>


        <% if (!locals.isSearchResult && (!locals.viewMode || locals.viewMode === 'myfiles')) { %>
            <div class="current-path">
                當前路徑:
                <a href="/files<%= locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewContextUser.username) : '' %>">根目錄</a>
                <%
                    let pathSegments = currentPath.split('/').filter(Boolean);
                    let cumulativePathForLink = '';
                    const adminTargetQueryForPath = locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewContextUser.username) : '';
                %>
                <% pathSegments.forEach(segment => { %>
                    <% cumulativePathForLink += '/' + segment; %>
                    / <a href="/files?path=<%= encodeURIComponent(cumulativePathForLink) %><%= adminTargetQueryForPath %>"><%= segment %></a>
                <% }); %>
            </div>
        <% } else if (locals.isSearchResult && locals.searchQuery) { %>
             <div class="search-results-info">
                正在顯示包含 "<%= searchQuery %>" 的文件。
                <a href="/files<%= locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewContextUser.username) : '' %>">清除搜索並返回根目錄</a>
            </div>
        <% } %>

        <div class="file-browser-controls">
            <% if ((!locals.viewMode || locals.viewMode === 'myfiles') && !locals.isSearchResult && currentPath && currentPath !== '/search-results') { %>
                <div class="actions-group-left">
                    <button type="button" id="show-create-textfile-modal-btn">新建文本文件</button>
                    <button type="button" id="show-create-folder-modal-btn">創建文件夾</button>
                    <button type="button" id="toggleUploadActionsBtn" class="upload-button-main">上傳</button>
                </div>
            <% } %>
            <% if (locals.viewMode !== 'userShares') { %>
                <button type="button" id="toggle-multi-select-btn">啟用多選</button>
            <% } else if (items.length > 0) { %> <button type="button" id="toggle-multi-select-btn">啟用多選</button>
            <% } %>

            <form action="/files" method="GET" class="control-form search-form-right">
                <% if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewContextUser.username %>">
                <% } %>
                <% if (locals.viewMode) { %>
                    <input type="hidden" name="viewMode" value="<%= locals.viewMode %>">
                <% } %>
                <input type="search" name="q" placeholder="搜索..." value="<%= locals.searchQuery || '' %>">
                <button type="submit">搜索</button>
            </form>

            <div class="view-toggle">
                <button id="listViewBtn">列表</button>
                <button id="gridViewBtn">網格</button>
            </div>
        </div>

        <% if ((!locals.viewMode || locals.viewMode === 'myfiles') && !locals.isSearchResult && currentPath && currentPath !== '/search-results') { %>
            <div id="upload-actions-container" style="justify-content: flex-start;">
                <button type="button" id="upload-files-btn">上傳文件</button>
                <button type="button" id="upload-folder-btn">上傳文件夾</button>
            </div>

            <div id="upload-section">
                <h2 id="upload-section-title">上傳到 "<%= currentPath === '/' ? '根目錄' : currentPath.split('/').pop() %>"</h2>
                <div id="drop-area">
                    <form id="upload-form" action="/upload" method="POST" enctype="multipart/form-data">
                        <input type="hidden" name="currentPath" value="<%= currentPath %>">
                        <% if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') { %><input type="hidden" name="targetUsername" value="<%= viewContextUser.username %>"><% } %>
                        <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                        <input type="file" id="userFiles" name="userFiles" multiple style="display: none;">
                        <p id="drop-area-text">將文件或文件夾拖拽到此處，或點擊上方按鈕選擇</p>
                        <button type="submit" id="upload-button">上傳已選項目</button>
                    </form>
                    <div id="file-list-preview" style="margin-top:10px; text-align:left;"></div>
                    <div class="progress-bar-container" id="upload-progress-container">
                        <div class="progress-bar" id="upload-progress-bar">0%</div>
                    </div>
                </div>
            </div>
        <% } %>

        <% if (locals.viewMode !== 'userShares') { %>
            <div id="selection-action-bar">
                <span id="selection-count" style="margin-right: 15px;">已選擇 0 項</span>
                <button id="action-play-btn" disabled>播放</button>
                <button id="action-edit-btn" disabled>編輯</button>
                <button id="action-rename-btn" disabled>重命名</button>
                <button id="action-move-btn" disabled>移動</button>
                <button id="action-share-btn" disabled>創建公開連結</button>
                <button id="action-view-existing-links-btn" disabled style="display:none;">查看已分享連結</button>
                <button id="action-download-btn" disabled>下載選中項</button>
                <button id="action-delete-btn" class="secondary" disabled>删除</button>
            </div>
        <% } else { %>
            <div id="public-link-selection-action-bar">
                <span id="public-link-selection-count" style="margin-right: 15px;">已選擇 0 個連結</span>
                <button id="action-revoke-selected-links-btn" class="secondary" disabled>撤銷選中連結</button>
            </div>
        <% } %>

        <%
            let pageHeading = '文件列表';
            if (locals.isSearchResult) pageHeading = '搜索結果';
            else if (locals.viewMode === 'userShares') pageHeading = '我創建的公開連結';
        %>
        <h2><%= pageHeading %></h2>

        <% if (items.length > 0 && locals.viewMode !== 'userShares') { %>
            <div id="select-all-container">
                <input type="checkbox" id="select-all-checkbox">
                <label for="select-all-checkbox">全選/取消全選</label>
            </div>
        <% } else if (items.length > 0 && locals.viewMode === 'userShares') { %>
            <div id="select-all-public-links-container">
                <input type="checkbox" id="select-all-public-links-checkbox">
                <label for="select-all-public-links-checkbox">全選/取消全選</label>
            </div>
        <% } %>

        <div id="file-container" class="list-view">
            <% if (items.length > 0) { %>
                <% const adminTargetQueryForActions = locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewContextUser.username) : ''; %>
                <%
                    const formatFileSize = (bytes) => {
                        if (bytes === undefined || bytes === null || isNaN(bytes)) return '--';
                        if (bytes === 0) return '0 B';
                        const k = 1024;
                        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
                        const i = Math.floor(Math.log(bytes) / Math.log(k));
                        return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
                    };
                    const formatDate = (dateString) => {
                        if (!dateString) return '--';
                        try {
                            const date = new Date(dateString);
                            if (isNaN(date.getTime())) return '--';
                            return date.toLocaleDateString('zh-CN', {
                                year: 'numeric', month: '2-digit', day: '2-digit',
                                hour: '2-digit', minute: '2-digit'
                            });
                        } catch (e) { return '--'; }
                    };
                %>
                <ul>
                    <% items.forEach(item => { %>
                        <li data-item-path="<%= item.path %>"
                            <% if (locals.viewMode === 'userShares') { %>data-link-id="<%= item.link_id %>" data-token="<%= item.token %>" data-public-url="<%= item.publicUrl %>"<% } %>
                            >
                            <div class="file-entry-selectable">
                                <% if (locals.viewMode !== 'userShares') { %>
                                <input type="checkbox" class="item-checkbox"
                                       data-path="<%= item.path %>"
                                       data-encoded-path="<%= item.encodedPath %>"
                                       data-name="<%= item.name %>"
                                       data-encoded-name="<%= item.encodedName %>"
                                       data-is-dir="<%= item.isDir %>"
                                       data-is-playable-video="<%= item.isPlayableVideo || false %>"
                                       data-video-type="<%= item.videoType || '' %>"
                                       data-raw-name="<%= item.name.replace(/'/g, '\\\'').replace(/"/g, '&quot;') %>"
                                       >
                                <% } else { %>
                                    <input type="checkbox" class="public-link-checkbox" data-link-id="<%= item.link_id %>">
                                <% } %>
                                <div class="file-content-wrapper">
                                    <% if (item.isDir) { %>
                                        <div class="file-entry">
                                            <span class="file-icon-large folder-icon">📁</span>
                                            <% if (locals.viewMode === 'userShares') { %>
                                                <span class="file-name"><%= item.name %></span>
                                            <% } else { %>
                                                <a href="/files?path=<%= item.encodedPath %><%= adminTargetQueryForActions %>" class="file-name"><%= item.name %></a>
                                            <% } %>
                                            <% if (locals.isSearchResult && (!locals.viewMode || locals.viewMode === 'myfiles')) { %><span class="file-location-in-search">(位於: <%= (item.path.substring(0, item.path.lastIndexOf('/')) || '/') %>)</span><% } %>
                                        </div>
                                        <div class="file-details">
                                            <% if (locals.viewMode === 'userShares') { %>
                                                <span class="file-public-link"><a href="<%= item.publicUrl %>" target="_blank" title="點擊打開公開連結"><%= item.publicUrl %></a></span>
                                                <span class="file-created-at">創建於: <%= formatDate(item.createdAt) %></span>
                                            <% } else { %>
                                                <span class="file-size"></span>
                                                <span class="file-modified"><%= formatDate(item.lastModified) %></span>
                                            <% } %>
                                        </div>
                                    <% } else { // It's a file %>
                                        <div class="file-entry">
                                            <%
                                                const ext = item.name.includes('.') ? item.name.substring(item.name.lastIndexOf('.') + 1).toLowerCase() : '';
                                                let largeIcon = '📄';
                                                let iconClass = 'file-icon';

                                                if (item.isDir) {
                                                    largeIcon = '📁';
                                                    iconClass = 'folder-icon';
                                                } else if (ALLOWED_TEXT_EXTENSIONS.includes('.' + ext) || ALLOWED_TEXT_EXTENSIONS.includes(ext)) {
                                                    largeIcon = '📝'; iconClass = 'text-file-icon';
                                                } else if (item.isPlayableVideo) {
                                                    largeIcon = '🎥'; iconClass = 'video-file-icon';
                                                } else if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'].includes(ext)) {
                                                    largeIcon = '🖼️'; iconClass = 'image-file-icon';
                                                } else if (['pdf'].includes(ext)) {
                                                    largeIcon = '📕'; iconClass = 'pdf-file-icon';
                                                }
                                            %>
                                            <span class="file-icon-large <%= iconClass %>"><%= largeIcon %></span>
                                            <% if (locals.viewMode === 'userShares') { %>
                                                <span class="file-name"><%= item.name %></span>
                                            <% } else if (item.isPlayableVideo) { %>
                                                <a href="#" class="file-name video-link"
                                                   data-path="<%= item.encodedPath %>"
                                                   data-name="<%= item.name %>"
                                                   data-type="<%= item.videoType %>"
                                                   title="點擊播放 <%= item.name %>"><%= item.name %></a>
                                            <% } else if (ALLOWED_TEXT_EXTENSIONS.includes('.' + ext) || ALLOWED_TEXT_EXTENSIONS.includes(ext)) { %>
                                                <a href="/view?path=<%= item.encodedPath %><%= adminTargetQueryForActions %>" class="file-name" title="點擊查看"><%= item.name %></a>
                                            <% } else { %>
                                                <span class="file-name"><%= item.name %></span>
                                            <% } %>
                                            <% if (locals.isSearchResult && (!locals.viewMode || locals.viewMode === 'myfiles')) { %><span class="file-location-in-search">(位於: <%= (item.path.substring(0, item.path.lastIndexOf('/')) || '/') %>)</span><% } %>
                                        </div>
                                        <div class="file-details">
                                            <% if (locals.viewMode === 'userShares') { %>
                                                <span class="file-public-link"><a href="<%= item.publicUrl %>" target="_blank" title="點擊打開公開連結"><%= item.publicUrl %></a></span>
                                                <span class="file-created-at">創建於: <%= formatDate(item.createdAt) %></span>
                                            <% } else { %>
                                                <span class="file-size" title="<%= item.size %> bytes"><%= formatFileSize(item.size) %></span>
                                                <span class="file-modified"><%= formatDate(item.lastModified) %></span>
                                            <% } %>
                                        </div>
                                    <% } %>
                                    <% if (locals.viewMode === 'userShares') { %>
                                        <div class="link-actions-group">
                                            <button type="button" class="action-button-small view-public-link-btn" data-url="<%= item.publicUrl %>">查看</button>
                                            <form action="/actions/revoke-public-link" method="POST" class="revoke-single-link-form" style="display: inline;">
                                                <input type="hidden" name="link_id" value="<%= item.link_id %>">
                                                <% if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') { %>
                                                    <input type="hidden" name="contextUsername" value="<%= viewContextUser.username %>">
                                                <% } %>
                                                <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                                                <button type="submit" class="secondary action-button-small" onclick="return confirm('確定要撤銷此公開連結嗎？');">撤銷</button>
                                            </form>
                                        </div>
                                    <% } else { %>
                                        <span class="file-actions-placeholder"></span>
                                    <% } %>
                                </div>
                            </div>
                        </li>
                    <% }) %>
                </ul>
            <% } else { %>
                <p><%= locals.isSearchResult ? '找不到符合條件的文件。' : ( (locals.viewMode === 'userShares') ? '您尚未創建任何公開連結。' : '此文件夾為空。' ) %></p>
            <% } %>
        </div>
    </div>

    <div id="create-item-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-create-item-modal-btn">&times;</span>
            <h3 id="create-item-modal-title">创建新项目</h3>
            <form id="create-item-form" method="POST">
                <input type="hidden" name="currentPath" value="<%= currentPath %>">
                <% if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewContextUser.username %>">
                <% } %>
                <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                <div class="form-group">
                    <label for="create-item-name-input" id="create-item-name-label">名称:</label>
                    <input type="text" id="create-item-name-input" name="" required>
                </div>
                <div class="modal-actions">
                    <button type="button" class="secondary" id="cancel-create-item-btn">取消</button>
                    <button type="submit" id="confirm-create-item-btn">确认创建</button>
                </div>
            </form>
        </div>
    </div>

    <div id="rename-item-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-rename-item-modal-btn">&times;</span>
            <h3>重命名項目</h3>
            <form id="rename-item-form" action="/rename" method="POST">
                <input type="hidden" name="currentPath" id="rename-current-path-input">
                <input type="hidden" name="oldPath" id="rename-old-path-input">
                <input type="hidden" name="isDir" id="rename-is-dir-input">
                <% if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewContextUser.username %>" id="rename-target-username-input">
                <% } else { %>
                    <input type="hidden" name="targetUsername" value="" id="rename-target-username-input">
                <% } %>
                <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                <div class="form-group">
                    <label for="rename-new-name-input">新名稱:</label>
                    <input type="text" id="rename-new-name-input" name="newName" placeholder="新名稱" required>
                </div>
                <div class="modal-actions">
                    <button type="button" class="secondary" id="cancel-rename-item-btn">取消</button>
                    <button type="submit" id="confirm-rename-item-btn">確認</button>
                </div>
            </form>
        </div>
    </div>


    <div id="move-modal" class="modal">
        <div class="modal-content"> <span class="close-modal-btn" id="close-move-modal-btn">&times;</span>
            <h3>移動選中項目到:</h3>
            <div id="directory-tree-container">
                <p>正在加載目錄...</p>
            </div>
            <p>已選擇目標: <strong id="selected-destination-path">無</strong></p>
            <input type="hidden" id="move-destination-input" value="">
            <div class="modal-actions"> <button type="button" class="secondary" id="cancel-move-btn">取消</button>
                <button id="confirm-move-btn" disabled>確認移動</button>
            </div>
        </div>
    </div>

    <div id="overwrite-confirm-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-overwrite-modal-btn">&times;</span>
            <h3>確認操作</h3>
            <p id="overwrite-message">一個同名項目已存在。您要覆蓋它嗎？</p>
            <div class="modal-actions">
                <button type="button" class="secondary" id="overwrite-abandon-btn">放棄</button>
                <button type="button" id="overwrite-confirm-btn">覆蓋</button>
            </div>
        </div>
    </div>

    <div id="video-player-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-video-modal-btn">&times;</span>
            <h3 id="video-modal-title" style="margin-bottom: 15px;">播放視頻</h3>
            <video id="html5-video-player" controls controlsList="nodownload" width="100%" style="max-height: 75vh; display: block; background-color: #000;">
                <source id="video-source" src="" type="">
                您的瀏覽器不支持 HTML5 video 標籤。
            </video>
        </div>
    </div>

    <div id="share-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-share-modal-btn">&times;</span>
            <h3>創建公開分享連結</h3>
            <form id="share-form">
                <input type="hidden" name="filePathToShare" id="share-file-path-input">
                <input type="hidden" name="isDirectory" id="share-is-directory-input">
                <% if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewContextUser.username %>">
                <% } %>
                <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                <p>為 "<strong id="share-item-name-display"></strong>" 創建公開連結:</p>
                <div class="form-group">
                    <input type="checkbox" id="share-allow-download" name="allowDownload" checked>
                    <label for="share-allow-download">允許下載</label>
                </div>
                <div class="form-group">
                    <input type="checkbox" id="share-allow-view" name="allowView" checked>
                    <label for="share-allow-view">允許預覽 (如果支持)</label>
                </div>
                <div class="modal-actions">
                    <button type="button" class="secondary" id="cancel-share-btn">取消</button>
                    <button type="button" id="confirm-share-btn">創建連結</button>
                </div>
            </form>
        </div>
    </div>

    <div id="public-link-display-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-public-link-display-modal-btn">&times;</span>
            <h3 id="public-link-modal-title">公開連結</h3>
            <p id="public-link-modal-message">您可以複製下面的連結進行分享:</p>
            <div class="public-link-container">
                <input type="url" id="generated-public-link" readonly>
                <button id="copy-public-link-btn">複製</button>
            </div>
            <div class="modal-actions">
                <button type="button" class="secondary" id="ok-public-link-display-btn">完成</button>
            </div>
        </div>
    </div>

    <div id="existing-links-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-existing-links-modal-btn">&times;</span>
            <h3>項目 "<span id="existing-links-item-name"></span>" 的已分享連結</h3>
            <div id="existing-links-list-container">
                <p>正在加載連結...</p>
            </div>
            <div class="modal-actions">
                <button type="button" class="secondary" id="done-existing-links-btn">完成</button>
            </div>
        </div>
    </div>


    <script src="/theme.js"></script>
    <script>
        // JavaScript code remains the same as in your previous version
        // Ensure the new rename modal elements are selected and handled correctly
        const ALLOWED_TEXT_EXTENSIONS = <%- JSON.stringify(locals.ALLOWED_TEXT_EXTENSIONS || []) %>;
        const ALLOWED_VIDEO_EXTENSIONS = <%- JSON.stringify(locals.ALLOWED_VIDEO_EXTENSIONS || []) %>;
        const CSRF_TOKEN = "<%= locals.csrfToken || '' %>";
        const VIEW_CONTEXT_USER_USERNAME = "<%= locals.viewContextUser ? locals.viewContextUser.username : '' %>";
        const CURRENT_SESSION_USER_ROLE = "<%= user.role %>";
        const CURRENT_SESSION_USER_USERNAME = "<%= user.username %>";
        const CURRENT_PATH_ON_LOAD = "<%= currentPath %>";
        const IS_SEARCH_RESULT_VIEW = <%= locals.isSearchResult || false %>;
        const CURRENT_VIEW_MODE = "<%= locals.viewMode || 'myfiles' %>";
        const EXISTING_ITEM_NAMES_ON_PAGE = <%- JSON.stringify((locals.viewMode || 'myfiles') === 'myfiles' && Array.isArray(items) ? items.map(item => item.name.toLowerCase()) : []) %>;
        const HAS_ITEMS_ON_PAGE = <%= items.length > 0 %>;


        document.addEventListener('DOMContentLoaded', () => {
            const fileContainer = document.getElementById('file-container');
            const selectAllCheckbox = document.getElementById('select-all-checkbox');
            const selectAllContainer = document.getElementById('select-all-container');
            const selectionActionBar = document.getElementById('selection-action-bar');
            const selectionCountDisplay = document.getElementById('selection-count');
            const actionPlayBtn = document.getElementById('action-play-btn');
            const actionEditBtn = document.getElementById('action-edit-btn');
            const actionRenameBtn = document.getElementById('action-rename-btn');
            const actionMoveBtn = document.getElementById('action-move-btn');
            const actionShareBtn = document.getElementById('action-share-btn');
            const actionViewExistingLinksBtn = document.getElementById('action-view-existing-links-btn');
            const actionDownloadBtn = document.getElementById('action-download-btn');
            const actionDeleteBtn = document.getElementById('action-delete-btn');

            const selectAllPublicLinksCheckbox = document.getElementById('select-all-public-links-checkbox');
            const selectAllPublicLinksContainer = document.getElementById('select-all-public-links-container');
            const publicLinkSelectionActionBar = document.getElementById('public-link-selection-action-bar');
            const publicLinkSelectionCountDisplay = document.getElementById('public-link-selection-count');
            const actionRevokeSelectedLinksBtn = document.getElementById('action-revoke-selected-links-btn');

            const moveModal = document.getElementById('move-modal');
            const closeMoveModalBtn = document.getElementById('close-move-modal-btn');
            const directoryTreeContainer = document.getElementById('directory-tree-container');
            const confirmMoveBtn = document.getElementById('confirm-move-btn');
            const cancelMoveBtn = document.getElementById('cancel-move-btn');
            const selectedDestinationPathDisplay = document.getElementById('selected-destination-path');
            const moveDestinationInput = document.getElementById('move-destination-input');
            let currentDirectoryTree = [];

            const toggleUploadActionsBtn = document.getElementById('toggleUploadActionsBtn');
            const uploadActionsContainer = document.getElementById('upload-actions-container');
            const uploadFilesBtn = document.getElementById('upload-files-btn');
            const uploadFolderBtn = document.getElementById('upload-folder-btn');
            const uploadSection = document.getElementById('upload-section');
            const userFilesInput = document.getElementById('userFiles');
            const dropAreaText = document.getElementById('drop-area-text');
            const uploadForm = document.getElementById('upload-form');
            const uploadProgressContainer = document.getElementById('upload-progress-container');
            const uploadProgressBar = document.getElementById('upload-progress-bar');
            const fileListPreview = document.getElementById('file-list-preview');
            const uploadButton = document.getElementById('upload-button');
            const dropArea = document.getElementById('drop-area');

            const overwriteModal = document.getElementById('overwrite-confirm-modal');
            const overwriteMessage = document.getElementById('overwrite-message');
            const overwriteConfirmBtn = document.getElementById('overwrite-confirm-btn');
            const overwriteAbandonBtn = document.getElementById('overwrite-abandon-btn');
            const closeOverwriteModalBtn = document.getElementById('close-overwrite-modal-btn');

            const toggleMultiSelectBtn = document.getElementById('toggle-multi-select-btn');
            let multiSelectModeActive = false;
            let currentSingleSelectedItem = null;

            const videoPlayerModal = document.getElementById('video-player-modal');
            const html5VideoPlayer = document.getElementById('html5-video-player');
            const videoSourceElement = document.getElementById('video-source');
            const videoModalTitle = document.getElementById('video-modal-title');
            const closeVideoModalBtn = document.getElementById('close-video-modal-btn');

            const shareModal = document.getElementById('share-modal');
            const closeShareModalBtn = document.getElementById('close-share-modal-btn');
            const cancelShareBtn = document.getElementById('cancel-share-btn');
            const confirmShareBtn = document.getElementById('confirm-share-btn');
            const shareItemNameDisplay = document.getElementById('share-item-name-display');
            const shareFilePathInput = document.getElementById('share-file-path-input');
            const shareIsDirectoryInput = document.getElementById('share-is-directory-input');
            const shareAllowDownloadCheckbox = document.getElementById('share-allow-download');
            const shareAllowViewCheckbox = document.getElementById('share-allow-view');

            const publicLinkDisplayModal = document.getElementById('public-link-display-modal');
            const generatedPublicLinkInput = document.getElementById('generated-public-link');
            const copyPublicLinkBtn = document.getElementById('copy-public-link-btn');
            const closePublicLinkDisplayModalBtn = document.getElementById('close-public-link-display-modal-btn');
            const okPublicLinkDisplayBtn = document.getElementById('ok-public-link-display-btn');
            const publicLinkModalTitle = document.getElementById('public-link-modal-title');
            const publicLinkModalMessage = document.getElementById('public-link-modal-message');

            const existingLinksModal = document.getElementById('existing-links-modal');
            const closeExistingLinksModalBtn = document.getElementById('close-existing-links-modal-btn');
            const doneExistingLinksBtn = document.getElementById('done-existing-links-btn');
            const existingLinksItemNameSpan = document.getElementById('existing-links-item-name');
            const existingLinksListContainer = document.getElementById('existing-links-list-container');

            const renameItemModal = document.getElementById('rename-item-modal');
            const closeRenameItemModalBtn = document.getElementById('close-rename-item-modal-btn');
            const cancelRenameItemBtn = document.getElementById('cancel-rename-item-btn');
            const renameItemForm = document.getElementById('rename-item-form');
            const renameNewNameInput = document.getElementById('rename-new-name-input');
            const renameOldPathInput = document.getElementById('rename-old-path-input');
            const renameCurrentPathInput = document.getElementById('rename-current-path-input');
            const renameIsDirInput = document.getElementById('rename-is-dir-input');
            const renameTargetUsernameInput = document.getElementById('rename-target-username-input');


            function clearSingleSelection() {
                if (currentSingleSelectedItem && currentSingleSelectedItem.element) {
                    currentSingleSelectedItem.element.classList.remove('single-selected-item');
                }
                currentSingleSelectedItem = null;
            }

            function updateMultiSelectModeUI() {
                if (!fileContainer || !toggleMultiSelectBtn) return;
                const isUserSharesView = CURRENT_VIEW_MODE === 'userShares';
                if (multiSelectModeActive) {
                    clearSingleSelection();
                    fileContainer.classList.add('multi-select-mode-active');
                    toggleMultiSelectBtn.textContent = '取消多選';
                    if (isUserSharesView && selectAllPublicLinksContainer && HAS_ITEMS_ON_PAGE) {
                        selectAllPublicLinksContainer.classList.add('visible-in-multiselect');
                    } else if (!isUserSharesView && selectAllContainer && HAS_ITEMS_ON_PAGE) {
                        selectAllContainer.classList.add('visible-in-multiselect');
                    }
                } else {
                    fileContainer.classList.remove('multi-select-mode-active');
                    toggleMultiSelectBtn.textContent = '啟用多選';
                    if (selectAllContainer) selectAllContainer.classList.remove('visible-in-multiselect');
                    if (selectAllPublicLinksContainer) selectAllPublicLinksContainer.classList.remove('visible-in-multiselect');
                    document.querySelectorAll('.item-checkbox:checked, .public-link-checkbox:checked').forEach(cb => cb.checked = false);
                    if (selectAllCheckbox) selectAllCheckbox.checked = false;
                    if (selectAllPublicLinksCheckbox) selectAllPublicLinksCheckbox.checked = false;
                }
                updateSelectionActions();
                updatePublicLinkSelectionActions();
            }

            if (toggleMultiSelectBtn) {
                toggleMultiSelectBtn.addEventListener('click', () => {
                    multiSelectModeActive = !multiSelectModeActive;
                    updateMultiSelectModeUI();
                });
            }

            function getCheckboxSelectedItems() {
                const currentCheckboxes = document.querySelectorAll('#file-container .item-checkbox');
                const selected = [];
                currentCheckboxes.forEach((cb) => {
                    if (cb.checked) {
                        selected.push({
                            path: cb.dataset.path, encodedPath: cb.dataset.encodedPath,
                            name: cb.dataset.name, encodedName: cb.dataset.encodedName,
                            isDir: cb.dataset.isDir === 'true', rawName: cb.dataset.rawName,
                            isPlayableVideo: cb.dataset.isPlayableVideo === 'true',
                            videoType: cb.dataset.videoType,
                            element: cb.closest('li')
                        });
                    }
                });
                return selected;
            }

            function getSelectedPublicLinkIds() {
                const selectedIds = [];
                document.querySelectorAll('#file-container .public-link-checkbox:checked').forEach(cb => {
                    selectedIds.push(cb.dataset.linkId);
                });
                return selectedIds;
            }

            async function updateSelectionActions() {
                 if (CURRENT_VIEW_MODE === 'userShares' || !selectionActionBar) {
                    if(selectionActionBar) selectionActionBar.style.display = 'none';
                    return;
                }
                let count = 0;
                let itemsForActions = [];
                let isSingleFileEditable = false;
                let isSingleFilePlayableVideo = false;
                let isSingleItemSharable = false;
                let hasExistingShares = false;

                if (multiSelectModeActive) {
                    const checkboxSelectedItems = getCheckboxSelectedItems();
                    count = checkboxSelectedItems.length;
                    itemsForActions = checkboxSelectedItems;
                    if (count === 1 && itemsForActions[0]) {
                        const item = itemsForActions[0];
                        if (!item.isDir) {
                            const fileName = item.name;
                            const fileExt = fileName.includes('.') ? fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase() : '';
                            if (ALLOWED_TEXT_EXTENSIONS.includes('.' + fileExt) || ALLOWED_TEXT_EXTENSIONS.includes(fileExt)) {
                                isSingleFileEditable = true;
                            }
                            if (item.isPlayableVideo) {
                                isSingleFilePlayableVideo = true;
                            }
                        }
                        isSingleItemSharable = true;
                        try {
                            let apiUrl = `/api/item-public-links?filePath=${encodeURIComponent(item.path)}`;
                            if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                                apiUrl += `&targetUsername=${encodeURIComponent(VIEW_CONTEXT_USER_USERNAME)}`;
                            }
                            const response = await fetch(apiUrl);
                            const data = await response.json();
                            if (data.success && data.links && data.links.length > 0) {
                                hasExistingShares = true;
                            }
                        } catch (e) { /* Error checking existing shares, button remains hidden/disabled */ }
                    }
                } else if (currentSingleSelectedItem) {
                    count = 1;
                    itemsForActions.push(currentSingleSelectedItem);
                    const item = currentSingleSelectedItem;
                    if (!item.isDir) {
                        const fileName = item.name;
                        const fileExt = fileName.includes('.') ? fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase() : '';
                         if (ALLOWED_TEXT_EXTENSIONS.includes('.' + fileExt) || ALLOWED_TEXT_EXTENSIONS.includes(fileExt)) {
                            isSingleFileEditable = true;
                        }
                        if (item.isPlayableVideo) {
                            isSingleFilePlayableVideo = true;
                        }
                    }
                    isSingleItemSharable = true;
                    try {
                        let apiUrl = `/api/item-public-links?filePath=${encodeURIComponent(item.path)}`;
                        if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                            apiUrl += `&targetUsername=${encodeURIComponent(VIEW_CONTEXT_USER_USERNAME)}`;
                        }
                        const response = await fetch(apiUrl);
                        const data = await response.json();
                        if (data.success && data.links && data.links.length > 0) {
                            hasExistingShares = true;
                        }
                    } catch (e) { /* Error checking existing shares, button remains hidden/disabled */ }
                }

                if (count > 0) {
                    selectionActionBar.style.display = 'flex';
                    selectionCountDisplay.textContent = `已選擇 ${count} 項`;
                } else {
                    selectionActionBar.style.display = 'none';
                }

                if(actionPlayBtn) actionPlayBtn.disabled = !(count === 1 && isSingleFilePlayableVideo);
                if(actionEditBtn) actionEditBtn.disabled = !(count === 1 && isSingleFileEditable);
                if(actionRenameBtn) actionRenameBtn.disabled = !(count === 1);
                if(actionMoveBtn) actionMoveBtn.disabled = !(count > 0);
                if(actionShareBtn) actionShareBtn.disabled = !(count === 1 && isSingleItemSharable);
                if(actionViewExistingLinksBtn) {
                    actionViewExistingLinksBtn.disabled = !(count === 1 && hasExistingShares);
                    actionViewExistingLinksBtn.style.display = (count === 1 && hasExistingShares) ? 'inline-block' : 'none';
                }
                if(actionDownloadBtn) actionDownloadBtn.disabled = !(count > 0);
                if(actionDeleteBtn) actionDeleteBtn.disabled = !(count > 0);
            }

            function updatePublicLinkSelectionActions() {
                if (CURRENT_VIEW_MODE !== 'userShares' || !publicLinkSelectionActionBar) {
                    if(publicLinkSelectionActionBar) publicLinkSelectionActionBar.style.display = 'none';
                    return;
                }
                const selectedLinkIds = getSelectedPublicLinkIds();
                const count = selectedLinkIds.length;

                if (count > 0) {
                    publicLinkSelectionActionBar.style.display = 'flex';
                    if(publicLinkSelectionCountDisplay) publicLinkSelectionCountDisplay.textContent = `已選擇 ${count} 個連結`;
                    if(actionRevokeSelectedLinksBtn) actionRevokeSelectedLinksBtn.disabled = false;
                } else {
                    publicLinkSelectionActionBar.style.display = 'none';
                    if(actionRevokeSelectedLinksBtn) actionRevokeSelectedLinksBtn.disabled = true;
                }
            }

            document.querySelectorAll('#file-container .item-checkbox').forEach((checkbox) => {
                checkbox.addEventListener('change', () => {
                    if (CURRENT_VIEW_MODE === 'userShares') return;
                    if (multiSelectModeActive) {
                        clearSingleSelection();
                        updateSelectionActions();
                    } else {
                        checkbox.checked = false;
                    }
                });
            });

            document.querySelectorAll('#file-container .public-link-checkbox').forEach((checkbox) => {
                checkbox.addEventListener('change', () => {
                    if (CURRENT_VIEW_MODE !== 'userShares') return;
                    if (multiSelectModeActive) {
                        updatePublicLinkSelectionActions();
                    } else {
                        checkbox.checked = false;
                    }
                });
            });

            if (selectAllCheckbox && selectAllContainer) {
                selectAllCheckbox.addEventListener('change', (e) => {
                    if (!multiSelectModeActive || CURRENT_VIEW_MODE === 'userShares') return;
                    clearSingleSelection();
                    const currentCheckboxes = document.querySelectorAll('#file-container .item-checkbox');
                    currentCheckboxes.forEach(cb => {
                        if (cb.checked !== e.target.checked) {
                            cb.checked = e.target.checked;
                        }
                    });
                    updateSelectionActions();
                });
            }

            if (selectAllPublicLinksCheckbox && selectAllPublicLinksContainer) {
                selectAllPublicLinksCheckbox.addEventListener('change', (e) => {
                    if (!multiSelectModeActive || CURRENT_VIEW_MODE !== 'userShares') return;
                    const currentCheckboxes = document.querySelectorAll('#file-container .public-link-checkbox');
                    currentCheckboxes.forEach(cb => {
                        if (cb.checked !== e.target.checked) {
                            cb.checked = e.target.checked;
                        }
                    });
                    updatePublicLinkSelectionActions();
                });
            }

            if (fileContainer) {
                fileContainer.querySelectorAll('ul > li .file-entry-selectable').forEach(contentWrapper => {
                    contentWrapper.addEventListener('click', async (event) => {
                        if (CURRENT_VIEW_MODE === 'userShares') {
                            const listItem = contentWrapper.closest('li');
                            if (!listItem) return;
                            const checkbox = listItem.querySelector('.public-link-checkbox');
                            if (checkbox && event.target !== checkbox && !event.target.closest('form') && !event.target.classList.contains('view-public-link-btn')) {
                                if (multiSelectModeActive) {
                                    checkbox.checked = !checkbox.checked;
                                    updatePublicLinkSelectionActions();
                                }
                            }
                            return;
                        }

                        const listItem = contentWrapper.closest('li');
                        if (!listItem) return;
                        const checkbox = listItem.querySelector('.item-checkbox');
                        if (!checkbox) return;

                        if (event.target.classList.contains('video-link') || event.target.closest('.video-link') ||
                            event.target.tagName === 'A' || event.target.closest('a') ||
                            event.target.classList.contains('item-checkbox')
                            ) {
                            return;
                        }

                        const itemData = {
                            path: checkbox.dataset.path, encodedPath: checkbox.dataset.encodedPath,
                            name: checkbox.dataset.name, encodedName: checkbox.dataset.encodedName,
                            isDir: checkbox.dataset.isDir === 'true', rawName: checkbox.dataset.rawName,
                            isPlayableVideo: checkbox.dataset.isPlayableVideo === 'true',
                            videoType: checkbox.dataset.videoType,
                            element: listItem
                        };

                        if (multiSelectModeActive) {
                            checkbox.checked = !checkbox.checked;
                            clearSingleSelection();
                        } else {
                            if (currentSingleSelectedItem && currentSingleSelectedItem.element === listItem) {
                                clearSingleSelection();
                            } else {
                                clearSingleSelection();
                                currentSingleSelectedItem = itemData;
                                listItem.classList.add('single-selected-item');
                            }
                        }
                        await updateSelectionActions();
                    });
                });

                fileContainer.addEventListener('click', async (event) => {
                    if (event.target.closest('li') === null && (event.target.isSameNode(fileContainer) || event.target.tagName === 'UL')) {
                        if (!multiSelectModeActive && CURRENT_VIEW_MODE !== 'userShares') {
                            clearSingleSelection();
                            await updateSelectionActions();
                        }
                    }
                });
            }

            function openRenameModal(item) {
                if (!renameItemModal || !renameItemForm || !renameNewNameInput || !renameOldPathInput || !renameCurrentPathInput || !renameIsDirInput) return;

                renameOldPathInput.value = item.path;
                renameNewNameInput.value = item.name;
                renameIsDirInput.value = item.isDir;

                if (IS_SEARCH_RESULT_VIEW) {
                    renameCurrentPathInput.value = item.path.substring(0, item.path.lastIndexOf('/')) || '/';
                } else {
                    renameCurrentPathInput.value = CURRENT_PATH_ON_LOAD;
                }

                if (renameTargetUsernameInput) {
                     renameTargetUsernameInput.value = (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) ? VIEW_CONTEXT_USER_USERNAME : '';
                }

                renameItemModal.style.display = 'block';
                renameNewNameInput.focus();
                if (!item.isDir && item.name.includes('.')) {
                    const dotIndex = item.name.lastIndexOf('.');
                    renameNewNameInput.setSelectionRange(0, dotIndex);
                } else {
                    renameNewNameInput.select();
                }
            }

            if (actionRenameBtn) {
                actionRenameBtn.addEventListener('click', () => {
                    if (actionRenameBtn.disabled) return;
                    let itemToRename = null;
                    if (!multiSelectModeActive && currentSingleSelectedItem) {
                        itemToRename = currentSingleSelectedItem;
                    } else if (multiSelectModeActive) {
                        const selected = getCheckboxSelectedItems();
                        if (selected.length === 1) itemToRename = selected[0];
                    }
                    if (itemToRename) {
                        openRenameModal(itemToRename);
                    }
                });
            }

            if (closeRenameItemModalBtn) {
                closeRenameItemModalBtn.onclick = () => {
                    if (renameItemModal) renameItemModal.style.display = 'none';
                };
            }
            if (cancelRenameItemBtn) {
                cancelRenameItemBtn.onclick = (e) => { // Added event parameter
                    e.preventDefault(); // Prevent form submission if it's a button inside a form
                    if (renameItemModal) renameItemModal.style.display = 'none';
                };
            }


            document.querySelectorAll('.video-link').forEach(link => {
                link.addEventListener('click', function(event) {
                    event.preventDefault();
                    const encodedPath = this.dataset.path;
                    const videoName = this.dataset.name;
                    const videoType = this.dataset.type;
                    openVideoPlayer(encodedPath, videoName, videoType);
                });
            });

            if (actionPlayBtn) {
                actionPlayBtn.addEventListener('click', () => {
                    if (actionPlayBtn.disabled) return;
                    let itemToPlay = null;
                    if (!multiSelectModeActive && currentSingleSelectedItem && currentSingleSelectedItem.isPlayableVideo) {
                        itemToPlay = currentSingleSelectedItem;
                    } else if (multiSelectModeActive) {
                        const selected = getCheckboxSelectedItems();
                        if (selected.length === 1 && selected[0].isPlayableVideo) {
                            itemToPlay = selected[0];
                        }
                    }
                    if (itemToPlay) {
                        openVideoPlayer(itemToPlay.encodedPath, itemToPlay.name, itemToPlay.videoType);
                    }
                });
            }


             if (actionEditBtn) {
                actionEditBtn.addEventListener('click', () => {
                    if (actionEditBtn.disabled) return;
                    let itemToEdit = null;
                    if (!multiSelectModeActive && currentSingleSelectedItem) {
                        itemToEdit = currentSingleSelectedItem;
                    } else if (multiSelectModeActive) {
                        const selected = getCheckboxSelectedItems();
                        if (selected.length === 1) itemToEdit = selected[0];
                    }

                    if (itemToEdit && !itemToEdit.isDir) {
                        let url = `/edit?path=${itemToEdit.encodedPath}`;
                        if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                            url += `&targetUsername=${encodeURIComponent(VIEW_CONTEXT_USER_USERNAME)}`;
                        }
                        window.location.href = url;
                    }
                });
            }

            if (actionDownloadBtn) {
                actionDownloadBtn.addEventListener('click', () => {
                    if (actionDownloadBtn.disabled) return;
                    let itemsToDownload = [];
                    if (!multiSelectModeActive && currentSingleSelectedItem) {
                        itemsToDownload.push(currentSingleSelectedItem);
                    } else if (multiSelectModeActive) {
                        itemsToDownload = getCheckboxSelectedItems();
                    }

                    if (itemsToDownload.length === 0) {
                        alert("請選擇要下載的項目。"); return;
                    }

                    if (itemsToDownload.length === 1 && !itemsToDownload[0].isDir) {
                        let url = `/download?path=${itemsToDownload[0].encodedPath}`;
                        if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                            url += `&targetUsername=${encodeURIComponent(VIEW_CONTEXT_USER_USERNAME)}`;
                        }
                        const tempLink = document.createElement('a');
                        tempLink.href = url;
                        tempLink.setAttribute('download', itemsToDownload[0].name);
                        tempLink.style.display = 'none';
                        document.body.appendChild(tempLink);
                        tempLink.click();
                        document.body.removeChild(tempLink);
                    } else {
                        const form = document.createElement('form');
                        form.method = 'POST';
                        form.action = '/download-archive';
                        form.style.display = 'none';

                        const itemsInput = document.createElement('input');
                        itemsInput.type = 'hidden';
                        itemsInput.name = 'items';
                        const itemsForPayload = itemsToDownload.map(item => ({
                            path: item.path, name: item.name, isDir: item.isDir
                        }));
                        itemsInput.value = JSON.stringify(itemsForPayload);
                        form.appendChild(itemsInput);

                        if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                            const targetUserInput = document.createElement('input');
                            targetUserInput.type = 'hidden';
                            targetUserInput.name = 'targetUsername';
                            targetUserInput.value = VIEW_CONTEXT_USER_USERNAME;
                            form.appendChild(targetUserInput);
                        }
                        if (CSRF_TOKEN) {
                            const csrfInput = document.createElement('input');
                            csrfInput.type = 'hidden';
                            csrfInput.name = '_csrf';
                            csrfInput.value = CSRF_TOKEN;
                            form.appendChild(csrfInput);
                        }
                        document.body.appendChild(form);
                        try { form.submit(); } catch (e) { console.error("表單提交錯誤:", e); alert("觸發下載時發生錯誤。"); }
                        setTimeout(() => {
                            if (form.parentNode === document.body) { document.body.removeChild(form); }
                        }, 100);
                    }
                });
            }

            if (actionDeleteBtn) {
                actionDeleteBtn.addEventListener('click', async () => {
                    if (actionDeleteBtn.disabled) return;
                    let itemsToDelete = [];
                     if (!multiSelectModeActive && currentSingleSelectedItem) {
                        itemsToDelete.push(currentSingleSelectedItem);
                    } else if (multiSelectModeActive) {
                        itemsToDelete = getCheckboxSelectedItems();
                    }

                    if (itemsToDelete.length === 0) return;

                    const itemNames = itemsToDelete.map(item => item.rawName).join(', ');
                    if (confirm(`確定要刪除選中的 ${itemsToDelete.length} 個項目 (${itemNames}) 嗎？此操作不可恢復！`)) {
                        let allSucceeded = true;
                        let reloadPage = false;
                        let errors = [];

                        for (const item of itemsToDelete) {
                            try {
                                let deleteUrl = `/delete?path=${item.encodedPath}&isDir=${item.isDir}`;
                                if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                                    deleteUrl += `&targetUsername=${encodeURIComponent(VIEW_CONTEXT_USER_USERNAME)}`;
                                }
                                const response = await fetch(deleteUrl, {
                                    method: 'GET',
                                });

                                if (response.ok) {
                                    if (response.redirected || (response.headers.get("Content-Type") && response.headers.get("Content-Type").includes("application/json"))) {
                                        try {
                                            const result = await response.json();
                                            if (result.success) {
                                                reloadPage = true;
                                            } else {
                                                allSucceeded = false;
                                                errors.push(result.message || `刪除 ${item.name} 失敗`);
                                            }
                                        } catch (e) {
                                            reloadPage = true;
                                        }
                                    } else {
                                        reloadPage = true;
                                    }
                                } else {
                                    allSucceeded = false;
                                    let errorMsg = `刪除 ${item.name} 失敗 (狀態: ${response.status})`;
                                    try {
                                        const errResult = await response.json();
                                        if(errResult.message) errorMsg = errResult.message;
                                    } catch(e) { /* ignore if not json */ }
                                    errors.push(errorMsg);
                                }
                            } catch (error) {
                                allSucceeded = false;
                                errors.push(`刪除 ${item.name} 時發生客戶端錯誤`);
                                console.error('刪除項目時出錯:', item.name, error);
                            }
                        }

                        if (errors.length > 0) {
                            alert("部分或全部項目刪除失敗：\n" + errors.join("\n"));
                        } else if (allSucceeded) {
                            alert("選中項目已成功刪除。");
                        }

                        if (reloadPage || !allSucceeded) {
                            window.location.reload();
                        } else {
                             clearSingleSelection();
                             if(selectAllCheckbox) selectAllCheckbox.checked = false;
                             document.querySelectorAll('#file-container .item-checkbox').forEach(cb => cb.checked = false);
                             updateSelectionActions();
                        }
                    }
                });
            }

            if (actionMoveBtn) {
                actionMoveBtn.addEventListener('click', async () => {
                    if (actionMoveBtn.disabled) return;
                    let itemsToMove = [];
                     if (!multiSelectModeActive && currentSingleSelectedItem) {
                        itemsToMove.push(currentSingleSelectedItem);
                    } else if (multiSelectModeActive) {
                        itemsToMove = getCheckboxSelectedItems();
                    }
                    if (itemsToMove.length === 0) return;

                    moveDestinationInput.value = ''; selectedDestinationPathDisplay.textContent = '無';
                    confirmMoveBtn.disabled = true; directoryTreeContainer.innerHTML = '<p>正在加載目錄...</p>';
                    moveModal.style.display = 'block';
                    try {
                        let fetchUrl = '/api/directories'; let queryParams = [];
                        if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                             queryParams.push(`targetUsername=${encodeURIComponent(VIEW_CONTEXT_USER_USERNAME)}`);
                        }

                        const pathsToExclude = itemsToMove.flatMap(item => {
                            if (item.isDir) {
                                return [item.path];
                            }
                            return [];
                        });
                        if (pathsToExclude.length > 0) queryParams.push(`excludePaths=${encodeURIComponent(pathsToExclude.join(','))}`);

                        if (queryParams.length > 0) fetchUrl += `?${queryParams.join('&')}`;

                        const response = await fetch(fetchUrl);
                        if (!response.ok) throw new Error(`無法獲取目錄列表: ${response.statusText}`);
                        currentDirectoryTree = await response.json();
                        renderDirectoryTree(currentDirectoryTree, directoryTreeContainer, itemsToMove);
                    } catch (error) {
                        console.error('獲取目錄樹時出錯:', error);
                        directoryTreeContainer.innerHTML = `<p style="color:red;">加載目錄失敗: ${error.message}</p>`;
                    }
                });
            }
            function renderDirectoryTree(nodes, container, itemsBeingMoved) {
                container.innerHTML = ''; const ul = document.createElement('ul');
                const rootLi = document.createElement('li');
                rootLi.textContent = '根目錄 (/)';
                rootLi.dataset.path = '/';

                let isRootInvalid = itemsBeingMoved.some(item => item.path.substring(0, item.path.lastIndexOf('/')) === '' && item.path !== '/');

                rootLi.addEventListener('click', (e) => selectDestination(e.target, '/'));
                ul.appendChild(rootLi);

                function buildTree(dirItems, parentUl, currentParentPath) {
                    dirItems.forEach(dirNode => {
                        const isMovingThisDirOrChild = itemsBeingMoved.some(movedItem =>
                            movedItem.isDir && (dirNode.path === movedItem.path || dirNode.path.startsWith(movedItem.path + '/'))
                        );
                        
                        if (isMovingThisDirOrChild) {
                            return;
                        }
                        
                        const isTheCurrentParentOfAllItems = itemsBeingMoved.every(movedItem => {
                            const movedItemParentPath = movedItem.path.substring(0, movedItem.path.lastIndexOf('/')) || '/';
                            return movedItemParentPath === dirNode.path;
                        });

                        const li = document.createElement('li');
                        li.textContent = dirNode.name;
                        li.dataset.path = dirNode.path;
                        
                        // --- FIX START ---
                        // The original code used 'pointer-events: none', which disabled clicks on children.
                        // This new logic makes the current parent directory visually distinct and un-selectable,
                        // but allows clicks to reach its children.
                        if (isTheCurrentParentOfAllItems) {
                            li.style.opacity = "0.5";
                            li.style.cursor = "not-allowed";
                            // Do not add a click listener, making it an unselectable header.
                        } else {
                           li.addEventListener('click', (e) => { e.stopPropagation(); selectDestination(e.target, dirNode.path); });
                        }
                        // --- FIX END ---
                        
                        parentUl.appendChild(li);
                        
                        if (dirNode.children && dirNode.children.length > 0) {
                            const nestedUl = document.createElement('ul');
                            li.appendChild(nestedUl);
                            buildTree(dirNode.children, nestedUl, dirNode.path);
                        }
                    });
                }
                buildTree(nodes, ul, '/');
                container.appendChild(ul);
            }
            function selectDestination(targetElement, path) {
                document.querySelectorAll('#directory-tree-container li.selected-dir').forEach(el => el.classList.remove('selected-dir'));
                targetElement.classList.add('selected-dir');
                selectedDestinationPathDisplay.textContent = path; moveDestinationInput.value = path;
                confirmMoveBtn.disabled = false;
            }
            if (closeMoveModalBtn) closeMoveModalBtn.onclick = () => moveModal.style.display = 'none';
            if (cancelMoveBtn) cancelMoveBtn.onclick = () => moveModal.style.display = 'none';

            if (confirmMoveBtn) {
                confirmMoveBtn.addEventListener('click', async () => {
                    let selectedToMove = [];
                    if (!multiSelectModeActive && currentSingleSelectedItem) {
                        selectedToMove.push(currentSingleSelectedItem);
                    } else if (multiSelectModeActive) {
                        selectedToMove = getCheckboxSelectedItems();
                    }

                    const destinationPath = moveDestinationInput.value;
                    if (selectedToMove.length === 0 || (destinationPath === null || destinationPath === undefined) ) {
                        alert('請選擇要移動的項目和目標文件夾。'); return;
                    }

                    for (const item of selectedToMove) {
                        const itemParentPath = item.path.substring(0, item.path.lastIndexOf('/')) || '/';
                        if (itemParentPath === destinationPath) {
                            alert(`項目 "${item.name}" 已經在目標文件夾 "${destinationPath === '/' ? '根目錄' : destinationPath}" 中。`);
                            return;
                        }
                        if (item.isDir && (destinationPath === item.path || destinationPath.startsWith(item.path + '/'))) {
                            alert(`不能將文件夾 "${item.name}" 移動到其自身或其子文件夾中。`); return;
                        }
                    }
                    try {
                        const payload = {
                            sourcePaths: selectedToMove.map(item => item.path),
                            destinationPath: destinationPath,
                        };
                        if (CSRF_TOKEN) payload._csrf = CSRF_TOKEN;
                        if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                            payload.targetUsername = VIEW_CONTEXT_USER_USERNAME;
                        }

                        const response = await fetch('/move-items', {
                            method: 'POST', headers: { 'Content-Type': 'application/json', },
                            body: JSON.stringify(payload)
                        });
                        const result = await response.json();
                        if (response.ok && result.success) {
                            alert(result.message || '項目移動成功！');
                            window.location.href = result.redirectUrl || window.location.pathname + window.location.search;
                        } else {
                             alert(`移動失敗: ${result.message || '伺服器發生未知錯誤。'}`);
                        }
                    } catch (error) {
                        console.error('移動項目時出錯:', error);
                        let errorMsg = `移動項目時發生客戶端錯誤。`;
                        if (error instanceof SyntaxError) {
                            errorMsg += " 伺服器可能返回了非預期的回應格式。";
                        } else if (error.message) {
                            errorMsg += ` ${error.message}`;
                        }
                        alert(errorMsg);
                    }
                    moveModal.style.display = 'none';
                });
            }

            if (actionShareBtn) {
                actionShareBtn.addEventListener('click', () => {
                    if (actionShareBtn.disabled) return;
                    let itemToShare = null;
                    if (!multiSelectModeActive && currentSingleSelectedItem) {
                        itemToShare = currentSingleSelectedItem;
                    } else if (multiSelectModeActive) {
                        const selected = getCheckboxSelectedItems();
                        if (selected.length === 1) itemToShare = selected[0];
                    }

                    if (itemToShare && shareModal && shareItemNameDisplay && shareFilePathInput && shareIsDirectoryInput) {
                        shareItemNameDisplay.textContent = itemToShare.name;
                        shareFilePathInput.value = itemToShare.path;
                        shareIsDirectoryInput.value = itemToShare.isDir;
                        if(shareAllowDownloadCheckbox) shareAllowDownloadCheckbox.checked = true;
                        if(shareAllowViewCheckbox) shareAllowViewCheckbox.checked = true;
                        shareModal.style.display = 'block';
                    }
                });
            }
            if(closeShareModalBtn) closeShareModalBtn.onclick = () => shareModal.style.display = 'none';
            if(cancelShareBtn) cancelShareBtn.onclick = () => shareModal.style.display = 'none';

            if (confirmShareBtn) {
                confirmShareBtn.addEventListener('click', async () => {
                    const filePath = shareFilePathInput.value;
                    const isDirectory = shareIsDirectoryInput.value === 'true';
                    const allowDownload = shareAllowDownloadCheckbox ? shareAllowDownloadCheckbox.checked : true;
                    const allowView = shareAllowViewCheckbox ? shareAllowViewCheckbox.checked : true;

                    const payload = {
                        filePathToShare: filePath,
                        isDirectory: isDirectory,
                        allowDownload: allowDownload,
                        allowView: allowView,
                        _csrf: CSRF_TOKEN
                    };
                    if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                        payload.targetUsername = VIEW_CONTEXT_USER_USERNAME;
                    }

                    try {
                        const response = await fetch('/actions/create-public-link', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        });

                        if (!response.ok) {
                            let serverErrorMessage = `伺服器錯誤，狀態碼: ${response.status}`;
                            try {
                                const errorText = await response.text();
                                if (response.headers.get("content-type")?.includes("application/json")) {
                                    const jsonData = JSON.parse(errorText);
                                    serverErrorMessage = jsonData.message || errorText;
                                } else {
                                     serverErrorMessage = errorText.length > 200 ? errorText.substring(0, 200) + "..." : errorText;
                                }
                            } catch (e) { /* Failed to parse error response body */ }
                            throw new Error(serverErrorMessage);
                        }
                        const result = await response.json();

                        if (result.success) {
                            shareModal.style.display = 'none';
                            if (publicLinkModalTitle) publicLinkModalTitle.textContent = '公開連結已創建';
                            if (publicLinkModalMessage) publicLinkModalMessage.textContent = '您可以複製下面的連結進行分享:';
                            if (generatedPublicLinkInput) generatedPublicLinkInput.value = result.publicUrl;
                            if (publicLinkDisplayModal) publicLinkDisplayModal.style.display = 'block';
                            if (CURRENT_VIEW_MODE === 'userShares') window.location.reload();

                        } else {
                            alert(`創建公開連結失敗: ${result.message || '未知錯誤'}`);
                        }
                    } catch (error) {
                        console.error('創建公開連結時出錯:', error);
                        alert(`創建公開連結時發生客戶端錯誤。\n詳細信息: ${error.message}`);
                    }
                });
            }

            if (copyPublicLinkBtn && generatedPublicLinkInput) {
                copyPublicLinkBtn.addEventListener('click', () => {
                    generatedPublicLinkInput.select();
                    generatedPublicLinkInput.setSelectionRange(0, 99999);
                    try {
                        const successful = document.execCommand('copy');
                        const msg = successful ? '連結已複製到剪貼簿！' : '複製失敗。';
                        alert(msg);
                    } catch (err) {
                        alert('複製失敗，您的瀏覽器可能不支持此操作。');
                        console.error('無法複製文本: ', err);
                    }
                });
            }
            if(closePublicLinkDisplayModalBtn) closePublicLinkDisplayModalBtn.onclick = () => publicLinkDisplayModal.style.display = 'none';
            if(okPublicLinkDisplayBtn) okPublicLinkDisplayBtn.onclick = () => publicLinkDisplayModal.style.display = 'none';


            // Batch revoke for public links
            if (actionRevokeSelectedLinksBtn) {
                actionRevokeSelectedLinksBtn.addEventListener('click', async () => {
                    const selectedLinkIds = getSelectedPublicLinkIds();
                    if (selectedLinkIds.length === 0) {
                        alert('請選擇要撤銷的公開連結。');
                        return;
                    }
                    if (confirm(`確定要撤銷選中的 ${selectedLinkIds.length} 個公開連結嗎？`)) {
                        const payload = {
                            link_ids: selectedLinkIds,
                            _csrf: CSRF_TOKEN
                        };
                        if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                            payload.contextUsername = VIEW_CONTEXT_USER_USERNAME;
                        }
                        try {
                            const response = await fetch('/actions/revoke-public-links-batch', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(payload)
                            });
                            const result = await response.json();
                            alert(result.message || (result.success ? '連結已撤銷。' : '操作失敗。'));
                            if (result.success) {
                                window.location.reload();
                            }
                        } catch (error) {
                            console.error('批量撤銷連結時出錯:', error);
                            alert('批量撤銷連結時發生客戶端錯誤。');
                        }
                    }
                });
            }

            // View Existing Links Modal Logic
            if (actionViewExistingLinksBtn && existingLinksModal && closeExistingLinksModalBtn && doneExistingLinksBtn && existingLinksItemNameSpan && existingLinksListContainer) {
                actionViewExistingLinksBtn.addEventListener('click', async () => {
                    if (actionViewExistingLinksBtn.disabled) return;
                    let selectedItem = null;
                    if (!multiSelectModeActive && currentSingleSelectedItem) {
                        selectedItem = currentSingleSelectedItem;
                    } else if (multiSelectModeActive) {
                        const selected = getCheckboxSelectedItems();
                        if (selected.length === 1) selectedItem = selected[0];
                    }

                    if (selectedItem) {
                        existingLinksItemNameSpan.textContent = selectedItem.name;
                        existingLinksListContainer.innerHTML = '<p>正在加載連結...</p>';
                        existingLinksModal.style.display = 'block';

                        try {
                            let apiUrl = `/api/item-public-links?filePath=${encodeURIComponent(selectedItem.path)}`;
                            if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                                apiUrl += `&targetUsername=${encodeURIComponent(VIEW_CONTEXT_USER_USERNAME)}`;
                            }
                            const response = await fetch(apiUrl);
                            const data = await response.json();

                            if (data.success && data.links) {
                                if (data.links.length > 0) {
                                    const ul = document.createElement('ul');
                                    ul.style.listStyleType = 'none';
                                    ul.style.paddingLeft = '0';
                                    data.links.forEach(link => {
                                        const li = document.createElement('li');
                                        li.style.padding = '8px 0';
                                        li.style.borderBottom = '1px solid #eee';

                                        const linkUrl = document.createElement('a');
                                        linkUrl.href = link.publicUrl;
                                        linkUrl.textContent = link.publicUrl;
                                        linkUrl.target = '_blank';

                                        const createdAt = new Date(link.created_at).toLocaleString('zh-CN');
                                        const details = document.createElement('span');
                                        details.textContent = ` (創建於: ${createdAt}, ${link.allow_download ? '允許下載' : '禁止下載'}, ${link.allow_view ? '允許預覽' : '禁止預覽'}, 訪問: ${link.visit_count} 次)`;
                                        details.style.fontSize = '0.8em';
                                        details.style.color = '#777';

                                        const revokeBtn = document.createElement('button');
                                        revokeBtn.textContent = '撤銷此連結';
                                        revokeBtn.className = 'secondary action-button-small';
                                        revokeBtn.style.marginLeft = '10px';
                                        revokeBtn.onclick = async () => {
                                            if (confirm(`確定要撤銷連結 ${link.publicUrl} 嗎？`)) {
                                                const revokePayload = { link_id: link.link_id, _csrf: CSRF_TOKEN };
                                                 if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                                                     revokePayload.contextUsername = VIEW_CONTEXT_USER_USERNAME;
                                                 }
                                                try {
                                                    const revokeResponse = await fetch('/actions/revoke-public-link', {
                                                        method: 'POST',
                                                        headers: { 'Content-Type': 'application/json' },
                                                        body: JSON.stringify(revokePayload)
                                                    });
                                                    const contentType = revokeResponse.headers.get("content-type");
                                                    if (contentType && contentType.indexOf("application/json") !== -1) {
                                                        const revokeResult = await revokeResponse.json();
                                                        alert(revokeResult.message || (revokeResult.success ? '連結已撤銷。' : '操作失敗。'));
                                                    } else {
                                                        if(revokeResponse.ok || revokeResponse.redirected) {
                                                            alert('連結已撤銷。頁面將刷新。');
                                                        } else {
                                                            alert('撤銷連結時發生錯誤。');
                                                        }
                                                    }
                                                    existingLinksModal.style.display = 'none';
                                                    window.location.reload();
                                                } catch (e) {
                                                    console.error("撤銷連結時出錯:", e);
                                                    alert('撤銷連結時發生客戶端錯誤。');
                                                }
                                            }
                                        };

                                        li.appendChild(linkUrl);
                                        li.appendChild(details);
                                        li.appendChild(revokeBtn);
                                        ul.appendChild(li);
                                    });
                                    existingLinksListContainer.innerHTML = '';
                                    existingLinksListContainer.appendChild(ul);
                                } else {
                                    existingLinksListContainer.innerHTML = '<p>此項目沒有已分享的公開連結。</p>';
                                }
                            } else {
                                existingLinksListContainer.innerHTML = `<p style="color:red;">獲取連結列表失敗: ${data.message || '未知錯誤'}</p>`;
                            }
                        } catch (error) {
                            existingLinksListContainer.innerHTML = `<p style="color:red;">獲取連結列表時發生客戶端錯誤。</p>`;
                        }
                    }
                });
                if(closeExistingLinksModalBtn) closeExistingLinksModalBtn.onclick = () => existingLinksModal.style.display = 'none';
                if(doneExistingLinksBtn) doneExistingLinksBtn.onclick = () => existingLinksModal.style.display = 'none';
            }

            document.querySelectorAll('.view-public-link-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const publicUrl = this.dataset.url;
                    if (publicLinkDisplayModal && generatedPublicLinkInput && publicLinkModalTitle && publicLinkModalMessage) {
                        publicLinkModalTitle.textContent = '查看公開連結';
                        publicLinkModalMessage.textContent = '連結地址:';
                        generatedPublicLinkInput.value = publicUrl;
                        publicLinkDisplayModal.style.display = 'block';
                    }
                });
            });


            function showOverwriteConfirmationModal(itemName) {
                return new Promise((resolve) => {
                    if (!overwriteModal || !overwriteMessage || !overwriteConfirmBtn || !overwriteAbandonBtn || !closeOverwriteModalBtn) {
                        resolve('abandon');
                        return;
                    }
                    overwriteMessage.textContent = `一個名為 "${itemName}" 的項目已存在於當前目錄。您要覆蓋它嗎？`;
                    overwriteModal.style.display = 'block';

                    const handleConfirm = () => { cleanupAndResolve('overwrite'); };
                    const handleAbandon = () => { cleanupAndResolve('abandon'); };

                    function cleanupAndResolve(decision) {
                        overwriteModal.style.display = 'none';
                        overwriteConfirmBtn.removeEventListener('click', handleConfirm);
                        overwriteAbandonBtn.removeEventListener('click', handleAbandon);
                        closeOverwriteModalBtn.removeEventListener('click', handleAbandon);
                        resolve(decision);
                    }

                    overwriteConfirmBtn.addEventListener('click', handleConfirm, { once: true });
                    overwriteAbandonBtn.addEventListener('click', handleAbandon, { once: true });
                    closeOverwriteModalBtn.addEventListener('click', handleAbandon, { once: true });
                });
            }

            if (toggleUploadActionsBtn && uploadActionsContainer && uploadSection) {
                toggleUploadActionsBtn.addEventListener('click', () => {
                    const isActionsHidden = uploadActionsContainer.style.display === 'none' || uploadActionsContainer.style.display === '';
                    uploadActionsContainer.style.display = isActionsHidden ? 'flex' : 'none';
                    if (!isActionsHidden) {
                        uploadSection.style.display = 'none';
                        toggleUploadActionsBtn.textContent = '上傳';
                        if(userFilesInput) userFilesInput.value = null;
                        if(fileListPreview) fileListPreview.innerHTML = '';
                        if(uploadButton) uploadButton.style.display = 'none';
                        if(uploadProgressContainer) uploadProgressContainer.style.display = 'none';

                    } else {
                        toggleUploadActionsBtn.textContent = '取消上傳操作';
                    }
                });
            }

            if (uploadFilesBtn && uploadSection && userFilesInput && dropAreaText && fileListPreview && uploadButton) {
                uploadFilesBtn.addEventListener('click', () => {
                    userFilesInput.removeAttribute('webkitdirectory');
                    userFilesInput.removeAttribute('directory');
                    userFilesInput.setAttribute('multiple', '');
                    if (dropAreaText) dropAreaText.textContent = '將文件拖拽到此處進行上傳，或點擊選擇文件。';
                    uploadSection.style.display = 'block';
                    if (toggleUploadActionsBtn) toggleUploadActionsBtn.textContent = '取消上傳操作';
                    if (!uploadActionsContainer || uploadActionsContainer.style.display === 'none') {
                        if(uploadActionsContainer) uploadActionsContainer.style.display = 'flex';
                    }
                    userFilesInput.value = null;
                    fileListPreview.innerHTML = '';
                    uploadButton.style.display = 'none';
                    userFilesInput.click();
                });
            }

            if (uploadFolderBtn && uploadSection && userFilesInput && dropAreaText && fileListPreview && uploadButton) {
                uploadFolderBtn.addEventListener('click', () => {
                    userFilesInput.setAttribute('webkitdirectory', '');
                    userFilesInput.setAttribute('directory', '');
                    userFilesInput.removeAttribute('multiple');
                    if (dropAreaText) dropAreaText.textContent = '將文件夾拖拽到此處進行上傳，或點擊選擇文件夾。';
                    uploadSection.style.display = 'block';
                    if (toggleUploadActionsBtn) toggleUploadActionsBtn.textContent = '取消上傳操作';
                     if (!uploadActionsContainer || uploadActionsContainer.style.display === 'none') {
                        if(uploadActionsContainer) uploadActionsContainer.style.display = 'flex';
                    }
                    userFilesInput.value = null;
                    fileListPreview.innerHTML = '';
                    uploadButton.style.display = 'none';
                    userFilesInput.click();
                });
            }

            if (uploadForm && userFilesInput) {
                uploadForm.addEventListener('submit', async function(event) {
                    event.preventDefault();
                    if (userFilesInput.files.length === 0) {
                        alert('請選擇要上傳的文件或文件夾。');
                        return;
                    }

                    const originalFiles = Array.from(userFilesInput.files);
                    let finalFilesToUpload = [];
                    let processedTopLevelItems = new Set();

                    for (const file of originalFiles) {
                        let nameToCheck = file.name;
                        let isTopLevelItem = true;
                        if (file.webkitRelativePath) {
                            const pathParts = file.webkitRelativePath.split('/');
                            nameToCheck = pathParts[0];
                            if (pathParts.length > 1) isTopLevelItem = false;
                        }

                        if (EXISTING_ITEM_NAMES_ON_PAGE.includes(nameToCheck.toLowerCase()) && !processedTopLevelItems.has(nameToCheck.toLowerCase())) {
                            processedTopLevelItems.add(nameToCheck.toLowerCase());
                            const userDecision = await showOverwriteConfirmationModal(nameToCheck);
                            if (userDecision === 'overwrite') {
                                originalFiles.forEach(f => {
                                    if ((f.webkitRelativePath && f.webkitRelativePath.startsWith(nameToCheck + '/')) || f.name === nameToCheck) {
                                        if (!finalFilesToUpload.includes(f)) finalFilesToUpload.push(f);
                                    }
                                });
                            } else {
                                // console.log(`Skipping ${nameToCheck} and its contents due to user choice.`);
                            }
                        } else if (!EXISTING_ITEM_NAMES_ON_PAGE.includes(nameToCheck.toLowerCase())) {
                            if (!finalFilesToUpload.includes(file)) finalFilesToUpload.push(file);
                             if(isTopLevelItem) processedTopLevelItems.add(nameToCheck.toLowerCase());
                        } else if (processedTopLevelItems.has(nameToCheck.toLowerCase()) && finalFilesToUpload.some(f => (f.webkitRelativePath || f.name).startsWith(nameToCheck))) {
                            if (!finalFilesToUpload.includes(file)) finalFilesToUpload.push(file);
                        }
                    }


                    if (finalFilesToUpload.length === 0) {
                        alert('沒有文件準備上傳（可能所有衝突的文件都已被放棄）。');
                        if (uploadProgressContainer) uploadProgressContainer.style.display = 'none';
                        if (uploadButton) uploadButton.style.display = 'none';
                        if (fileListPreview) fileListPreview.innerHTML = '';
                        if (userFilesInput) userFilesInput.value = null;
                        return;
                    }

                    const formData = new FormData();
                    const currentPathInput = uploadForm.querySelector('input[name="currentPath"]');
                    if (currentPathInput) formData.append('currentPath', currentPathInput.value);

                    const targetUsernameInput = uploadForm.querySelector('input[name="targetUsername"]');
                    if (targetUsernameInput && targetUsernameInput.value) formData.append('targetUsername', targetUsernameInput.value);

                    const csrfInput = uploadForm.querySelector('input[name="_csrf"]');
                    if (csrfInput) formData.append('_csrf', csrfInput.value);

                    for (const file of finalFilesToUpload) {
                        formData.append('userFiles', file, file.webkitRelativePath || file.name);
                    }

                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', uploadForm.action, true);
                    if (uploadProgressContainer && uploadProgressBar) {
                        uploadProgressContainer.style.display = 'block';
                        uploadProgressBar.style.width = '0%';
                        uploadProgressBar.textContent = '0%';
                    }
                    xhr.upload.onprogress = function(event) {
                        if (event.lengthComputable) {
                            const percentComplete = Math.round((event.loaded / event.total) * 100);
                            if (uploadProgressBar) {
                                uploadProgressBar.style.width = percentComplete + '%';
                                uploadProgressBar.textContent = percentComplete + '%';
                            }
                        }
                    };
                    xhr.onload = function() {
                        if (uploadProgressContainer) uploadProgressContainer.style.display = 'none';
                        if (xhr.status >= 200 && xhr.status < 300) {
                            let responseData = null;
                            try { responseData = JSON.parse(xhr.responseText); } catch (e) { /* Ignore */ }

                            if (responseData && responseData.redirectUrl) {
                                window.location.href = responseData.redirectUrl;
                            } else if (xhr.responseURL && xhr.responseURL !== xhr.openUrl && xhr.responseURL.includes('/files')) {
                                window.location.href = xhr.responseURL;
                            } else {
                                alert( (responseData && responseData.message) || '上傳成功！頁面將刷新。');
                                window.location.reload();
                            }
                        } else {
                            let errorMessage = `上傳失敗。伺服器響應: ${xhr.status}`;
                            try {
                                const responseJson = JSON.parse(xhr.responseText);
                                if (responseJson && responseJson.message) {
                                    errorMessage = responseJson.message;
                                }
                            } catch (e) {
                                if(xhr.responseText && xhr.responseText.length < 500) errorMessage = xhr.responseText;
                            }
                            alert(errorMessage);
                            console.error('Upload failed:', xhr.status, xhr.responseText);
                        }
                    };
                    xhr.onerror = function(e) {
                        if (uploadProgressContainer) uploadProgressContainer.style.display = 'none';
                        alert('上傳過程中發生網絡錯誤。請檢查網絡連接和服務器狀態。');
                        console.error('Upload network error:', e);
                    };
                    xhr.openUrl = uploadForm.action;
                    xhr.send(formData);
                });
            }

            if (dropArea && userFilesInput && fileListPreview && uploadSection && dropAreaText && uploadActionsContainer && toggleUploadActionsBtn) {
                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                    dropArea.addEventListener(eventName, preventDefaults, false);
                    document.body.addEventListener(eventName, preventDefaults, false);
                });
                function preventDefaults(e) { e.preventDefault(); e.stopPropagation(); }

                dropArea.addEventListener('dragenter', () => dropArea.classList.add('highlight'), false);
                dropArea.addEventListener('dragover', () => dropArea.classList.add('highlight'), false);
                dropArea.addEventListener('dragleave', (e) => {
                    if (e.relatedTarget === null || !dropArea.contains(e.relatedTarget)) {
                        dropArea.classList.remove('highlight');
                    }
                }, false);

                dropArea.addEventListener('drop', (e) => {
                    preventDefaults(e);
                    dropArea.classList.remove('highlight');
                    const dt = e.dataTransfer;
                    const files = dt.files;

                    let isLikelyFolderDrop = false;
                    if (dt.items && dt.items.length > 0 && typeof dt.items[0].webkitGetAsEntry === 'function') {
                        const entry = dt.items[0].webkitGetAsEntry();
                        if (entry && entry.isDirectory) {
                            isLikelyFolderDrop = true;
                        }
                    } else if (files.length > 0 && files[0].webkitRelativePath) {
                        const firstFileRelativePath = files[0].webkitRelativePath;
                        if (firstFileRelativePath && firstFileRelativePath.includes('/')) {
                             isLikelyFolderDrop = true;
                        } else if (files.length > 1 && Array.from(files).every(f => f.webkitRelativePath.startsWith(firstFileRelativePath.split('/')[0]))) {
                            isLikelyFolderDrop = true;
                        }
                    }


                    if (isLikelyFolderDrop) {
                        userFilesInput.setAttribute('webkitdirectory', '');
                        userFilesInput.setAttribute('directory', '');
                        userFilesInput.removeAttribute('multiple');
                        if(dropAreaText) dropAreaText.textContent = '已拖入文件夾，準備上傳。';
                    } else {
                        userFilesInput.removeAttribute('webkitdirectory');
                        userFilesInput.removeAttribute('directory');
                        userFilesInput.setAttribute('multiple', '');
                        if(dropAreaText) dropAreaText.textContent = '已拖入文件，準備上傳。';
                    }

                    userFilesInput.files = files;
                    updateFileListPreviewOnDrop();
                    uploadSection.style.display = 'block';
                    if (uploadActionsContainer.style.display === 'none') {
                         uploadActionsContainer.style.display = 'flex';
                    }
                    if (toggleUploadActionsBtn) toggleUploadActionsBtn.textContent = '取消上傳操作';
                }, false);

                userFilesInput.addEventListener('change', updateFileListPreviewOnDrop);

                function updateFileListPreviewOnDrop() {
                    if (!fileListPreview || !userFilesInput || !uploadButton) return;
                    fileListPreview.innerHTML = '';
                    const files = userFilesInput.files;
                    if (files.length > 0) {
                        const list = document.createElement('ul');
                        list.style.listStyleType = 'none'; list.style.paddingLeft = '0';

                        let isDirectoryUpload = false;
                        if (userFilesInput.hasAttribute('webkitdirectory') || (files[0] && files[0].webkitRelativePath && files[0].webkitRelativePath.includes('/'))) {
                            isDirectoryUpload = true;
                        }


                        if (isDirectoryUpload) {
                            const folderName = files[0].webkitRelativePath.split('/')[0];
                            const listItem = document.createElement('li');
                            listItem.textContent = `文件夾: ${folderName} (${files.length} 個文件)`;
                            listItem.style.fontSize = '0.9em'; listItem.style.fontWeight = 'bold';
                            list.appendChild(listItem);
                        } else {
                            for (let i = 0; i < files.length; i++) {
                                const listItem = document.createElement('li');
                                listItem.textContent = files[i].name + (files[i].size ? ` (${(files[i].size / 1024).toFixed(1)} KB)` : '');
                                listItem.style.fontSize = '0.9em';
                                list.appendChild(listItem);
                            }
                        }
                        fileListPreview.appendChild(list);
                        uploadButton.style.display = 'inline-block';
                    } else {
                        uploadButton.style.display = 'none';
                    }
                }
                if (userFilesInput && uploadButton && userFilesInput.files.length === 0) {
                     uploadButton.style.display = 'none';
                }
            }

            const listViewBtn = document.getElementById('listViewBtn');
            const gridViewBtn = document.getElementById('gridViewBtn');
            if (fileContainer && listViewBtn && gridViewBtn) {
                function toggleView(viewType) {
                    const isCurrentlyMultiSelect = fileContainer.classList.contains('multi-select-mode-active');
                    fileContainer.classList.remove('list-view', 'grid-view');

                    if (viewType === 'grid') {
                        fileContainer.classList.add('grid-view');
                        gridViewBtn.classList.add('active');
                        listViewBtn.classList.remove('active');
                        localStorage.setItem('fileView', 'grid');
                    } else {
                        fileContainer.classList.add('list-view');
                        listViewBtn.classList.add('active');
                        gridViewBtn.classList.remove('active');
                        localStorage.setItem('fileView', 'list');
                    }
                    if (isCurrentlyMultiSelect) {
                        fileContainer.classList.add('multi-select-mode-active');
                    }
                    clearSingleSelection();
                    updateSelectionActions();
                    updatePublicLinkSelectionActions();
                }
                const preferredView = localStorage.getItem('fileView') || 'list';
                toggleView(preferredView);
                listViewBtn.addEventListener('click', () => toggleView('list'));
                gridViewBtn.addEventListener('click', () => toggleView('grid'));
            }

            const createItemModal = document.getElementById('create-item-modal');
            const closeCreateItemModalBtn = document.getElementById('close-create-item-modal-btn');
            const cancelCreateItemBtn = document.getElementById('cancel-create-item-btn');
            const createItemForm = document.getElementById('create-item-form');
            const createItemModalTitle = document.getElementById('create-item-modal-title');
            const createItemNameInput = document.getElementById('create-item-name-input');
            const createItemNameLabel = document.getElementById('create-item-name-label');
            const showCreateTextfileModalBtn = document.getElementById('show-create-textfile-modal-btn');
            const showCreateFolderModalBtn = document.getElementById('show-create-folder-modal-btn');

            function openCreateItemModal(type) {
                if (!createItemModal || !createItemForm || !createItemModalTitle || !createItemNameLabel || !createItemNameInput) return;
                createItemForm.reset();

                const currentPathForCreation = IS_SEARCH_RESULT_VIEW ? '/' : CURRENT_PATH_ON_LOAD;
                const currentPathInputInForm = createItemForm.querySelector('input[name="currentPath"]');
                if (currentPathInputInForm) currentPathInputInForm.value = currentPathForCreation;


                if (type === 'textfile') {
                    createItemModalTitle.textContent = '新建文本文件';
                    createItemNameLabel.textContent = '文件名 (例如: mydoc.txt):';
                    createItemNameInput.name = 'newFileName';
                    createItemNameInput.placeholder = '例如: notes.txt, script.js';
                    createItemForm.action = '/create-text-file';
                } else if (type === 'folder') {
                    createItemModalTitle.textContent = '创建新文件夹';
                    createItemNameLabel.textContent = '文件夹名称:';
                    createItemNameInput.name = 'folderName';
                    createItemNameInput.placeholder = '例如: 我的文档';
                    createItemForm.action = '/create-folder';
                }

                const targetUsernameHiddenInput = createItemForm.querySelector('input[name="targetUsername"]');
                if (targetUsernameHiddenInput) {
                    if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                        targetUsernameHiddenInput.value = VIEW_CONTEXT_USER_USERNAME;
                    } else {
                        targetUsernameHiddenInput.value = '';
                    }
                }
                createItemModal.style.display = 'block';
                createItemNameInput.focus();
            }

            if (showCreateTextfileModalBtn) showCreateTextfileModalBtn.addEventListener('click', () => openCreateItemModal('textfile'));
            if (showCreateFolderModalBtn) showCreateFolderModalBtn.addEventListener('click', () => openCreateItemModal('folder'));
            if (closeCreateItemModalBtn) closeCreateItemModalBtn.onclick = () => createItemModal.style.display = 'none';
            if (cancelCreateItemBtn) cancelCreateItemBtn.onclick = () => createItemModal.style.display = 'none';

            function openVideoPlayer(encodedPath, videoName, videoType) {
                if (!videoPlayerModal || !html5VideoPlayer || !videoSourceElement || !videoModalTitle) return;

                let videoSrc = `/stream/${encodedPath}`;
                const queryParams = new URLSearchParams();

                if (VIEW_CONTEXT_USER_USERNAME && CURRENT_SESSION_USER_ROLE === 'admin' && VIEW_CONTEXT_USER_USERNAME !== CURRENT_SESSION_USER_USERNAME) {
                    queryParams.set('targetUsername', VIEW_CONTEXT_USER_USERNAME);
                }

                if (Array.from(queryParams).length > 0) {
                    videoSrc += `?${queryParams.toString()}`;
                }


                videoModalTitle.textContent = videoName || '播放視頻';
                videoSourceElement.setAttribute('src', videoSrc);
                if (videoType) {
                    videoSourceElement.setAttribute('type', videoType);
                } else {
                    videoSourceElement.removeAttribute('type');
                }
                html5VideoPlayer.load();
                videoPlayerModal.style.display = 'block';
            }

            if (closeVideoModalBtn) {
                closeVideoModalBtn.onclick = () => {
                    if (videoPlayerModal) videoPlayerModal.style.display = 'none';
                    if (html5VideoPlayer) {
                        html5VideoPlayer.pause();
                        videoSourceElement.setAttribute('src', '');
                    }
                };
            }


            window.addEventListener('click', (event) => {
                if (event.target == createItemModal) createItemModal.style.display = 'none';
                if (event.target == renameItemModal) renameItemModal.style.display = 'none';
                if (event.target == moveModal) moveModal.style.display = 'none';
                if (event.target == overwriteModal) {
                    const abandonButton = overwriteModal.querySelector('#overwrite-abandon-btn');
                    if (abandonButton) abandonButton.click();
                }
                if (event.target == videoPlayerModal) {
                     if (videoPlayerModal) videoPlayerModal.style.display = 'none';
                    if (html5VideoPlayer) {
                        html5VideoPlayer.pause();
                        videoSourceElement.setAttribute('src', '');
                    }
                }
                if (event.target == shareModal) shareModal.style.display = 'none';
                if (event.target == publicLinkDisplayModal) publicLinkDisplayModal.style.display = 'none';
                if (event.target == existingLinksModal) existingLinksModal.style.display = 'none';
            });

            updateMultiSelectModeUI();
            updateSelectionActions();
            updatePublicLinkSelectionActions();

        });
    </script>
</body>
</html>
