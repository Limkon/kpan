<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= locals.viewTargetUsername ? viewTargetUsername + ' 的文件' : user.username + ' 的文件' %> - 網路硬碟</title>
    <link rel="stylesheet" href="/style.css">
    <link id="theme-stylesheet" rel="stylesheet" href="">
    <style>
        #upload-section {
            display: none;
            padding: 20px;
            border: 1px solid #dee2e6; /* Will be themed */
            border-radius: 6px;
            margin-top: 15px;
            background-color: #f8f9fa; /* Will be themed */
        }
        .global-actions-bar {
            padding: 10px 0;
            margin-bottom: 15px;
            border-bottom: 1px solid #eee; /* Will be themed */
            display: flex;
            gap: 10px;
            align-items: center;
            flex-wrap: wrap; /* Allow actions to wrap on small screens */
        }
        .global-actions-bar button, .global-actions-bar .button-link {
            margin-bottom: 5px; /* Spacing for wrapped buttons */
        }
        .file-item-checkbox {
            margin-right: 10px;
            vertical-align: middle;
        }
        /* Hide individual actions that are now global */
        .list-view .file-actions .action-link:not(.rename-link), /* Keep rename for inline editing trigger */
        .grid-view .file-actions .action-link:not(.rename-link) {
            /* display: none; We will remove them from HTML instead */
        }
        .list-view li .file-actions, .grid-view li .file-actions {
            /* Adjust if needed after removing most links */
        }
        #move-destination-popup {
            display: none;
            position: fixed;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            background-color: var(--container-background, #fff);
            padding: 20px;
            border: 1px solid var(--border-color, #ccc);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
            z-index: 1001;
            border-radius: 8px;
        }
        #move-destination-popup label { margin-bottom: 8px; }
        #move-destination-popup input[type="text"] { width: calc(100% - 24px); margin-bottom: 10px;}
        #move-destination-popup button { margin-right: 10px;}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>
                <% if (locals.viewTargetUsername && user.role === 'admin') { %>
                    管理員視角: <%= viewTargetUsername %> 的文件
                <% } else { %>
                    <%= user.username %> 的文件
                <% } %>
            </h1>
            <nav>
                <% if (user.role === 'admin') { %>
                    <a href="/admin">管理面板</a>
                <% } %>
                <a href="/change-password">修改密碼</a>
                <a href="/logout">登出</a>
            </nav>
        </header>

        <% if (locals.message) { %>
            <p class="message <%= (locals.messageType === 'error') ? 'error-message' : '' %>"><%= message %></p>
        <% } %>

        <div class="current-path">
            當前路徑:
            <a href="/files<%= locals.viewTargetUsername && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewTargetUsername) : '' %>">根目錄</a>
            <%
                let pathSegments = currentPath.split('/').filter(Boolean);
                let cumulativePathForLink = '';
                const adminTargetQuery = locals.viewTargetUsername && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewTargetUsername) : '';
            %>
            <% pathSegments.forEach(segment => { %>
                <% cumulativePathForLink += '/' + segment; %>
                / <a href="/files?path=<%= encodeURIComponent(cumulativePathForLink) %><%= adminTargetQuery %>"><%= segment %></a>
            <% }); %>
        </div>

        <div class="file-browser-controls">
            <form action="/create-folder" method="POST" class="control-form">
                <input type="hidden" name="currentPath" value="<%= currentPath %>">
                <% if (locals.viewTargetUsername && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>">
                <% } %>
                <input type="text" name="folderName" placeholder="新文件夾名稱" required>
                <button type="submit">創建文件夾</button>
            </form>
            <button type="button" id="toggleUploadBtnGlobal" class="upload-button-main">上傳文件</button> <div class="view-toggle">
                <button id="listViewBtn" onclick="toggleView('list')">列表</button>
                <button id="gridViewBtn" onclick="toggleView('grid')">網格</button>
            </div>
        </div>

        <div class="global-actions-bar">
            <label for="selectAllCheckbox" style="margin-right: 15px; font-weight:normal;">
                <input type="checkbox" id="selectAllCheckbox" onchange="toggleSelectAll(this.checked)"> 全選
            </label>
            <button id="globalRenameBtn" disabled onclick="handleGlobalRename()">重命名</button>
            <button id="globalDownloadBtn" disabled onclick="handleGlobalDownload()">下載選中</button>
            <button id="globalDeleteBtn" disabled onclick="handleGlobalDelete()">刪除選中</button>
            <button id="globalMoveBtn" disabled onclick="showMovePopup()">移動選中到...</button>
        </div>


        <div id="upload-section">
            <h2>上傳到 "<%= currentPath === '/' ? '根目錄' : currentPath.split('/').pop() %>"</h2>
            <div id="drop-area">
                <form id="upload-form" action="/upload" method="POST" enctype="multipart/form-data">
                    <input type="hidden" name="currentPath" value="<%= currentPath %>">
                    <% if (locals.viewTargetUsername && user.role === 'admin') { %>
                        <input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>">
                    <% } %>
                    <input type="file" id="userFiles" name="userFiles" multiple style="display: none;">
                    <p>將文件拖拽到此處，或 <label for="userFiles">點擊選擇文件</label></p>
                    <button type="submit" id="upload-button">上傳已選文件</button>
                </form>
                <div id="file-list-preview" style="margin-top:10px; text-align:left;"></div>
            </div>
        </div>

        <h2>文件列表</h2>
        <div id="file-container">
            <% if (items.length > 0) { %>
                <ul>
                    <% items.forEach(item => { %>
                        <li>
                            <input type="checkbox" class="file-item-checkbox" value="<%= item.path %>" data-name="<%= item.name %>" data-isdir="<%= item.isDir %>" data-encodedname="<%= item.encodedName %>" onchange="updateGlobalActionButtons()">
                            <% const itemDisplayName = item.name; %>
                            <% const itemPathForLink = item.path; %>
                            <% const encodedItemPathForLink = item.encodedPath; %>
                            <% const adminTargetQueryForActions = locals.viewTargetUsername && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewTargetUsername) : ''; %>

                            <% if (item.isDir) { %>
                                <div class="file-entry">
                                    <span class="file-icon-large folder-icon">📁</span>
                                    <a href="/files?path=<%= encodedItemPathForLink %><%= adminTargetQueryForActions %>" class="file-name"><%= itemDisplayName %></a>
                                </div>
                            <% } else { %>
                                <div class="file-entry">
                                     <%
                                        const ext = itemDisplayName.includes('.') ? itemDisplayName.substring(itemDisplayName.lastIndexOf('.') + 1).toLowerCase() : '';
                                        let largeIcon = '📄';
                                        if (['txt', 'md', 'json', 'js', 'css', 'html', 'xml', 'log', 'csv', 'py', 'java', 'c', 'cpp', 'go', 'rb'].includes(ext)) { largeIcon = '📝';}
                                        else if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'].includes(ext)) { largeIcon = '🖼️'; }
                                        // ... other icons ...
                                        else if (['mp4', 'mov', 'avi', 'mkv', 'webm'].includes(ext)) { largeIcon = '🎬';}
                                    %>
                                    <span class="file-icon-large"><%= largeIcon %></span>
                                    <span class="file-name"><%= itemDisplayName %></span>
                                </div>
                            <% } %>
                            <span class="file-actions" style="display:none;"> <a href="#" class="action-link rename-link" onclick="showRenameForm('<%= item.encodedName %>', '<%= itemDisplayName.replace(/'/g, '\\\'') %>', <%= item.isDir %>); return false;">重命名(隱藏)</a>
                            </span>
                            <div class="rename-form" id="rename-form-<%= item.encodedName %>">
                                <form action="/rename" method="POST" class="control-form inline-form">
                                    <input type="hidden" name="currentPath" value="<%= currentPath %>">
                                    <input type="hidden" name="oldPath" value="<%= itemPathForLink %>">
                                    <input type="hidden" name="isDir" value="<%= item.isDir %>">
                                    <% if (locals.viewTargetUsername && user.role === 'admin') { %>
                                        <input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>">
                                    <% } %>
                                    <input type="text" name="newName" placeholder="新名稱" value="<%= itemDisplayName %>" required>
                                    <button type="submit">確認</button>
                                    <button type="button" class="secondary" onclick="hideRenameForm('<%= item.encodedName %>'); return false;">取消</button>
                                </form>
                            </div>
                        </li>
                    <% }) %>
                </ul>
            <% } else { %>
                <p>此文件夾為空。</p>
            <% } %>
        </div>
    </div>

    <div id="move-destination-popup">
        <h3>移動選中項目到:</h3>
        <form id="move-form" onsubmit="handleActualMove(event)">
            <label for="destinationPath">目標路徑 (相對於用戶根目錄, 例如 /我的文件夾/子文件夾):</label>
            <input type="text" id="destinationPath" name="destinationPath" value="/" required>
            <div style="margin-top: 15px;">
                <button type="submit">確認移動</button>
                <button type="button" class="secondary" onclick="hideMovePopup()">取消</button>
            </div>
        </form>
    </div>


    <%- include('partials/theme-switcher') %>
    <script src="/theme.js"></script>
    <script>
        // Toggle Upload Section
        const toggleUploadBtn = document.getElementById('toggleUploadBtnGlobal'); // Updated ID
        const uploadSection = document.getElementById('upload-section');
        if (toggleUploadBtn && uploadSection) {
            toggleUploadBtn.addEventListener('click', () => {
                if (uploadSection.style.display === 'none' || uploadSection.style.display === '') {
                    uploadSection.style.display = 'block';
                    toggleUploadBtn.textContent = '隱藏上傳區域';
                } else {
                    uploadSection.style.display = 'none';
                    toggleUploadBtn.textContent = '上傳文件';
                }
            });
        }

        // Drag and Drop (same as before, ensure IDs match if changed)
        const dropArea = document.getElementById('drop-area');
        const fileInput = document.getElementById('userFiles');
        const fileListPreview = document.getElementById('file-list-preview');
        const uploadButton = document.getElementById('upload-button'); // Inside upload section

        if (dropArea && fileInput && fileListPreview && uploadButton) {
            // ... (drag and drop JS from previous version) ...
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropArea.addEventListener(eventName, preventDefaults, false);
                document.body.addEventListener(eventName, preventDefaults, false);
            });
            function preventDefaults(e) { e.preventDefault(); e.stopPropagation(); }
            ['dragenter', 'dragover'].forEach(eventName => dropArea.addEventListener(eventName, () => dropArea.classList.add('highlight'), false));
            ['dragleave', 'drop'].forEach(eventName => dropArea.addEventListener(eventName, () => dropArea.classList.remove('highlight'), false));
            dropArea.addEventListener('drop', handleDrop, false);
            function handleDrop(e) {
                fileInput.files = e.dataTransfer.files;
                updateFileListPreview();
            }
            fileInput.addEventListener('change', updateFileListPreview);
            function updateFileListPreview() {
                fileListPreview.innerHTML = '';
                if (fileInput.files.length > 0) {
                    const list = document.createElement('ul');
                    list.style.listStyleType = 'none'; list.style.paddingLeft = '0';
                    for (let i = 0; i < fileInput.files.length; i++) {
                        const listItem = document.createElement('li');
                        listItem.textContent = fileInput.files[i].name;
                        listItem.style.fontSize = '0.9em'; listItem.style.color = '#333';
                        list.appendChild(listItem);
                    }
                    fileListPreview.appendChild(list);
                    uploadButton.style.display = 'inline-block';
                } else {
                    uploadButton.style.display = 'none';
                }
            }
            if(fileInput.files.length === 0) uploadButton.style.display = 'none';
        }


        // View Toggle (same as before)
        const fileContainer = document.getElementById('file-container');
        const listViewBtn = document.getElementById('listViewBtn');
        const gridViewBtn = document.getElementById('gridViewBtn');
        if (fileContainer && listViewBtn && gridViewBtn) {
            function toggleView(viewType) {
                if (viewType === 'grid') {
                    fileContainer.className = 'grid-view';
                    gridViewBtn.classList.add('active');
                    listViewBtn.classList.remove('active');
                    localStorage.setItem('fileView', 'grid');
                } else {
                    fileContainer.className = 'list-view';
                    listViewBtn.classList.add('active');
                    gridViewBtn.classList.remove('active');
                    localStorage.setItem('fileView', 'list');
                }
            }
            const preferredView = localStorage.getItem('fileView');
            toggleView(preferredView || 'list');
        }

        // Rename Form (for single item, triggered by global button)
        function showRenameForm(encodedName, currentName, isDir) {
            document.querySelectorAll('.rename-form').forEach(form => form.style.display = 'none');
            const form = document.getElementById('rename-form-' + encodedName);
            if (form) {
                form.style.display = 'block';
                form.querySelector('input[name="newName"]').focus();
                form.querySelector('input[name="newName"]').select();
            }
        }
        function hideRenameForm(encodedName) {
            const form = document.getElementById('rename-form-' + encodedName);
            if (form) form.style.display = 'none';
        }

        // Global Actions Logic
        const globalRenameBtn = document.getElementById('globalRenameBtn');
        const globalDownloadBtn = document.getElementById('globalDownloadBtn');
        const globalDeleteBtn = document.getElementById('globalDeleteBtn');
        const globalMoveBtn = document.getElementById('globalMoveBtn');
        const selectAllCheckbox = document.getElementById('selectAllCheckbox');
        const itemCheckboxes = document.querySelectorAll('.file-item-checkbox');

        function getSelectedItems() {
            const selected = [];
            itemCheckboxes.forEach(checkbox => {
                if (checkbox.checked) {
                    selected.push({
                        path: checkbox.value,
                        name: checkbox.dataset.name,
                        isDir: checkbox.dataset.isdir === 'true',
                        encodedName: checkbox.dataset.encodedname
                    });
                }
            });
            return selected;
        }

        function updateGlobalActionButtons() {
            const selectedItems = getSelectedItems();
            const count = selectedItems.length;

            globalDownloadBtn.disabled = count === 0;
            globalDeleteBtn.disabled = count === 0;
            globalMoveBtn.disabled = count === 0;
            globalRenameBtn.disabled = count !== 1; // Enable rename only if exactly one item is selected

            if (selectAllCheckbox) {
                 selectAllCheckbox.checked = count > 0 && count === itemCheckboxes.length;
            }
        }

        function toggleSelectAll(checked) {
            itemCheckboxes.forEach(checkbox => checkbox.checked = checked);
            updateGlobalActionButtons();
        }

        function handleGlobalRename() {
            const selectedItems = getSelectedItems();
            if (selectedItems.length === 1) {
                const item = selectedItems[0];
                // Trigger the existing inline rename form for this item
                showRenameForm(item.encodedName, item.name, item.isDir);
            }
        }

        function handleGlobalDownload() {
            const selectedItems = getSelectedItems();
            if (selectedItems.length === 0) return;
            const paths = selectedItems.map(item => item.path);
            const adminTarget = "<%= locals.viewTargetUsername && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewTargetUsername) : '' %>";
            // For now, just log. Backend /batch-download needed.
            console.log('Download selected:', paths);
            // Example: window.location.href = `/batch-download?paths=${paths.map(p => encodeURIComponent(p)).join(',')}${adminTarget}`;
            alert(`下載功能待實現。選中 ${paths.length} 個項目。`);
        }

        function handleGlobalDelete() {
            const selectedItems = getSelectedItems();
            if (selectedItems.length === 0) return;
            if (!confirm(`確定要刪除選中的 ${selectedItems.length} 個項目嗎？`)) return;

            const itemsToDelete = selectedItems.map(item => ({ path: item.path, isDir: item.isDir }));
            const adminTarget = "<%= locals.viewTargetUsername && user.role === 'admin' ? JSON.stringify(viewTargetUsername) : null %>";

            // For now, just log. Backend /batch-delete needed.
            console.log('Delete selected:', itemsToDelete, 'Admin target:', adminTarget);
            // fetch('/batch-delete', {
            //     method: 'POST',
            //     headers: { 'Content-Type': 'application/json' },
            //     body: JSON.stringify({ items: itemsToDelete, targetUsername: JSON.parse(adminTarget) })
            // }).then(response => response.json())
            //   .then(data => {
            //       alert(data.message);
            //       if (data.success) window.location.reload();
            //   });
            alert(`批量刪除功能待實現。選中 ${itemsToDelete.length} 個項目。`);
        }

        const movePopup = document.getElementById('move-destination-popup');
        const destinationPathInput = document.getElementById('destinationPath');
        let itemsToMoveGlobally = [];

        function showMovePopup() {
            itemsToMoveGlobally = getSelectedItems();
            if (itemsToMoveGlobally.length === 0) return;
            destinationPathInput.value = '/'; // Reset to root
            movePopup.style.display = 'block';
        }

        function hideMovePopup() {
            movePopup.style.display = 'none';
        }

        function handleActualMove(event) {
            event.preventDefault();
            const destination = destinationPathInput.value;
            if (!destination.startsWith('/')) {
                alert('目標路徑必須以 / 開頭 (相對於用戶根目錄)。');
                return;
            }
            console.log('Move selected:', itemsToMoveGlobally, 'to:', destination);
            // Backend /move-items needed
            // fetch('/move-items', {
            //     method: 'POST',
            //     headers: { 'Content-Type': 'application/json' },
            //     body: JSON.stringify({
            //         items: itemsToMoveGlobally.map(item => ({ path: item.path, isDir: item.isDir })),
            //         destinationPath: destination,
            //         targetUsername: JSON.parse("<%= locals.viewTargetUsername && user.role === 'admin' ? JSON.stringify(viewTargetUsername) : null %>")
            //     })
            // }).then(res => res.json()).then(data => { alert(data.message); if(data.success) window.location.reload();});
            alert(`移動功能待實現。將 ${itemsToMoveGlobally.length} 個項目移動到 ${destination}`);
            hideMovePopup();
        }

        // Initial call to set button states
        updateGlobalActionButtons();
    </script>
</body>
</html>
