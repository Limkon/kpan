<%# views/files.ejs %>
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= locals.pageTitle || ( (locals.viewTargetUsername ? viewTargetUsername : user.username) + ' 的文件') %> - 網路硬碟</title>
    <link rel="stylesheet" href="/style.css">
    <link id="theme-stylesheet" rel="stylesheet" href="">
    <style>
        /* ... (保留之前的樣式) ... */
        #selection-action-bar { padding: 10px; background-color: #f0f0f0; border-bottom: 1px solid #ccc; margin-bottom: 15px; display: none; flex-wrap: wrap; gap: 10px; align-items: center; }
        /* #selection-action-bar button { margin: 0; } */ /* Margin handled by .btn or flex gap */
        .item-checkbox { margin-right: 10px; width: 18px; height: 18px; vertical-align: middle; }
        .file-entry-selectable { display: flex; align-items: center; width: 100%; }
        .file-content-wrapper { flex-grow: 1; display: flex; justify-content: space-between; align-items: center; }
        .list-view li { position: relative; }
        .list-view .file-content-wrapper > .file-entry { flex-grow: 1; }
        .list-view .file-actions-placeholder { min-width: 150px; text-align: right; font-size: 0.9em; color: #666; }
        
        #move-modal, #create-item-modal { 
            display: none; position: fixed; z-index: 1001; left: 0; top: 0; width: 100%; height: 100%;
            overflow: auto; background-color: rgba(0,0,0,0.5); 
        }
        .modal-content { 
            background-color: var(--modal-bg, #ffffff) !important; 
            color: var(--modal-text-color, #333);
            margin: 10% auto; 
            padding: 20px; 
            border: 1px solid var(--modal-border-color, #888);
            border-radius: 8px; 
            width: 90%; 
            max-width: 500px; 
            box-shadow: 0 5px 15px rgba(0,0,0,0.3); 
        }
        .dark-theme .modal-content {
            --modal-bg: #2c2c2c; 
            --modal-text-color: #e0e0e0; 
            --modal-border-color: #555;
            background-color: var(--modal-bg) !important;
        }
        .modal-content h3 { margin-top: 0; }
        .modal-content .form-group { margin-bottom: 15px; }
        .modal-content .form-group label { display: block; margin-bottom: 5px; font-weight: 500; }
        .modal-content .form-group input[type="text"] {
            width: 100%; padding: 10px; box-sizing: border-box;
            border: 1px solid var(--input-border-color, #ccc); border-radius: 4px;
            background-color: var(--input-bg-color, #fff); color: var(--input-text-color, #333);
        }
        .modal-actions { text-align: right; margin-top: 20px; display: flex; gap: 10px; justify-content: flex-end; }

        #directory-tree-container { 
            max-height: 250px; 
            overflow-y: auto; 
            border: 1px solid var(--input-border-color, #eee); 
            padding: 10px; 
            margin-bottom: 15px; 
            background-color: var(--input-bg-color, #fff); 
        }
        .dark-theme #directory-tree-container {
            border-color: #444;
            background-color: #3a3a3a;
        }
        #directory-tree-container ul { list-style-type: none; padding-left: 20px; }
        #directory-tree-container li { padding: 5px 0; cursor: pointer; border-bottom: 1px dashed var(--input-border-color, #eee); }
        #directory-tree-container li:last-child { border-bottom: none; }
        #directory-tree-container li:hover { background-color: var(--hover-bg, #f0f0f0); } 
        .dark-theme #directory-tree-container li:hover { --hover-bg: #4a4a4a; }
        #directory-tree-container li.selected-dir { background-color: #007bff; color: white; } 
        .dark-theme #directory-tree-container li.selected-dir { background-color: #0056b3; }

        .close-modal-btn { float: right; font-size: 1.5em; font-weight: bold; cursor: pointer; line-height: 1; padding: 0 5px;}

        .file-entry { display: flex; align-items: center; gap: 8px; }
        .list-view .file-entry .file-name { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
        .grid-view .file-entry { flex-direction: column; justify-content: center; text-align: center; }
        #select-all-container { display: flex; align-items: center; padding: 5px 10px; background-color: #f9f9f9; border-bottom: 1px solid #eee; }
        #select-all-container label { margin-left: 5px; font-weight: normal;}
        .rename-form { display: none; position: absolute; left: 25px; right: 5px; top: calc(100% + 2px); background-color: var(--rename-form-bg, #ffffff); padding: 12px; border: 1px solid var(--rename-form-border-color, #cccccc); box-shadow: 0 5px 15px rgba(0,0,0,0.2); z-index: 100; border-radius: 6px; max-width: 400px; box-sizing: border-box; }
        .grid-view li .rename-form { left: 50%; transform: translateX(-50%) translateY(5px); width: calc(100% - 10px); max-width: 300px; }
        .rename-form form.inline-form { display: flex; gap: 8px; }
        .rename-form input[type="text"] { flex-grow: 1; }
        .dark-theme .rename-form { --rename-form-bg: #3a3a3a; --rename-form-border-color: #555; }
        
        /* Upload Section Styles */
        #upload-actions-container {
            display: none; /* Initially hidden */
            padding: 10px 0;
            gap: 10px;
            flex-wrap: wrap;
            align-items: center; 
            margin-bottom: 15px; 
        }
        /* #upload-actions-container button { margin: 0; } */ /* Margin handled by .btn or flex gap */
        #upload-section { 
            display: none; 
            padding: 20px; 
            border: 1px solid #dee2e6; 
            border-radius: 6px; 
            margin-top: 0; 
            background-color: #f8f9fa; 
        }
        .dark-theme #upload-section {
            background-color: #3a3a3a;
            border-color: #444;
        }
        #drop-area {
            border: 2px dashed #007bff;
            padding: 20px;
            text-align: center;
            border-radius: 5px;
            background-color: #fff;
        }
        .dark-theme #drop-area {
            border-color: #0056b3;
            background-color: #2c2c2c;
        }
        #drop-area.highlight {
            border-color: #28a745; 
            background-color: #e9f7ef;
        }
        .dark-theme #drop-area.highlight {
            background-color: #333;
        }
        #drop-area p {
            margin-bottom: 15px;
            font-size: 1.1em;
            color: #6c757d;
        }
        .dark-theme #drop-area p {
            color: #adb5bd;
        }
        #upload-button { 
            display: none; 
            margin-top: 15px;
        }

        .search-results-info { padding: 10px; background-color: #e9ecef; border-radius: 5px; margin-bottom: 15px; font-size: 0.9em; }
        .file-location-in-search { font-size: 0.8em; color: #6c757d; margin-left: 8px; }

        .file-browser-controls {
            display: flex;
            flex-wrap: wrap; 
            align-items: center;
            gap: 10px; 
            margin-bottom: 20px;
        }
        .file-browser-controls .actions-group-left { 
            display: flex;
            gap: 10px;
            align-items: center;
            flex-shrink: 0; 
        }
        /* .file-browser-controls .actions-group-left button { padding: 8px 12px; font-size: 0.9em; margin: 0; } */ /* Covered by .btn */
        .file-browser-controls .search-form-right { 
            display: flex;
            align-items: center; /* Important for aligning input and button */
            gap: 5px;
            margin-left: auto; 
            flex-shrink: 0; 
        }
        .file-browser-controls .search-form-right input[type="search"] {
            width: 180px; 
            padding: 8px 10px; /* Keep specific padding for input */
            font-size: 0.9em; 
            border: 1px solid #ccc; 
            border-radius: 4px; 
            /* margin: 0; Removed, gap handles spacing */
        }
        /* .file-browser-controls .search-form-right button { padding: 8px 12px; font-size: 0.9em; margin: 0; } */ /* Covered by .btn */
        .file-browser-controls .view-toggle { 
            display: flex;
            gap: 8px;
            align-items: center;
            flex-shrink: 0; 
        }
         /* .file-browser-controls .view-toggle button { padding: 8px 12px; font-size: 0.9em; margin: 0; } */ /* Covered by .btn */
        .file-browser-controls:not(:has(.actions-group-left)) .search-form-right {
            margin-left: 0;
            flex-grow: 1; 
        }
        .file-browser-controls:not(:has(.actions-group-left)) .search-form-right input[type="search"] {
            flex-grow: 1; 
        }
        .file-browser-controls:not(:has(.actions-group-left)) .view-toggle {
            margin-left: auto; 
        }
        .progress-bar-container {
            width: 100%;
            background-color: #e9ecef; 
            border-radius: 4px;
            margin-top: 10px;
            padding: 2px; 
            display: none; 
            box-sizing: border-box;
        }
        .progress-bar {
            display: block; 
            width: 0%; 
            height: 20px;
            background-color: #007bff; 
            border: 1px solid #0056b3; 
            border-radius: 2px; 
            text-align: center;
            line-height: 18px; 
            color: white; 
            font-size: 0.8em;
            font-weight: bold;
            transition: width 0.1s ease-in-out; 
            box-sizing: border-box;
            overflow: hidden; 
        }
        .dark-theme .progress-bar-container {
            background-color: #495057;
            padding: 2px;
        }
        .dark-theme .progress-bar {
            background-color: #0056b3;
            border: 1px solid #003d80;
            color: #f8f9fa;
        }

        /* General Button Styles */
        .btn {
            display: inline-block;
            font-weight: 400;
            color: #212529; /* Default text color for light theme */
            text-align: center;
            vertical-align: middle;
            cursor: pointer;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            background-color: #f8f9fa; /* Default light background */
            border: 1px solid #ced4da;  /* Default light border */
            padding: 8px 15px;          /* Standardized padding */
            font-size: 0.9em;           /* Standardized font size */
            line-height: 1.5;           /* For better vertical alignment of text */
            border-radius: 4px;         /* Standardized border radius */
            transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;
            text-decoration: none;      /* For <a> tags styled as buttons */
            margin: 0; /* Reset margin, rely on gap or specific container margins */
        }

        .btn:hover {
            color: #212529;
            background-color: #e2e6ea; /* Slightly darker on hover */
            border-color: #dae0e5;
            text-decoration: none;
        }

        .btn:focus, .btn.focus {
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(211, 212, 213, .5); /* Light focus ring for default */
        }

        .btn:disabled, .btn.disabled {
            opacity: .65;
            cursor: not-allowed;
        }

        /* Primary Button */
        .btn-primary {
            color: #fff;
            background-color: #007bff;
            border-color: #007bff;
        }
        .btn-primary:hover {
            color: #fff;
            background-color: #0069d9;
            border-color: #0062cc;
        }
        .btn-primary:focus, .btn-primary.focus {
            box-shadow: 0 0 0 0.2rem rgba(38, 143, 255, .5);
        }

        /* Secondary Button */
        .btn-secondary {
            color: #fff;
            background-color: #6c757d;
            border-color: #6c757d;
        }
        .btn-secondary:hover {
            color: #fff;
            background-color: #5a6268;
            border-color: #545b62;
        }
        .btn-secondary:focus, .btn-secondary.focus {
            box-shadow: 0 0 0 0.2rem rgba(130, 138, 145, .5);
        }

        /* Danger Button */
        .btn-danger {
            color: #fff;
            background-color: #dc3545;
            border-color: #dc3545;
        }
        .btn-danger:hover {
            color: #fff;
            background-color: #c82333;
            border-color: #bd2130;
        }
        .btn-danger:focus, .btn-danger.focus {
            box-shadow: 0 0 0 0.2rem rgba(225, 83, 97, .5);
        }

        /* Dark Theme Button Adjustments */
        .dark-theme .btn {
            color: #f8f9fa;             /* Light text for dark theme */
            background-color: #495057;   /* Darker gray background */
            border-color: #6c757d;     /* Medium gray border */
        }
        .dark-theme .btn:hover {
            color: #f8f9fa;
            background-color: #5a6268;   /* Slightly lighter gray on hover */
            border-color: #868e96;
        }
        .dark-theme .btn:focus, .dark-theme .btn.focus {
            box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, .5); /* Darker focus ring */
        }

        /* For primary, secondary, danger buttons, the light theme colors often have good contrast on dark backgrounds.
           If specific dark theme colors are needed for these, uncomment and adjust: */
        /*
        .dark-theme .btn-primary { color: #fff; background-color: #007bff; border-color: #007bff; }
        .dark-theme .btn-primary:hover { background-color: #0069d9; border-color: #0062cc; }
        .dark-theme .btn-primary:focus, .dark-theme .btn-primary.focus { box-shadow: 0 0 0 0.2rem rgba(38,143,255,.5); }

        .dark-theme .btn-secondary { color: #fff; background-color: #6c757d; border-color: #6c757d; }
        .dark-theme .btn-secondary:hover { background-color: #5a6268; border-color: #545b62; }
        .dark-theme .btn-secondary:focus, .dark-theme .btn-secondary.focus { box-shadow: 0 0 0 0.2rem rgba(130,138,145,.5); }

        .dark-theme .btn-danger { color: #fff; background-color: #dc3545; border-color: #dc3545; }
        .dark-theme .btn-danger:hover { background-color: #c82333; border-color: #bd2130; }
        .dark-theme .btn-danger:focus, .dark-theme .btn-danger.focus { box-shadow: 0 0 0 0.2rem rgba(225,83,97,.5); }
        */
        
        /* Specific for view toggle active state */
        .view-toggle button.active {
            color: #fff;
            background-color: #007bff; /* Primary color */
            border-color: #007bff;
        }
        /* Dark theme active toggle button will inherit primary styles which should be fine */
        .dark-theme .view-toggle button.active {
             /* color: #fff; background-color: #007bff; border-color: #007bff; */
        }

        /* Ensure header nav links styled as buttons have appropriate spacing if needed */
        .header-controls nav a.btn {
            margin-left: 5px; /* Example if more spacing is needed */
        }
        .header-controls nav a.btn:first-child {
            margin-left: 0;
        }

    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>
                <% if (locals.isSearchResult && locals.searchQuery) { %>
                    有關 "<%= searchQuery %>" 的搜尋結果 <% if (locals.viewTargetUsername) { %>(在 <%= viewTargetUsername %> 的文件中)<% } else { %>(在您的文件中)<% } %>
                <% } else if (locals.viewTargetUsername && user.role === 'admin') { %>
                    管理員視角: <%= viewTargetUsername %> 的文件
                <% } else { %>
                    <%= user.username %> 的文件
                <% } %>
            </h1>
            <div class="header-controls">
                <nav>
                    <% if (user.role === 'admin') { %><a href="/admin" class="btn">管理面板</a><% } %>
                    <a href="/change-password" class="btn">修改密碼</a>
                    <a href="/logout" class="btn btn-secondary">登出</a>
                </nav>
                <%- include('partials/theme-switcher') %>
            </div>
        </header>

        <% if (locals.message) { %>
            <p class="message <%= (locals.messageType === 'error' || (locals.message && (message.includes('失敗') || message.includes('错误') || message.includes('沒有選擇文件') || message.includes('無效的') ))) ? 'error-message' : (locals.messageType === 'success' ? '' : (locals.messageType === 'warning' ? 'warning-message' : '') ) %>"><%= message %></p>
        <% } %>

        <% if (!locals.isSearchResult) { %>
            <div class="current-path">
                當前路徑:
                <a href="/files<%= locals.viewTargetUsername && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewTargetUsername) : '' %>">根目錄</a>
                <%
                    let pathSegments = currentPath.split('/').filter(Boolean);
                    let cumulativePathForLink = '';
                    const adminTargetQueryForPath = locals.viewTargetUsername && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewTargetUsername) : '';
                %>
                <% pathSegments.forEach(segment => { %>
                    <% cumulativePathForLink += '/' + segment; %>
                    / <a href="/files?path=<%= encodeURIComponent(cumulativePathForLink) %><%= adminTargetQueryForPath %>"><%= segment %></a>
                <% }); %>
            </div>
        <% } else if (locals.searchQuery) { %>
             <div class="search-results-info">
                正在顯示包含 "<%= searchQuery %>" 的文件。
                <a href="/files<%= locals.viewTargetUsername && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewTargetUsername) : '' %>">清除搜索並返回根目錄</a>
            </div>
        <% } %>

        <div class="file-browser-controls">
            <% if (!locals.isSearchResult && currentPath && currentPath !== '/search-results') { %>
                <div class="actions-group-left">
                    <button type="button" id="show-create-textfile-modal-btn" class="btn btn-primary">新建文本文件</button>
                    <button type="button" id="show-create-folder-modal-btn" class="btn btn-primary">創建文件夾</button>
                    <button type="button" id="toggleUploadActionsBtn" class="btn btn-primary upload-button-main">上傳</button> 
                </div>
            <% } %>
        
            <form action="/files" method="GET" class="control-form search-form-right">
                <% if (locals.viewTargetUsername && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>">
                <% } %>
                <input type="search" name="q" placeholder="搜索..." value="<%= locals.searchQuery || '' %>">
                <button type="submit" class="btn">搜索</button>
            </form>
        
            <div class="view-toggle">
                <button id="listViewBtn" class="btn">列表</button>
                <button id="gridViewBtn" class="btn">網格</button>
            </div>
        </div>
        
        <% if (!locals.isSearchResult && currentPath && currentPath !== '/search-results') { %>
            <div id="upload-actions-container" style="justify-content: flex-start;">
                <button type="button" id="upload-files-btn" class="btn">上傳文件</button>
                <button type="button" id="upload-folder-btn" class="btn">上傳文件夾</button>
            </div>

            <div id="upload-section">
                <h2 id="upload-section-title">上傳到 "<%= currentPath === '/' ? '根目錄' : currentPath.split('/').pop() %>"</h2>
                <div id="drop-area">
                    <form id="upload-form" action="/upload" method="POST" enctype="multipart/form-data">
                        <input type="hidden" name="currentPath" value="<%= currentPath %>">
                        <% if (locals.viewTargetUsername && user.role === 'admin') { %><input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>"><% } %>
                        <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                        <input type="file" id="userFiles" name="userFiles" multiple style="display: none;"> 
                        <p id="drop-area-text">將文件或文件夾拖拽到此處，或點擊上方按鈕選擇</p>
                        <button type="submit" id="upload-button" class="btn btn-primary">上傳已選項目</button>
                    </form>
                    <div id="file-list-preview" style="margin-top:10px; text-align:left;"></div>
                    <div class="progress-bar-container" id="upload-progress-container">
                        <div class="progress-bar" id="upload-progress-bar">0%</div>
                    </div>
                </div>
            </div>
        <% } %>

        <div id="selection-action-bar">
            <span id="selection-count" style="margin-right: 15px;">已選擇 0 項</span>
            <button id="action-edit-btn" class="btn" disabled>編輯</button>
            <button id="action-rename-btn" class="btn" disabled>重命名</button>
            <button id="action-move-btn" class="btn" disabled>移動</button>
            <button id="action-download-btn" class="btn" disabled>下載選中項</button>
            <button id="action-delete-btn" class="btn btn-danger" disabled>删除</button>
        </div>

        <h2><%= locals.isSearchResult ? '搜索結果' : '文件列表' %></h2>
        <% if (items.length > 0) { %>
            <div id="select-all-container">
                <input type="checkbox" id="select-all-checkbox">
                <label for="select-all-checkbox">全選/取消全選</label>
            </div>
        <% } %>
        <div id="file-container">
            <% if (items.length > 0) { %>
                <% const adminTargetQueryForActions = locals.viewTargetUsername && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewTargetUsername) : ''; %>
                <ul>
                    <% items.forEach(item => { %>
                        <li>
                            <div class="file-entry-selectable">
                                <input type="checkbox" class="item-checkbox"
                                       data-path="<%= item.path %>"
                                       data-encoded-path="<%= item.encodedPath %>"
                                       data-name="<%= item.name %>"
                                       data-encoded-name="<%= item.encodedName %>"
                                       data-is-dir="<%= item.isDir %>"
                                       data-raw-name="<%= item.name.replace(/'/g, '\\\'').replace(/"/g, '&quot;') %>">
                                <div class="file-content-wrapper">
                                    <% if (item.isDir) { %>
                                        <div class="file-entry">
                                            <span class="file-icon-large folder-icon">📁</span>
                                            <a href="/files?path=<%= item.encodedPath %><%= adminTargetQueryForActions %>" class="file-name"><%= item.name %></a>
                                            <% if (locals.isSearchResult) { %><span class="file-location-in-search">(位於: <%= (item.path.substring(0, item.path.lastIndexOf('/')) || '/') %>)</span><% } %>
                                        </div>
                                    <% } else { %>
                                        <div class="file-entry">
                                            <%
                                                const ext = item.name.includes('.') ? item.name.substring(item.name.lastIndexOf('.') + 1).toLowerCase() : '';
                                                let largeIcon = '📄';
                                                let isViewableTextFile = false;
                                                if (ALLOWED_TEXT_EXTENSIONS.includes('.' + ext) || ALLOWED_TEXT_EXTENSIONS.includes(ext)) {
                                                    isViewableTextFile = true;
                                                    largeIcon = '📝';
                                                }
                                                else if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'].includes(ext)) { largeIcon = '🖼️'; }
                                                else if (['pdf'].includes(ext)) { largeIcon = '📕';}
                                                else if (['doc', 'docx', 'odt'].includes(ext)) { largeIcon = '📃';}
                                                else if (['xls', 'xlsx', 'ods'].includes(ext)) { largeIcon = '📊';}
                                                else if (['ppt', 'pptx', 'odp'].includes(ext)) { largeIcon = '🖥️';}
                                                else if (['zip', 'rar', 'tar', 'gz', '7z'].includes(ext)) { largeIcon = '📦';}
                                                else if (['mp3', 'wav', 'ogg', 'aac', 'flac'].includes(ext)) { largeIcon = '🎵';}
                                                else if (['mp4', 'mov', 'avi', 'mkv', 'webm', 'wmv'].includes(ext)) { largeIcon = '🎬';}
                                            %>
                                            <span class="file-icon-large"><%= largeIcon %></span>
                                            <% if (isViewableTextFile) { %>
                                                <a href="/view?path=<%= item.encodedPath %><%= adminTargetQueryForActions %>" class="file-name" title="點擊查看"><%= item.name %></a>
                                            <% } else { %>
                                                <span class="file-name"><%= item.name %></span>
                                            <% } %>
                                            <% if (locals.isSearchResult) { %><span class="file-location-in-search">(位於: <%= (item.path.substring(0, item.path.lastIndexOf('/')) || '/') %>)</span><% } %>
                                        </div>
                                    <% } %>
                                    <span class="file-actions-placeholder"></span>
                                </div>
                            </div>
                             <div class="rename-form" id="rename-form-<%= item.encodedName %>">
                                <form action="/rename" method="POST" class="control-form inline-form">
                                    <input type="hidden" name="currentPath" value="<%= locals.isSearchResult ? (item.path.substring(0, item.path.lastIndexOf('/')) || '/') : currentPath %>">
                                    <input type="hidden" name="oldPath" value="<%= item.path %>">
                                    <input type="hidden" name="isDir" value="<%= item.isDir %>">
                                    <% if (locals.viewTargetUsername && user.role === 'admin') { %><input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>"><% } %>
                                    <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                                    <input type="text" name="newName" placeholder="新名稱" value="<%= item.name %>" required>
                                    <button type="submit" class="btn btn-primary">確認</button>
                                    <button type="button" class="btn" onclick="hideRenameForm('<%= item.encodedName %>'); return false;">取消</button>
                                </form>
                            </div>
                        </li>
                    <% }) %>
                </ul>
            <% } else { %>
                <p><%= locals.isSearchResult ? '找不到符合條件的文件。' : '此文件夾為空。' %></p>
            <% } %>
        </div>
    </div>

    <div id="create-item-modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-create-item-modal-btn">&times;</span>
            <h3 id="create-item-modal-title">创建新项目</h3>
            <form id="create-item-form" method="POST"> 
                <input type="hidden" name="currentPath" value="<%= currentPath %>">
                <% if (locals.viewTargetUsername && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>">
                <% } %>
                <% if (locals.csrfToken) { %>
                    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                <% } %>
                <div class="form-group">
                    <label for="create-item-name-input" id="create-item-name-label">名称:</label>
                    <input type="text" id="create-item-name-input" name="" required> 
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn" id="cancel-create-item-btn">取消</button>
                    <button type="submit" class="btn btn-primary" id="confirm-create-item-btn">确认创建</button>
                </div>
            </form>
        </div>
    </div>

    <div id="move-modal">
        <div class="modal-content"> <span class="close-modal-btn" id="close-move-modal-btn">&times;</span>
            <h3>移動選中項目到:</h3>
            <div id="directory-tree-container">
                <p>正在加載目錄...</p>
            </div>
            <p>已選擇目標: <strong id="selected-destination-path">無</strong></p>
            <input type="hidden" id="move-destination-input" value="">
            <div class="modal-actions"> 
                <button type="button" class="btn" id="cancel-move-btn">取消</button>
                <button id="confirm-move-btn" class="btn btn-primary" disabled>確認移動</button>
            </div>
        </div>
    </div>

    <script src="/theme.js"></script>
    <script>
        const ALLOWED_TEXT_EXTENSIONS = <%- JSON.stringify(locals.ALLOWED_TEXT_EXTENSIONS || []) %>;
        const CSRF_TOKEN = "<%= locals.csrfToken || '' %>";
        const VIEW_TARGET_USERNAME = "<%= locals.viewTargetUsername || '' %>";
        const CURRENT_USER_ROLE = "<%= user.role %>";
        const CURRENT_PATH_ON_LOAD = "<%= currentPath %>";
        const IS_SEARCH_RESULT_VIEW = <%= locals.isSearchResult || false %>;

        document.addEventListener('DOMContentLoaded', () => {
            const selectAllCheckbox = document.getElementById('select-all-checkbox');
            const selectionActionBar = document.getElementById('selection-action-bar');
            const selectionCountDisplay = document.getElementById('selection-count');
            const actionEditBtn = document.getElementById('action-edit-btn');
            const actionRenameBtn = document.getElementById('action-rename-btn');
            const actionMoveBtn = document.getElementById('action-move-btn');
            const actionDownloadBtn = document.getElementById('action-download-btn');
            const actionDeleteBtn = document.getElementById('action-delete-btn');
            const moveModal = document.getElementById('move-modal');
            const closeMoveModalBtn = document.getElementById('close-move-modal-btn');
            const directoryTreeContainer = document.getElementById('directory-tree-container');
            const confirmMoveBtn = document.getElementById('confirm-move-btn');
            const cancelMoveBtn = document.getElementById('cancel-move-btn');
            const selectedDestinationPathDisplay = document.getElementById('selected-destination-path');
            const moveDestinationInput = document.getElementById('move-destination-input');
            let currentDirectoryTree = [];

            // --- Upload related elements ---
            const toggleUploadActionsBtn = document.getElementById('toggleUploadActionsBtn');
            const uploadActionsContainer = document.getElementById('upload-actions-container');
            const uploadFilesBtn = document.getElementById('upload-files-btn');
            const uploadFolderBtn = document.getElementById('upload-folder-btn');
            const uploadSection = document.getElementById('upload-section');
            const userFilesInput = document.getElementById('userFiles');
            const dropAreaText = document.getElementById('drop-area-text');
            const uploadForm = document.getElementById('upload-form');
            const uploadProgressContainer = document.getElementById('upload-progress-container');
            const uploadProgressBar = document.getElementById('upload-progress-bar');
            const fileListPreview = document.getElementById('file-list-preview');
            const uploadButton = document.getElementById('upload-button'); 
            const dropArea = document.getElementById('drop-area');


            function getSelectedItems() {
                const currentCheckboxes = document.querySelectorAll('.item-checkbox'); 
                const selected = [];
                currentCheckboxes.forEach((cb) => {
                    if (cb.checked) {
                        selected.push({
                            path: cb.dataset.path, encodedPath: cb.dataset.encodedPath,
                            name: cb.dataset.name, encodedName: cb.dataset.encodedName,
                            isDir: cb.dataset.isDir === 'true', rawName: cb.dataset.rawName
                        });
                    }
                });
                return selected;
            }

            function updateSelectionActions() {
                const selectedItems = getSelectedItems(); 
                const count = selectedItems.length;

                if (selectionActionBar && selectionCountDisplay) { 
                    if (count > 0) {
                        selectionActionBar.style.display = 'flex';
                        selectionCountDisplay.textContent = `已選擇 ${count} 項`;
                    } else {
                        selectionActionBar.style.display = 'none';
                    }
                }
                
                let canEdit = false;
                if (count === 1 && selectedItems[0] && !selectedItems[0].isDir) { 
                    const fileName = selectedItems[0].name;
                    const fileExt = fileName.includes('.') ? fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase() : '';
                    if (ALLOWED_TEXT_EXTENSIONS.includes('.' + fileExt) || ALLOWED_TEXT_EXTENSIONS.includes(fileExt)) {
                        canEdit = true;
                    }
                }
                if (actionEditBtn) actionEditBtn.disabled = !canEdit;
                if (actionRenameBtn) actionRenameBtn.disabled = !(count === 1);
                if (actionMoveBtn) actionMoveBtn.disabled = !(count > 0);
                if (actionDownloadBtn) actionDownloadBtn.disabled = !(count > 0);
                if (actionDeleteBtn) actionDeleteBtn.disabled = !(count > 0);
            }

            const itemCheckboxesForListeners = document.querySelectorAll('.item-checkbox');
            itemCheckboxesForListeners.forEach((checkbox) => {
                checkbox.addEventListener('change', () => {
                    updateSelectionActions(); 
                });
            });
            
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', (e) => {
                    const currentCheckboxes = document.querySelectorAll('.item-checkbox'); 
                    currentCheckboxes.forEach(cb => {
                        if (cb.checked !== e.target.checked) { 
                            cb.checked = e.target.checked;
                        }
                    });
                    updateSelectionActions(); 
                });
            }

            if (actionEditBtn) {
                actionEditBtn.addEventListener('click', () => {
                    const selected = getSelectedItems();
                    if (actionEditBtn.disabled) return;
                    if (selected.length === 1) {
                        let url = `/edit?path=${selected[0].encodedPath}`;
                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                            url += `&targetUsername=${encodeURIComponent(VIEW_TARGET_USERNAME)}`;
                        }
                        window.location.href = url;
                    }
                });
            }
            if (actionRenameBtn) {
                actionRenameBtn.addEventListener('click', () => {
                    const selected = getSelectedItems();
                     if (actionRenameBtn.disabled) return;
                    if (selected.length === 1) showRenameForm(selected[0].encodedName, selected[0].name, selected[0].isDir);
                });
            }
            
            if (actionDownloadBtn) {
                actionDownloadBtn.addEventListener('click', () => {
                    const selectedItems = getSelectedItems(); 
                    if (selectedItems.length === 0) {
                        alert("請至少選擇一個項目進行下載。"); 
                        return;
                    }
                     if (actionDownloadBtn.disabled) { 
                        return;
                    }

                    if (selectedItems.length === 1 && !selectedItems[0].isDir) {
                        let url = `/download?path=${selectedItems[0].encodedPath}`;
                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                            url += `&targetUsername=${encodeURIComponent(VIEW_TARGET_USERNAME)}`;
                        }
                        const tempLink = document.createElement('a');
                        tempLink.href = url;
                        tempLink.setAttribute('download', selectedItems[0].name);
                        tempLink.style.display = 'none';
                        document.body.appendChild(tempLink);
                        tempLink.click();
                        document.body.removeChild(tempLink);
                    } else {
                        const form = document.createElement('form');
                        form.method = 'POST';
                        form.action = '/download-archive';
                        form.style.display = 'none';

                        const itemsInput = document.createElement('input');
                        itemsInput.type = 'hidden';
                        itemsInput.name = 'items';
                        const itemsForPayload = selectedItems.map(item => ({ 
                            path: item.path, 
                            name: item.name, 
                            isDir: item.isDir 
                        }));
                        itemsInput.value = JSON.stringify(itemsForPayload);
                        form.appendChild(itemsInput);

                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                            const targetUserInput = document.createElement('input');
                            targetUserInput.type = 'hidden';
                            targetUserInput.name = 'targetUsername';
                            targetUserInput.value = VIEW_TARGET_USERNAME;
                            form.appendChild(targetUserInput);
                        }
                        if (CSRF_TOKEN) { 
                            const csrfInput = document.createElement('input');
                            csrfInput.type = 'hidden';
                            csrfInput.name = '_csrf'; 
                            csrfInput.value = CSRF_TOKEN;
                            form.appendChild(csrfInput);
                        }
                        document.body.appendChild(form);
                        try {
                            form.submit();
                        } catch (e) {
                            console.error("表單提交錯誤:", e);
                            alert("觸發下載時發生錯誤，請查看控制台。");
                        }
                        if (form.parentNode === document.body) { 
                           document.body.removeChild(form);
                        }
                    }
                });
            }

            if (actionDeleteBtn) {
                actionDeleteBtn.addEventListener('click', async () => {
                    const selectedItems = getSelectedItems(); 
                    if (selectedItems.length === 0) return;
                    const itemNames = selectedItems.map(item => item.rawName).join(', ');
                    if (confirm(`確定要刪除選中的 ${selectedItems.length} 個項目 (${itemNames}) 嗎？此操作不可恢復！`)) {
                        let allSucceeded = true; let reloadPage = false;
                        for (const item of selectedItems) {
                            try {
                                let deleteUrl = `/delete?path=${item.encodedPath}&isDir=${item.isDir}`;
                                if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                                    deleteUrl += `&targetUsername=${encodeURIComponent(VIEW_TARGET_USERNAME)}`;
                                }
                                const response = await fetch(deleteUrl, { method: 'GET' }); // Changed to GET as per original logic
                                if (response.ok && response.redirected) reloadPage = true; // Assuming redirect means success
                                else if (!response.ok) { console.error('刪除失敗:', item.name, response.status); allSucceeded = false; }
                            } catch (error) { console.error('刪除項目時出錯:', item.name, error); allSucceeded = false; }
                        }
                        if (reloadPage || !allSucceeded) { // Reload if any redirect happened or if not all succeeded
                            alert(allSucceeded ? "選中項目已嘗試刪除，頁面將刷新。" : "部分項目刪除失敗，頁面將刷新。");
                            window.location.reload();
                        }
                        // These lines might not be reached if page reloads, but good for non-reload scenarios
                        if(selectAllCheckbox) selectAllCheckbox.checked = false;
                        document.querySelectorAll('.item-checkbox').forEach(cb => cb.checked = false); 
                        updateSelectionActions();
                    }
                });
            }
            if (actionMoveBtn) {
                actionMoveBtn.addEventListener('click', async () => {
                    const selectedItems = getSelectedItems(); 
                    if (selectedItems.length === 0) return;
                    moveDestinationInput.value = ''; selectedDestinationPathDisplay.textContent = '無';
                    confirmMoveBtn.disabled = true; directoryTreeContainer.innerHTML = '<p>正在加載目錄...</p>';
                    moveModal.style.display = 'block';
                    try {
                        let fetchUrl = '/api/directories'; let queryParams = [];
                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') queryParams.push(`targetUsername=${encodeURIComponent(VIEW_TARGET_USERNAME)}`);
                        const pathsToExclude = selectedItems.filter(item => item.isDir).map(item => item.path);
                        if (pathsToExclude.length > 0) queryParams.push(`excludePaths=${encodeURIComponent(pathsToExclude.join(','))}`);
                        if (queryParams.length > 0) fetchUrl += `?${queryParams.join('&')}`;
                        const response = await fetch(fetchUrl);
                        if (!response.ok) throw new Error(`無法獲取目錄列表: ${response.statusText}`);
                        currentDirectoryTree = await response.json();
                        renderDirectoryTree(currentDirectoryTree, directoryTreeContainer, selectedItems.map(i => i.path));
                    } catch (error) {
                        console.error('獲取目錄樹時出錯:', error);
                        directoryTreeContainer.innerHTML = `<p style="color:red;">加載目錄失敗: ${error.message}</p>`;
                    }
                });
            }
            function renderDirectoryTree(nodes, container, itemsToMovePaths, currentLevelPath = '/') {
                container.innerHTML = ''; const ul = document.createElement('ul');
                const rootLi = document.createElement('li'); rootLi.textContent = '根目錄 (/)';
                rootLi.dataset.path = '/'; rootLi.addEventListener('click', (e) => selectDestination(e.target, '/'));
                ul.appendChild(rootLi);
                function buildTree(items, parentUl, parentPath) {
                    items.forEach(item => {
                        if (itemsToMovePaths.some(sourcePath => item.path === sourcePath || (sourcePath.startsWith(item.path + '/') && item.path !=='/'))) return;
                        if (itemsToMovePaths.some(sourcePath => item.path.startsWith(sourcePath + '/'))) return; // Prevent moving into a subfolder of itself if it's part of the selection
                        const li = document.createElement('li'); li.textContent = item.name; li.dataset.path = item.path;
                        li.addEventListener('click', (e) => { e.stopPropagation(); selectDestination(e.target, item.path); });
                        parentUl.appendChild(li);
                        if (item.children && item.children.length > 0) {
                            const nestedUl = document.createElement('ul'); li.appendChild(nestedUl);
                            buildTree(item.children, nestedUl, item.path);
                        }
                    });
                }
                buildTree(nodes, ul, '/'); container.appendChild(ul);
            }
            function selectDestination(targetElement, path) {
                document.querySelectorAll('#directory-tree-container li.selected-dir').forEach(el => el.classList.remove('selected-dir'));
                targetElement.classList.add('selected-dir');
                selectedDestinationPathDisplay.textContent = path; moveDestinationInput.value = path;
                confirmMoveBtn.disabled = false;
            }
            if (closeMoveModalBtn) closeMoveModalBtn.onclick = () => moveModal.style.display = 'none';
            if (cancelMoveBtn) cancelMoveBtn.onclick = () => moveModal.style.display = 'none';
            
            if (confirmMoveBtn) {
                confirmMoveBtn.addEventListener('click', async () => {
                    const selectedToMove = getSelectedItems(); 
                    const destinationPath = moveDestinationInput.value;
                    if (selectedToMove.length === 0 || !destinationPath) { alert('請選擇要移動的項目和目標文件夾。'); return; }
                    for (const item of selectedToMove) {
                        if (item.isDir && (destinationPath === item.path || destinationPath.startsWith(item.path + '/'))) {
                            alert(`不能將文件夾 "${item.name}" 移動到其自身或其子文件夾中。`); return;
                        }
                         // Check if destination is one of the selected items (if selected item is a file and dest is that file's path - though unlikely for folder dest)
                        if (!item.isDir && destinationPath === item.path) {
                             alert(`目標路徑不能與源文件 "${item.name}" 相同。`); return;
                        }
                    }
                    try {
                        const payload = { sourcePaths: selectedToMove.map(item => item.path), destinationPath: destinationPath, };
                        if (CSRF_TOKEN) payload._csrf = CSRF_TOKEN;
                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') payload.targetUsername = VIEW_TARGET_USERNAME;
                        const response = await fetch('/move-items', {
                            method: 'POST', headers: { 'Content-Type': 'application/json', },
                            body: JSON.stringify(payload)
                        });
                        const result = await response.json();
                        if (response.ok && result.success) { alert('項目移動成功！'); window.location.reload(); }
                        else alert(`移動失敗: ${result.message || '未知錯誤'}`);
                    } catch (error) { console.error('移動項目時出錯:', error); alert(`移動項目時發生客戶端錯誤: ${error.message}`); }
                    moveModal.style.display = 'none';
                });
            }

            // --- New Upload Logic ---
            if (toggleUploadActionsBtn && uploadActionsContainer && uploadSection) {
                toggleUploadActionsBtn.addEventListener('click', () => {
                    const isActionsHidden = uploadActionsContainer.style.display === 'none' || uploadActionsContainer.style.display === '';
                    uploadActionsContainer.style.display = isActionsHidden ? 'flex' : 'none';
                    if (!isActionsHidden) { // If actions are being hidden
                        uploadSection.style.display = 'none'; // Also hide the upload section itself
                        toggleUploadActionsBtn.textContent = '上傳'; // Reset button text
                        toggleUploadActionsBtn.classList.remove('btn-secondary'); // Revert to primary if it was changed
                        toggleUploadActionsBtn.classList.add('btn-primary');
                    } else { // If actions are being shown
                        toggleUploadActionsBtn.textContent = '取消上傳操作';
                        toggleUploadActionsBtn.classList.remove('btn-primary'); // Change to secondary for "cancel" context
                        toggleUploadActionsBtn.classList.add('btn-secondary');
                    }
                });
            }

            if (uploadFilesBtn && uploadSection && userFilesInput && dropAreaText && fileListPreview && uploadButton) {
                uploadFilesBtn.addEventListener('click', () => {
                    userFilesInput.removeAttribute('webkitdirectory');
                    userFilesInput.removeAttribute('directory');
                    userFilesInput.setAttribute('multiple', '');
                    if (dropAreaText) dropAreaText.textContent = '將文件拖拽到此處進行上傳。';
                    uploadSection.style.display = 'block';
                    if (toggleUploadActionsBtn) {
                        toggleUploadActionsBtn.textContent = '取消上傳操作';
                        toggleUploadActionsBtn.classList.remove('btn-primary');
                        toggleUploadActionsBtn.classList.add('btn-secondary');
                    }
                    userFilesInput.value = null; 
                    fileListPreview.innerHTML = ''; 
                    uploadButton.style.display = 'none'; 
                    userFilesInput.click();
                });
            }

            if (uploadFolderBtn && uploadSection && userFilesInput && dropAreaText && fileListPreview && uploadButton) {
                uploadFolderBtn.addEventListener('click', () => {
                    userFilesInput.setAttribute('webkitdirectory', '');
                    userFilesInput.setAttribute('directory', '');
                    userFilesInput.removeAttribute('multiple'); 
                    if (dropAreaText) dropAreaText.textContent = '將文件夾拖拽到此處進行上傳。';
                    uploadSection.style.display = 'block';
                     if (toggleUploadActionsBtn) {
                        toggleUploadActionsBtn.textContent = '取消上傳操作';
                        toggleUploadActionsBtn.classList.remove('btn-primary');
                        toggleUploadActionsBtn.classList.add('btn-secondary');
                    }
                    userFilesInput.value = null; 
                    fileListPreview.innerHTML = ''; 
                    uploadButton.style.display = 'none';
                    userFilesInput.click();
                });
            }
            
            if (uploadForm && userFilesInput) {
                uploadForm.addEventListener('submit', function(event) {
                    event.preventDefault(); 
                    if (userFilesInput.files.length === 0) {
                        alert('請選擇要上傳的文件或文件夾。');
                        return;
                    }
                    const formData = new FormData(uploadForm); 
                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', uploadForm.action, true);
                    if (uploadProgressContainer && uploadProgressBar) {
                        uploadProgressContainer.style.display = 'block';
                        uploadProgressBar.style.width = '0%';
                        uploadProgressBar.textContent = '0%';
                    }
                    xhr.upload.onprogress = function(event) {
                        if (event.lengthComputable) {
                            const percentComplete = Math.round((event.loaded / event.total) * 100);
                            if (uploadProgressBar) {
                                uploadProgressBar.style.width = percentComplete + '%';
                                uploadProgressBar.textContent = percentComplete + '%';
                            }
                        }
                    };
                    xhr.onload = function() {
                        if (uploadProgressContainer) uploadProgressContainer.style.display = 'none';
                        if (xhr.status >= 200 && xhr.status < 400) { 
                            if (xhr.responseURL && xhr.responseURL !== xhr.openUrl && xhr.responseURL.includes('/files')) {
                                window.location.href = xhr.responseURL; 
                            } else {
                                try {
                                    const jsonResponse = JSON.parse(xhr.responseText);
                                    if (jsonResponse.success || xhr.status === 200 || xhr.status === 201) { 
                                        alert(jsonResponse.message || '上傳成功！頁面將刷新。');
                                    } else {
                                        alert(jsonResponse.message || '上傳可能已部分成功或伺服器返回了非預期的成功消息。');
                                    }
                                } catch (e) {
                                    console.warn("Upload response was not JSON, or parsing failed. Assuming success by page behavior or redirect. Status:", xhr.status);
                                    alert('上傳操作已發送，頁面將刷新以查看結果。');
                                }
                                window.location.reload(); 
                            }
                        } else {
                            let errorMessage = `上傳失敗。伺服器響應: ${xhr.status}`;
                            try {
                                const responseJson = JSON.parse(xhr.responseText);
                                if (responseJson && responseJson.message) {
                                    errorMessage = responseJson.message;
                                }
                            } catch (e) {
                                if(xhr.responseText) errorMessage = xhr.responseText.substring(0, 500); 
                            }
                            alert(errorMessage);
                            console.error('Upload failed:', xhr.status, xhr.responseText);
                        }
                    };
                    xhr.onerror = function(e) { 
                        if (uploadProgressContainer) uploadProgressContainer.style.display = 'none';
                        alert('上傳過程中發生網絡錯誤。請檢查網絡連接和服務器狀態。');
                        console.error('Upload network error:', e);
                    };
                    xhr.openUrl = uploadForm.action; 
                    xhr.send(formData);
                });
            }

            if (dropArea && userFilesInput && fileListPreview && uploadSection && dropAreaText && uploadActionsContainer && toggleUploadActionsBtn) { 
                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                    dropArea.addEventListener(eventName, preventDefaults, false);
                    document.body.addEventListener(eventName, preventDefaults, false); 
                });
                function preventDefaults(e) { e.preventDefault(); e.stopPropagation(); }
                
                ['dragenter', 'dragover'].forEach(eventName => dropArea.addEventListener(eventName, () => dropArea.classList.add('highlight'), false));
                ['dragleave', 'drop'].forEach(eventName => dropArea.addEventListener(eventName, () => dropArea.classList.remove('highlight'), false));
                
                dropArea.addEventListener('drop', (e) => {
                    preventDefaults(e);
                    dropArea.classList.remove('highlight');

                    const items = e.dataTransfer.items;
                    let isLikelyFolderDrop = false;
                    if (items && items.length > 0) {
                        for (let i = 0; i < items.length; i++) {
                            const entry = items[i].webkitGetAsEntry ? items[i].webkitGetAsEntry() : null;
                            if (entry && entry.isDirectory) {
                                isLikelyFolderDrop = true;
                                break;
                            }
                        }
                    }
                    
                    if (isLikelyFolderDrop) {
                        userFilesInput.setAttribute('webkitdirectory', '');
                        userFilesInput.setAttribute('directory', '');
                        userFilesInput.removeAttribute('multiple');
                        if(dropAreaText) dropAreaText.textContent = '已拖入文件夾，準備上傳。';
                    } else {
                        userFilesInput.removeAttribute('webkitdirectory');
                        userFilesInput.removeAttribute('directory');
                        userFilesInput.setAttribute('multiple', '');
                        if(dropAreaText) dropAreaText.textContent = '已拖入文件，準備上傳。';
                    }

                    userFilesInput.files = e.dataTransfer.files; 
                    updateFileListPreviewOnDrop();
                    
                    uploadSection.style.display = 'block'; 
                    uploadActionsContainer.style.display = 'flex'; 
                    if (toggleUploadActionsBtn) {
                        toggleUploadActionsBtn.textContent = '取消上傳操作';
                        toggleUploadActionsBtn.classList.remove('btn-primary');
                        toggleUploadActionsBtn.classList.add('btn-secondary');
                    }
                }, false);

                userFilesInput.addEventListener('change', updateFileListPreviewOnDrop); 

                function updateFileListPreviewOnDrop() { 
                    if (!fileListPreview || !userFilesInput || !uploadButton) return;
                    fileListPreview.innerHTML = '';
                    if (userFilesInput.files.length > 0) {
                        const list = document.createElement('ul');
                        list.style.listStyleType = 'none'; list.style.paddingLeft = '0';
                        let isDirectoryUpload = false;
                        if (userFilesInput.files[0] && userFilesInput.files[0].webkitRelativePath && userFilesInput.files[0].webkitRelativePath.includes('/')) {
                           isDirectoryUpload = true;
                        } else if (userFilesInput.webkitdirectory || userFilesInput.directory) { 
                            if(userFilesInput.files.length > 0 && userFilesInput.files[0].name === userFilesInput.files[0].webkitRelativePath.split('/')[0]) {
                                // This heuristic might be unreliable. Sticking to webkitRelativePath is safer.
                            }
                        }

                        if (isDirectoryUpload) {
                            const folderName = userFilesInput.files[0].webkitRelativePath.split('/')[0];
                            const listItem = document.createElement('li');
                            listItem.textContent = `文件夾: ${folderName} (${userFilesInput.files.length} 個文件)`;
                            listItem.style.fontSize = '0.9em';
                            listItem.style.fontWeight = 'bold';
                            list.appendChild(listItem);
                        } else { 
                            for (let i = 0; i < userFilesInput.files.length; i++) {
                                const listItem = document.createElement('li');
                                listItem.textContent = userFilesInput.files[i].name + (userFilesInput.files[i].size ? ` (${(userFilesInput.files[i].size / 1024).toFixed(1)} KB)` : '');
                                listItem.style.fontSize = '0.9em';
                                list.appendChild(listItem);
                            }
                        }
                        fileListPreview.appendChild(list);
                        uploadButton.style.display = 'inline-block';
                    } else {
                        uploadButton.style.display = 'none';
                    }
                }
                // Initial state for upload button
                if (userFilesInput && uploadButton && userFilesInput.files.length === 0) {
                     uploadButton.style.display = 'none';
                }
            }


            const fileContainer = document.getElementById('file-container');
            const listViewBtn = document.getElementById('listViewBtn');
            const gridViewBtn = document.getElementById('gridViewBtn');
            if (fileContainer && listViewBtn && gridViewBtn) { 
                function toggleView(viewType) {
                    if (viewType === 'grid') {
                        fileContainer.className = 'grid-view';
                        gridViewBtn.classList.add('active');
                        listViewBtn.classList.remove('active');
                        localStorage.setItem('fileView', 'grid');
                    } else { 
                        fileContainer.className = 'list-view';
                        listViewBtn.classList.add('active');
                        gridViewBtn.classList.remove('active');
                        localStorage.setItem('fileView', 'list');
                    }
                }
                const preferredView = localStorage.getItem('fileView');
                toggleView(preferredView || 'list'); 
                listViewBtn.addEventListener('click', () => toggleView('list'));
                gridViewBtn.addEventListener('click', () => toggleView('grid'));
            }
            updateSelectionActions(); 

            const createItemModal = document.getElementById('create-item-modal');
            const closeCreateItemModalBtn = document.getElementById('close-create-item-modal-btn');
            const cancelCreateItemBtn = document.getElementById('cancel-create-item-btn');
            const createItemForm = document.getElementById('create-item-form');
            const createItemModalTitle = document.getElementById('create-item-modal-title');
            const createItemNameInput = document.getElementById('create-item-name-input');
            const createItemNameLabel = document.getElementById('create-item-name-label');
            const showCreateTextfileModalBtn = document.getElementById('show-create-textfile-modal-btn');
            const showCreateFolderModalBtn = document.getElementById('show-create-folder-modal-btn');

            function openCreateItemModal(type) {
                if (!createItemModal || !createItemForm) return;
                createItemForm.reset(); 
                if (type === 'textfile') {
                    createItemModalTitle.textContent = '新建文本文件';
                    createItemNameLabel.textContent = '文件名 (例如: mydoc.txt):';
                    createItemNameInput.name = 'newFileName';
                    createItemNameInput.placeholder = '例如: notes.txt, script.js';
                    createItemForm.action = '/create-text-file';
                } else if (type === 'folder') {
                    createItemModalTitle.textContent = '创建新文件夹';
                    createItemNameLabel.textContent = '文件夹名称:';
                    createItemNameInput.name = 'folderName';
                    createItemNameInput.placeholder = '例如: 我的文档';
                    createItemForm.action = '/create-folder';
                }
                const currentPathHiddenInput = createItemForm.querySelector('input[name="currentPath"]');
                if (currentPathHiddenInput) currentPathHiddenInput.value = IS_SEARCH_RESULT_VIEW ? '/' : CURRENT_PATH_ON_LOAD;
                
                const targetUsernameHiddenInput = createItemForm.querySelector('input[name="targetUsername"]');
                if (targetUsernameHiddenInput) { 
                    if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                        targetUsernameHiddenInput.value = VIEW_TARGET_USERNAME;
                    } else {
                        targetUsernameHiddenInput.value = ''; 
                    }
                }
                createItemModal.style.display = 'block';
                createItemNameInput.focus();
            }

            if (showCreateTextfileModalBtn) showCreateTextfileModalBtn.addEventListener('click', () => openCreateItemModal('textfile'));
            if (showCreateFolderModalBtn) showCreateFolderModalBtn.addEventListener('click', () => openCreateItemModal('folder'));
            if (closeCreateItemModalBtn) closeCreateItemModalBtn.onclick = () => createItemModal.style.display = 'none';
            if (cancelCreateItemBtn) cancelCreateItemBtn.onclick = () => createItemModal.style.display = 'none';
            window.addEventListener('click', (event) => { 
                if (event.target == createItemModal) createItemModal.style.display = 'none';
                if (event.target == moveModal) moveModal.style.display = 'none'; 
            });
        });
        function showRenameForm(encodedName, currentName, isDir) { 
            document.querySelectorAll('.rename-form').forEach(form => {
                if (form.id !== 'rename-form-' + encodedName) form.style.display = 'none';
            });
            const formContainer = document.getElementById('rename-form-' + encodedName);
            if (formContainer) {
                const isCurrentlyVisible = formContainer.style.display === 'block';
                formContainer.style.display = isCurrentlyVisible ? 'none' : 'block';
                if (!isCurrentlyVisible) { 
                    const inputField = formContainer.querySelector('input[name="newName"]');
                    if (inputField) {
                        inputField.value = currentName; inputField.focus(); inputField.select();
                    }
                    const currentPathInput = formContainer.querySelector('input[name="currentPath"]');
                    if (currentPathInput && IS_SEARCH_RESULT_VIEW) {
                         const itemOriginalPath = formContainer.querySelector('input[name="oldPath"]').value;
                         currentPathInput.value = itemOriginalPath.substring(0, itemOriginalPath.lastIndexOf('/')) || '/';
                    } else if (currentPathInput) {
                        currentPathInput.value = CURRENT_PATH_ON_LOAD;
                    }
                }
            }
        }
        function hideRenameForm(encodedName) { 
            const form = document.getElementById('rename-form-' + encodedName);
            if (form) form.style.display = 'none';
        }
    </script>
</body>
</html>
