<%# views/files.ejs %>
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= locals.pageTitle || ( (locals.viewTargetUsername ? viewTargetUsername : user.username) + ' 的文件') %> - 網路硬碟</title>
    <link rel="stylesheet" href="/style.css">
    <link id="theme-stylesheet" rel="stylesheet" href="">
    <style>
        /* CSS 變量定義 */
        :root {
            --button-primary-bg-color: #007bff;
            --button-primary-text-color: #ffffff;
            --button-primary-border-color: #007bff;
            
            --button-secondary-bg-color: #6c757d; /* 用於次要按鈕，例如取消 */
            --button-secondary-text-color: #ffffff;
            --button-secondary-border-color: #6c757d;

            --input-border-color: #ccc;
            --input-bg-color: #fff;
            --input-text-color: #333;

            --modal-bg: #ffffff;
            --modal-text-color: #333;
            --modal-border-color: #888;

            --rename-form-bg: #ffffff;
            --rename-form-border-color: #cccccc;
        }

        .dark-theme {
            --button-primary-bg-color: #0056b3;
            --button-primary-text-color: #ffffff;
            --button-primary-border-color: #0056b3;

            --button-secondary-bg-color: #5a6268;
            --button-secondary-text-color: #ffffff;
            --button-secondary-border-color: #545b62;
            
            --input-border-color: #555; 
            --input-bg-color: #2c2c2c;   
            --input-text-color: #e0e0e0; 
            
            --modal-bg: #2c2c2c;
            --modal-text-color: #e0e0e0;
            --modal-border-color: #555;

            --rename-form-bg: #3a3a3a;
            --rename-form-border-color: #555;
        }

        /* 其他通用樣式 */
        #selection-action-bar { padding: 10px; background-color: #f0f0f0; border-bottom: 1px solid #ccc; margin-bottom: 15px; display: none; flex-wrap: wrap; gap: 10px; align-items: center; }
        .dark-theme #selection-action-bar { background-color: #252525; border-bottom-color: #444; }
        #selection-action-bar button { margin: 0; }
        
        .item-checkbox { 
            display: none; 
            margin-right: 10px; 
            width: 18px; 
            height: 18px; 
            vertical-align: middle; 
        }
        #file-container.multi-select-mode-active .item-checkbox {
            display: inline-block; 
        }

        .file-entry-selectable { display: flex; align-items: center; width: 100%; padding: 5px 0; }
        .file-content-wrapper { flex-grow: 1; display: flex; justify-content: space-between; align-items: center; cursor: pointer; }
        .list-view li { position: relative; }
        .list-view .file-content-wrapper > .file-entry { flex-grow: 1; }
        .list-view .file-actions-placeholder { min-width: 150px; text-align: right; font-size: 0.9em; color: #666; }
        .dark-theme .list-view .file-actions-placeholder { color: #aaa; }
        
        .list-view li.single-selected-item > .file-entry-selectable,
        .grid-view li.single-selected-item { 
            background-color: #e9e9e9; 
            border-radius: 4px;
        }
        .dark-theme .list-view li.single-selected-item > .file-entry-selectable,
        .dark-theme .grid-view li.single-selected-item {
            background-color: #404040; 
        }

        #move-modal, #create-item-modal, #overwrite-confirm-modal {
            display: none; position: fixed; z-index: 1001; left: 0; top: 0; width: 100%; height: 100%;
            overflow: auto; background-color: rgba(0,0,0,0.5); 
        }
        .modal-content { 
            background-color: var(--modal-bg) !important;
            color: var(--modal-text-color);
            margin: 10% auto; 
            padding: 20px; 
            border: 1px solid var(--modal-border-color);
            border-radius: 8px; 
            width: 90%; 
            max-width: 500px; 
            box-shadow: 0 5px 15px rgba(0,0,0,0.3); 
        }
        .modal-content h3 { margin-top: 0; }
        .modal-content .form-group { margin-bottom: 15px; }
        .modal-content .form-group label { display: block; margin-bottom: 5px; font-weight: 500; }
        .modal-content .form-group input[type="text"] {
            width: 100%; padding: 10px; box-sizing: border-box;
            border: 1px solid var(--input-border-color); border-radius: 4px;
            background-color: var(--input-bg-color); color: var(--input-text-color);
        }
        .modal-actions { text-align: right; margin-top: 20px; display: flex; gap: 10px; justify-content: flex-end; }

        #directory-tree-container { 
            max-height: 250px; 
            overflow-y: auto; 
            border: 1px solid var(--input-border-color); 
            padding: 10px; 
            margin-bottom: 15px; 
            background-color: var(--input-bg-color); 
        }
        #directory-tree-container ul { list-style-type: none; padding-left: 20px; }
        #directory-tree-container li { padding: 5px 0; cursor: pointer; border-bottom: 1px dashed var(--input-border-color); }
        #directory-tree-container li:last-child { border-bottom: none; }
        #directory-tree-container li:hover { background-color: var(--hover-bg, #f0f0f0); } 
        .dark-theme #directory-tree-container li:hover { --hover-bg: #4a4a4a; }
        #directory-tree-container li.selected-dir { background-color: #007bff; color: white; } 
        .dark-theme #directory-tree-container li.selected-dir { background-color: #0056b3; }

        .close-modal-btn { float: right; font-size: 1.5em; font-weight: bold; cursor: pointer; line-height: 1; padding: 0 5px;}

        .file-entry { display: flex; align-items: center; gap: 8px; }
        .list-view .file-entry .file-name { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
        .grid-view .file-entry { flex-direction: column; justify-content: center; text-align: center; }
        
        #select-all-container { 
            display: none; 
            align-items: center; 
            padding: 5px 10px; 
            background-color: #f9f9f9; 
            border-bottom: 1px solid #eee; 
        }
        .dark-theme #select-all-container { background-color: #2e2e2e; border-bottom-color: #444; }
        #file-container.multi-select-mode-active #select-all-container.has-items {
             display: flex;
        }
        #select-all-container label { margin-left: 5px; font-weight: normal;}

        .rename-form {
            display: none;
            position: absolute;
            left: 25px; /* Adjusted for checkbox width + margin */
            right: 5px;
            top: calc(100% + 2px); /* Position below the item */
            background-color: var(--rename-form-bg);
            padding: 10px;
            border: 1px solid var(--rename-form-border-color);
            box-shadow: 0 4px 10px rgba(0,0,0,0.15); 
            z-index: 100;
            border-radius: 6px;
            max-width: 400px; /* Or a suitable max-width */
            box-sizing: border-box;
        }
        .grid-view li .rename-form {
            left: 50%;
            transform: translateX(-50%) translateY(5px); /* Center below grid item */
            width: calc(100% - 10px); /* Adjust width for grid view */
            max-width: 300px; /* Or a suitable max-width for grid */
        }
        .rename-form form.inline-form {
            display: flex;
            gap: 8px; 
            align-items: stretch; 
        }

        .rename-form input[type="text"],
        .rename-form button {
            box-sizing: border-box; 
            font-size: 0.9em;      /* Smaller font for compact form */
            line-height: 1.4;    /* Adjust line height for padding */
            padding-top: 6px;      /* Vertical padding */
            padding-bottom: 6px;   /* Vertical padding */
            border-radius: 4px;    /* Consistent border radius */
            margin: 0;             /* Remove default margins */
        }

        .rename-form input[type="text"] {
            flex-grow: 1;
            padding-left: 8px;
            padding-right: 8px;
            background-color: var(--input-bg-color);
            color: var(--input-text-color);
            border: 1px solid var(--input-border-color);
        }

        .rename-form button {
            padding-left: 12px;  /* Horizontal padding */
            padding-right: 12px; /* Horizontal padding */
            cursor: pointer;
            white-space: nowrap; 
            border-width: 1px; 
            border-style: solid;
        }
        
        .rename-form button[type="submit"] {
            background-color: var(--button-primary-bg-color);
            color: var(--button-primary-text-color);
            border-color: var(--button-primary-border-color);
        }
        .rename-form button.secondary { 
            background-color: var(--button-secondary-bg-color);
            color: var(--button-secondary-text-color);
            border-color: var(--button-secondary-border-color);
        }
        
        #upload-actions-container { display: none; padding: 10px 0; gap: 10px; flex-wrap: wrap; align-items: center; margin-bottom: 15px; }
        #upload-actions-container button { margin: 0; }
        #upload-section { display: none; padding: 20px; border: 1px solid #dee2e6; border-radius: 6px; margin-top: 0; background-color: #f8f9fa; }
        .dark-theme #upload-section { background-color: #3a3a3a; border-color: #444; }
        #drop-area { border: 2px dashed #007bff; padding: 20px; text-align: center; border-radius: 5px; background-color: #fff; }
        .dark-theme #drop-area { border-color: #0056b3; background-color: #2c2c2c; }
        #drop-area.highlight { border-color: #28a745; background-color: #e9f7ef; }
        .dark-theme #drop-area.highlight { background-color: #333; }
        #drop-area p { margin-bottom: 15px; font-size: 1.1em; color: #6c757d; }
        .dark-theme #drop-area p { color: #adb5bd; }
        #upload-button { display: none; margin-top: 15px; }

        .search-results-info { padding: 10px; background-color: #e9ecef; border-radius: 5px; margin-bottom: 15px; font-size: 0.9em; }
        .dark-theme .search-results-info { background-color: #3a3a3a; }
        .file-location-in-search { font-size: 0.8em; color: #6c757d; margin-left: 8px; }
        .dark-theme .file-location-in-search { color: #adb5bd; }

        .file-browser-controls { display: flex; flex-wrap: wrap; align-items: center; gap: 10px; margin-bottom: 20px; }
        .file-browser-controls .actions-group-left { display: flex; gap: 10px; align-items: center; flex-shrink: 0; }
        
        .file-browser-controls .actions-group-left button,
        #toggle-multi-select-btn { 
            padding: 8px 12px; 
            font-size: 0.9em; 
            margin: 0;
            background-color: var(--button-primary-bg-color);
            color: var(--button-primary-text-color);
            border: 1px solid var(--button-primary-border-color);
            border-radius: 4px;
            cursor: pointer;
        }
        .file-browser-controls .actions-group-left button:hover,
        #toggle-multi-select-btn:hover {
            opacity: 0.9;
        }

        .file-browser-controls .search-form-right { display: flex; align-items: center; gap: 5px; margin-left: auto; flex-shrink: 0; }
        .file-browser-controls .search-form-right input[type="search"] { 
            width: 180px; padding: 8px 10px; font-size: 0.9em; 
            border: 1px solid var(--input-border-color); 
            background-color: var(--input-bg-color);
            color: var(--input-text-color);
            border-radius: 4px; margin: 0; 
        }
        .file-browser-controls .search-form-right button { 
            padding: 8px 12px; font-size: 0.9em; margin: 0;
            background-color: var(--button-primary-bg-color);
            color: var(--button-primary-text-color);
            border: 1px solid var(--button-primary-border-color);
            border-radius: 4px;
        }
        .file-browser-controls .view-toggle { display: flex; gap: 8px; align-items: center; flex-shrink: 0; }
        .file-browser-controls .view-toggle button { 
            padding: 8px 12px; font-size: 0.9em; margin: 0;
            background-color: var(--button-secondary-bg-color);
            color: var(--button-secondary-text-color);
            border: 1px solid var(--button-secondary-border-color);
            border-radius: 4px;
        }
        .file-browser-controls .view-toggle button.active {
            background-color: var(--button-primary-bg-color);
            border-color: var(--button-primary-border-color);
        }

        .file-browser-controls:not(:has(.actions-group-left)) .search-form-right { margin-left: 0; flex-grow: 1; }
        .file-browser-controls:not(:has(.actions-group-left)) .search-form-right input[type="search"] { flex-grow: 1; }
        .file-browser-controls:not(:has(.actions-group-left)) .view-toggle { margin-left: auto; }
        
        .progress-bar-container { width: 100%; background-color: #e9ecef; border-radius: 4px; margin-top: 10px; padding: 2px; display: none; box-sizing: border-box; }
        .dark-theme .progress-bar-container { background-color: #495057; }
        .progress-bar { display: block; width: 0%; height: 20px; background-color: #007bff; border: 1px solid #0056b3; border-radius: 2px; text-align: center; line-height: 18px; color: white; font-size: 0.8em; font-weight: bold; transition: width 0.1s ease-in-out; box-sizing: border-box; overflow: hidden; }
        .dark-theme .progress-bar { background-color: #0056b3; border-color: #003d80; }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>
                <% if (locals.isSearchResult && locals.searchQuery) { %>
                    有關 "<%= searchQuery %>" 的搜尋結果 <% if (locals.viewTargetUsername) { %>(在 <%= viewTargetUsername %> 的文件中)<% } else { %>(在您的文件中)<% } %>
                <% } else if (locals.viewTargetUsername && user.role === 'admin') { %>
                    管理員視角: <%= viewTargetUsername %> 的文件
                <% } else { %>
                    <%= user.username %> 的文件
                <% } %>
            </h1>
            <div class="header-controls">
                <nav>
                    <% if (user.role === 'admin') { %><a href="/admin">管理面板</a><% } %>
                    <a href="/change-password">修改密碼</a>
                    <a href="/logout">登出</a>
                </nav>
                <%- include('partials/theme-switcher') %>
            </div>
        </header>

        <% if (locals.message) { %>
            <p class="message <%= (locals.messageType === 'error' || (locals.message && (message.includes('失敗') || message.includes('错误') || message.includes('沒有選擇文件') || message.includes('無效的') ))) ? 'error-message' : (locals.messageType === 'success' ? '' : (locals.messageType === 'warning' ? 'warning-message' : '') ) %>"><%= message %></p>
        <% } %>

        <% if (!locals.isSearchResult) { %>
            <div class="current-path">
                當前路徑:
                <a href="/files<%= locals.viewTargetUsername && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewTargetUsername) : '' %>">根目錄</a>
                <%
                    let pathSegments = currentPath.split('/').filter(Boolean);
                    let cumulativePathForLink = '';
                    const adminTargetQueryForPath = locals.viewTargetUsername && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewTargetUsername) : '';
                %>
                <% pathSegments.forEach(segment => { %>
                    <% cumulativePathForLink += '/' + segment; %>
                    / <a href="/files?path=<%= encodeURIComponent(cumulativePathForLink) %><%= adminTargetQueryForPath %>"><%= segment %></a>
                <% }); %>
            </div>
        <% } else if (locals.searchQuery) { %>
             <div class="search-results-info">
                正在顯示包含 "<%= searchQuery %>" 的文件。
                <a href="/files<%= locals.viewTargetUsername && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewTargetUsername) : '' %>">清除搜索並返回根目錄</a>
            </div>
        <% } %>

        <div class="file-browser-controls">
            <% if (!locals.isSearchResult && currentPath && currentPath !== '/search-results') { %>
                <div class="actions-group-left">
                    <button type="button" id="show-create-textfile-modal-btn">新建文本文件</button>
                    <button type="button" id="show-create-folder-modal-btn">創建文件夾</button>
                    <button type="button" id="toggleUploadActionsBtn" class="upload-button-main">上傳</button> 
                </div>
            <% } %>
            <button type="button" id="toggle-multi-select-btn">啟用多選</button>
        
            <form action="/files" method="GET" class="control-form search-form-right">
                <% if (locals.viewTargetUsername && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>">
                <% } %>
                <input type="search" name="q" placeholder="搜索..." value="<%= locals.searchQuery || '' %>">
                <button type="submit">搜索</button>
            </form>
        
            <div class="view-toggle">
                <button id="listViewBtn">列表</button>
                <button id="gridViewBtn">網格</button>
            </div>
        </div>
        
        <% if (!locals.isSearchResult && currentPath && currentPath !== '/search-results') { %>
            <div id="upload-actions-container" style="justify-content: flex-start;">
                <button type="button" id="upload-files-btn">上傳文件</button>
                <button type="button" id="upload-folder-btn">上傳文件夾</button>
            </div>

            <div id="upload-section">
                <h2 id="upload-section-title">上傳到 "<%= currentPath === '/' ? '根目錄' : currentPath.split('/').pop() %>"</h2>
                <div id="drop-area">
                    <form id="upload-form" action="/upload" method="POST" enctype="multipart/form-data">
                        <input type="hidden" name="currentPath" value="<%= currentPath %>">
                        <% if (locals.viewTargetUsername && user.role === 'admin') { %><input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>"><% } %>
                        <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                        <input type="file" id="userFiles" name="userFiles" multiple style="display: none;"> 
                        <p id="drop-area-text">將文件或文件夾拖拽到此處，或點擊上方按鈕選擇</p>
                        <button type="submit" id="upload-button">上傳已選項目</button>
                    </form>
                    <div id="file-list-preview" style="margin-top:10px; text-align:left;"></div>
                    <div class="progress-bar-container" id="upload-progress-container">
                        <div class="progress-bar" id="upload-progress-bar">0%</div>
                    </div>
                </div>
            </div>
        <% } %>

        <div id="selection-action-bar">
            <span id="selection-count" style="margin-right: 15px;">已選擇 0 項</span>
            <button id="action-edit-btn" disabled>編輯</button>
            <button id="action-rename-btn" disabled>重命名</button>
            <button id="action-move-btn" disabled>移動</button>
            <button id="action-download-btn" disabled>下載選中項</button>
            <button id="action-delete-btn" class="secondary" disabled>删除</button>
        </div>

        <h2><%= locals.isSearchResult ? '搜索結果' : '文件列表' %></h2>
        <% if (items.length > 0) { %>
            <div id="select-all-container">
                <input type="checkbox" id="select-all-checkbox">
                <label for="select-all-checkbox">全選/取消全選</label>
            </div>
        <% } %>
        <div id="file-container" class="list-view">
            <% if (items.length > 0) { %>
                <% const adminTargetQueryForActions = locals.viewTargetUsername && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewTargetUsername) : ''; %>
                <ul>
                    <% items.forEach(item => { %>
                        <li data-item-path="<%= item.path %>">
                            <div class="file-entry-selectable">
                                <input type="checkbox" class="item-checkbox"
                                       data-path="<%= item.path %>"
                                       data-encoded-path="<%= item.encodedPath %>"
                                       data-name="<%= item.name %>"
                                       data-encoded-name="<%= item.encodedName %>"
                                       data-is-dir="<%= item.isDir %>"
                                       data-raw-name="<%= item.name.replace(/'/g, '\\\'').replace(/"/g, '&quot;') %>">
                                <div class="file-content-wrapper">
                                    <% if (item.isDir) { %>
                                        <div class="file-entry">
                                            <span class="file-icon-large folder-icon">📁</span>
                                            <a href="/files?path=<%= item.encodedPath %><%= adminTargetQueryForActions %>" class="file-name"><%= item.name %></a>
                                            <% if (locals.isSearchResult) { %><span class="file-location-in-search">(位於: <%= (item.path.substring(0, item.path.lastIndexOf('/')) || '/') %>)</span><% } %>
                                        </div>
                                    <% } else { %>
                                        <div class="file-entry">
                                            <%
                                                const ext = item.name.includes('.') ? item.name.substring(item.name.lastIndexOf('.') + 1).toLowerCase() : '';
                                                let largeIcon = '📄'; 
                                                let isViewableTextFile = false;
                                                if (ALLOWED_TEXT_EXTENSIONS.includes('.' + ext) || ALLOWED_TEXT_EXTENSIONS.includes(ext)) {
                                                    isViewableTextFile = true;
                                                    largeIcon = '📝';
                                                }
                                                else if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'].includes(ext)) { largeIcon = '🖼️'; }
                                                else if (['pdf'].includes(ext)) { largeIcon = '📕';}
                                                // ... 其他圖標邏輯 ...
                                            %>
                                            <span class="file-icon-large"><%= largeIcon %></span>
                                            <% if (isViewableTextFile) { %>
                                                <a href="/view?path=<%= item.encodedPath %><%= adminTargetQueryForActions %>" class="file-name" title="點擊查看"><%= item.name %></a>
                                            <% } else { %>
                                                <span class="file-name"><%= item.name %></span>
                                            <% } %>
                                            <% if (locals.isSearchResult) { %><span class="file-location-in-search">(位於: <%= (item.path.substring(0, item.path.lastIndexOf('/')) || '/') %>)</span><% } %>
                                        </div>
                                    <% } %>
                                    <span class="file-actions-placeholder"></span>
                                </div>
                            </div>
                             <div class="rename-form" id="rename-form-<%= item.encodedName %>">
                                <form action="/rename" method="POST" class="control-form inline-form">
                                    <input type="hidden" name="currentPath" value="<%= locals.isSearchResult ? (item.path.substring(0, item.path.lastIndexOf('/')) || '/') : currentPath %>">
                                    <input type="hidden" name="oldPath" value="<%= item.path %>">
                                    <input type="hidden" name="isDir" value="<%= item.isDir %>">
                                    <% if (locals.viewTargetUsername && user.role === 'admin') { %><input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>"><% } %>
                                    <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                                    <input type="text" name="newName" placeholder="新名稱" value="<%= item.name %>" required>
                                    <button type="submit">確認</button>
                                    <button type="button" class="secondary" onclick="hideRenameForm('<%= item.encodedName %>'); return false;">取消</button>
                                </form>
                            </div>
                        </li>
                    <% }) %>
                </ul>
            <% } else { %>
                <p><%= locals.isSearchResult ? '找不到符合條件的文件。' : '此文件夾為空。' %></p>
            <% } %>
        </div>
    </div>

    <div id="create-item-modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-create-item-modal-btn">&times;</span>
            <h3 id="create-item-modal-title">创建新项目</h3>
            <form id="create-item-form" method="POST"> 
                <input type="hidden" name="currentPath" value="<%= currentPath %>">
                <% if (locals.viewTargetUsername && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>">
                <% } %>
                <% if (locals.csrfToken) { %>
                    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                <% } %>
                <div class="form-group">
                    <label for="create-item-name-input" id="create-item-name-label">名称:</label>
                    <input type="text" id="create-item-name-input" name="" required> 
                </div>
                <div class="modal-actions">
                    <button type="button" class="secondary" id="cancel-create-item-btn">取消</button>
                    <button type="submit" id="confirm-create-item-btn">确认创建</button>
                </div>
            </form>
        </div>
    </div>

    <div id="move-modal">
        <div class="modal-content"> <span class="close-modal-btn" id="close-move-modal-btn">&times;</span>
            <h3>移動選中項目到:</h3>
            <div id="directory-tree-container">
                <p>正在加載目錄...</p>
            </div>
            <p>已選擇目標: <strong id="selected-destination-path">無</strong></p>
            <input type="hidden" id="move-destination-input" value="">
            <div class="modal-actions"> <button type="button" class="secondary" id="cancel-move-btn">取消</button>
                <button id="confirm-move-btn" disabled>確認移動</button>
            </div>
        </div>
    </div>

    <div id="overwrite-confirm-modal" class="modal" style="display:none; z-index: 1002;">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-overwrite-modal-btn">&times;</span>
            <h3>確認操作</h3>
            <p id="overwrite-message">一個同名項目已存在。您要覆蓋它嗎？</p>
            <div class="modal-actions">
                <button type="button" class="secondary" id="overwrite-abandon-btn">放棄</button>
                <button type="button" id="overwrite-confirm-btn">覆蓋</button>
            </div>
        </div>
    </div>


    <script src="/theme.js"></script>
    <script>
        const ALLOWED_TEXT_EXTENSIONS = <%- JSON.stringify(locals.ALLOWED_TEXT_EXTENSIONS || []) %>;
        const CSRF_TOKEN = "<%= locals.csrfToken || '' %>";
        const VIEW_TARGET_USERNAME = "<%= locals.viewTargetUsername || '' %>";
        const CURRENT_USER_ROLE = "<%= user.role %>";
        const CURRENT_PATH_ON_LOAD = "<%= currentPath %>";
        const IS_SEARCH_RESULT_VIEW = <%= locals.isSearchResult || false %>;
        const EXISTING_ITEM_NAMES_ON_PAGE = <%- JSON.stringify(items.map(item => item.name.toLowerCase())) %>;
        const HAS_ITEMS_ON_PAGE = <%= items.length > 0 %>;

        document.addEventListener('DOMContentLoaded', () => {
            const fileContainer = document.getElementById('file-container');
            const selectAllCheckbox = document.getElementById('select-all-checkbox');
            const selectAllContainer = document.getElementById('select-all-container');
            const selectionActionBar = document.getElementById('selection-action-bar');
            const selectionCountDisplay = document.getElementById('selection-count');
            const actionEditBtn = document.getElementById('action-edit-btn');
            const actionRenameBtn = document.getElementById('action-rename-btn');
            const actionMoveBtn = document.getElementById('action-move-btn');
            const actionDownloadBtn = document.getElementById('action-download-btn');
            const actionDeleteBtn = document.getElementById('action-delete-btn');
            
            const moveModal = document.getElementById('move-modal');
            const closeMoveModalBtn = document.getElementById('close-move-modal-btn');
            const directoryTreeContainer = document.getElementById('directory-tree-container');
            const confirmMoveBtn = document.getElementById('confirm-move-btn');
            const cancelMoveBtn = document.getElementById('cancel-move-btn');
            const selectedDestinationPathDisplay = document.getElementById('selected-destination-path');
            const moveDestinationInput = document.getElementById('move-destination-input');
            let currentDirectoryTree = [];

            const toggleUploadActionsBtn = document.getElementById('toggleUploadActionsBtn');
            const uploadActionsContainer = document.getElementById('upload-actions-container');
            const uploadFilesBtn = document.getElementById('upload-files-btn');
            const uploadFolderBtn = document.getElementById('upload-folder-btn');
            const uploadSection = document.getElementById('upload-section');
            const userFilesInput = document.getElementById('userFiles');
            const dropAreaText = document.getElementById('drop-area-text');
            const uploadForm = document.getElementById('upload-form');
            const uploadProgressContainer = document.getElementById('upload-progress-container');
            const uploadProgressBar = document.getElementById('upload-progress-bar');
            const fileListPreview = document.getElementById('file-list-preview');
            const uploadButton = document.getElementById('upload-button'); 
            const dropArea = document.getElementById('drop-area');

            const overwriteModal = document.getElementById('overwrite-confirm-modal');
            const overwriteMessage = document.getElementById('overwrite-message');
            const overwriteConfirmBtn = document.getElementById('overwrite-confirm-btn');
            const overwriteAbandonBtn = document.getElementById('overwrite-abandon-btn');
            const closeOverwriteModalBtn = document.getElementById('close-overwrite-modal-btn');

            const toggleMultiSelectBtn = document.getElementById('toggle-multi-select-btn');
            let multiSelectModeActive = false;
            let currentSingleSelectedItem = null;

            function cleanupUploadUI() {
                if (uploadProgressContainer) uploadProgressContainer.style.display = 'none';
                if (fileListPreview) fileListPreview.innerHTML = '';
                if (uploadButton) uploadButton.style.display = 'none';
                if (userFilesInput) userFilesInput.value = null; 
                if (uploadForm) delete uploadForm.dataset.emptyDroppedFolderName; 
            }

            function clearSingleSelection() {
                if (currentSingleSelectedItem && currentSingleSelectedItem.element) {
                    currentSingleSelectedItem.element.classList.remove('single-selected-item');
                }
                currentSingleSelectedItem = null;
            }

            function updateMultiSelectModeUI() {
                if (!fileContainer || !toggleMultiSelectBtn) return;
                if (multiSelectModeActive) {
                    clearSingleSelection(); 
                    fileContainer.classList.add('multi-select-mode-active');
                    toggleMultiSelectBtn.textContent = '取消多選';
                    if (selectAllContainer && HAS_ITEMS_ON_PAGE) {
                        selectAllContainer.style.display = 'flex';
                    }
                } else {
                    fileContainer.classList.remove('multi-select-mode-active');
                    toggleMultiSelectBtn.textContent = '啟用多選';
                    if (selectAllContainer) selectAllContainer.style.display = 'none';
                    document.querySelectorAll('.item-checkbox:checked').forEach(cb => cb.checked = false);
                    if (selectAllCheckbox) selectAllCheckbox.checked = false;
                }
                updateSelectionActions();
            }
            
            if (toggleMultiSelectBtn) {
                toggleMultiSelectBtn.addEventListener('click', () => {
                    multiSelectModeActive = !multiSelectModeActive;
                    updateMultiSelectModeUI();
                });
            }

            function getCheckboxSelectedItems() {
                const selected = [];
                document.querySelectorAll('.item-checkbox:checked').forEach((cb) => {
                    selected.push({
                        path: cb.dataset.path, encodedPath: cb.dataset.encodedPath,
                        name: cb.dataset.name, encodedName: cb.dataset.encodedName,
                        isDir: cb.dataset.isDir === 'true', rawName: cb.dataset.rawName,
                        element: cb.closest('li')
                    });
                });
                return selected;
            }

            function updateSelectionActions() {
                let count = 0;
                let itemsForActions = []; 
                let isSingleFileEditable = false;

                if (multiSelectModeActive) {
                    const checkboxSelectedItems = getCheckboxSelectedItems();
                    count = checkboxSelectedItems.length;
                    itemsForActions = checkboxSelectedItems;
                    if (count === 1 && itemsForActions[0] && !itemsForActions[0].isDir) {
                        const fileName = itemsForActions[0].name;
                        const fileExt = fileName.includes('.') ? fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase() : '';
                        if (ALLOWED_TEXT_EXTENSIONS.includes('.' + fileExt) || ALLOWED_TEXT_EXTENSIONS.includes(fileExt)) {
                            isSingleFileEditable = true;
                        }
                    }
                } else if (currentSingleSelectedItem) {
                    count = 1;
                    itemsForActions.push(currentSingleSelectedItem);
                    if (!currentSingleSelectedItem.isDir) {
                        const fileName = currentSingleSelectedItem.name;
                        const fileExt = fileName.includes('.') ? fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase() : '';
                         if (ALLOWED_TEXT_EXTENSIONS.includes('.' + fileExt) || ALLOWED_TEXT_EXTENSIONS.includes(fileExt)) {
                            isSingleFileEditable = true;
                        }
                    }
                }

                if (selectionActionBar) { // Ensure selectionActionBar exists
                    selectionActionBar.style.display = count > 0 ? 'flex' : 'none';
                    if (count > 0 && selectionCountDisplay) selectionCountDisplay.textContent = `已選擇 ${count} 項`;
                }
                
                if(actionEditBtn) actionEditBtn.disabled = !(count === 1 && isSingleFileEditable);
                if(actionRenameBtn) actionRenameBtn.disabled = !(count === 1);
                if(actionMoveBtn) actionMoveBtn.disabled = !(count > 0);
                if(actionDownloadBtn) actionDownloadBtn.disabled = !(count > 0);
                if(actionDeleteBtn) actionDeleteBtn.disabled = !(count > 0);
            }

            document.querySelectorAll('.item-checkbox').forEach((checkbox) => {
                checkbox.addEventListener('change', () => {
                    if (multiSelectModeActive) { 
                        clearSingleSelection(); 
                        updateSelectionActions(); 
                    } else {
                        checkbox.checked = false;
                    }
                });
            });
            
            if (selectAllCheckbox && selectAllContainer) {
                selectAllCheckbox.addEventListener('change', (e) => {
                    if (!multiSelectModeActive) return; 
                    clearSingleSelection(); 
                    document.querySelectorAll('.item-checkbox').forEach(cb => {
                        if (cb.checked !== e.target.checked) cb.checked = e.target.checked;
                    });
                    updateSelectionActions(); 
                });
            }

            if (fileContainer) { // Ensure fileContainer exists
                fileContainer.querySelectorAll('ul > li .file-content-wrapper').forEach(contentWrapper => {
                    contentWrapper.addEventListener('click', (event) => {
                        const listItem = contentWrapper.closest('li');
                        if (!listItem) return; // Should not happen if structure is correct
                        const checkbox = listItem.querySelector('.item-checkbox');
                        if (!checkbox) return; // Should not happen

                        if (event.target.isSameNode(checkbox) || event.target.tagName === 'A' || event.target.closest('a') || event.target.closest('.rename-form')) return;

                        const itemData = {
                            path: checkbox.dataset.path, encodedPath: checkbox.dataset.encodedPath,
                            name: checkbox.dataset.name, encodedName: checkbox.dataset.encodedName,
                            isDir: checkbox.dataset.isDir === 'true', rawName: checkbox.dataset.rawName,
                            element: listItem 
                        };

                        if (multiSelectModeActive) { 
                            multiSelectModeActive = false; 
                            updateMultiSelectModeUI(); 
                        }
                        
                        if (currentSingleSelectedItem && currentSingleSelectedItem.element === listItem) {
                            clearSingleSelection();
                        } else {
                            clearSingleSelection(); 
                            currentSingleSelectedItem = itemData;
                            listItem.classList.add('single-selected-item');
                        }
                        updateSelectionActions();
                    });
                });
            
                fileContainer.addEventListener('click', (event) => {
                    if (event.target.isSameNode(fileContainer) || (event.target.tagName === 'UL' && event.target.parentNode.isSameNode(fileContainer))) {
                        if (!multiSelectModeActive) { 
                            clearSingleSelection();
                            updateSelectionActions(); 
                        }
                    }
                });
            }
            
            // --- 操作按鈕的事件監聽器 (保持不變) ---
            if (actionEditBtn) actionEditBtn.addEventListener('click', () => { /* ... */ });
            if (actionRenameBtn) actionRenameBtn.addEventListener('click', () => { /* ... */ });
            if (actionDownloadBtn) actionDownloadBtn.addEventListener('click', () => { /* ... */ });
            if (actionDeleteBtn) actionDeleteBtn.addEventListener('click', async () => { /* ... */ });
            if (actionMoveBtn) actionMoveBtn.addEventListener('click', async () => { /* ... */ });
            function renderDirectoryTree(nodes, container, itemsToMovePaths, currentLevelPath = '/') { /* ... */ }
            function selectDestination(targetElement, path) { /* ... */ }
            if (closeMoveModalBtn) closeMoveModalBtn.onclick = () => moveModal.style.display = 'none';
            if (cancelMoveBtn) cancelMoveBtn.onclick = () => moveModal.style.display = 'none';
            if (confirmMoveBtn) confirmMoveBtn.addEventListener('click', async () => { /* ... */ });
            function showOverwriteConfirmationModal(itemName) { /* ... (保持不變，返回 Promise) ... */ }

            if (toggleUploadActionsBtn && uploadActionsContainer && uploadSection) {
                toggleUploadActionsBtn.addEventListener('click', () => {
                    const isActionsHidden = uploadActionsContainer.style.display === 'none' || uploadActionsContainer.style.display === '';
                    uploadActionsContainer.style.display = isActionsHidden ? 'flex' : 'none';
                    if (!isActionsHidden) { 
                        uploadSection.style.display = 'none'; 
                        toggleUploadActionsBtn.textContent = '上傳';
                    } else { 
                        toggleUploadActionsBtn.textContent = '取消上傳操作';
                    }
                    cleanupUploadUI();
                });
            }

            if (uploadFilesBtn && userFilesInput && uploadSection && dropAreaText && toggleUploadActionsBtn) {
                uploadFilesBtn.addEventListener('click', () => {
                    if (uploadForm) delete uploadForm.dataset.emptyDroppedFolderName; 
                    userFilesInput.removeAttribute('webkitdirectory');
                    userFilesInput.removeAttribute('directory');
                    userFilesInput.setAttribute('multiple', '');
                    dropAreaText.textContent = '將文件拖拽到此處進行上傳。';
                    uploadSection.style.display = 'block';
                    toggleUploadActionsBtn.textContent = '取消上傳操作';
                    cleanupUploadUI();
                    userFilesInput.click(); 
                });
            }

            if (uploadFolderBtn && userFilesInput && uploadSection && dropAreaText && toggleUploadActionsBtn) {
                uploadFolderBtn.addEventListener('click', () => {
                    if (uploadForm) delete uploadForm.dataset.emptyDroppedFolderName; 
                    userFilesInput.setAttribute('webkitdirectory', '');
                    userFilesInput.setAttribute('directory', '');
                    userFilesInput.removeAttribute('multiple');
                    dropAreaText.textContent = '將文件夾拖拽到此處進行上傳。';
                    uploadSection.style.display = 'block';
                    toggleUploadActionsBtn.textContent = '取消上傳操作';
                    cleanupUploadUI();
                    console.log("CLIENT: '上傳文件夾' 按鈕被點擊，input 屬性已設置。");
                    userFilesInput.click();
                });
            }
            
            // 處理上傳表單提交 (恢復到發送 webkitRelativePath 作為 formData 第三參數的版本)
            if (uploadForm && userFilesInput) {
                uploadForm.addEventListener('submit', async function(event) { 
                    event.preventDefault(); 
                    console.log("CLIENT: Upload form submitted.");
                    
                    const isAttemptingEmptyDroppedFolderUpload = !!uploadForm.dataset.emptyDroppedFolderName;
                    const filesFromInput = Array.from(userFilesInput.files);
                    console.log("CLIENT: Files from input for submission:", filesFromInput.map(f => ({name: f.name, webkitRelativePath: f.webkitRelativePath})));
                    
                    if (!isAttemptingEmptyDroppedFolderUpload && filesFromInput.length === 0) {
                        alert('請選擇要上傳的文件或文件夾。');
                        cleanupUploadUI(); return;
                    }

                    let filesToActuallyUpload = [];
                    let folderNameToCreateIfEmpty = null;
                    let proceedWithOperation = true;

                    if (isAttemptingEmptyDroppedFolderUpload) {
                        folderNameToCreateIfEmpty = uploadForm.dataset.emptyDroppedFolderName;
                        if (EXISTING_ITEM_NAMES_ON_PAGE.includes(folderNameToCreateIfEmpty.toLowerCase())) {
                            const userDecision = await showOverwriteConfirmationModal(folderNameToCreateIfEmpty);
                            if (userDecision === 'abandon') {
                                alert(`已放棄創建已存在的空文件夾 "${folderNameToCreateIfEmpty}"。`);
                                proceedWithOperation = false;
                            }
                        }
                    } else {
                        const topLevelItems = new Map();
                        for (const file of filesFromInput) {
                            let topLevelName = file.name;
                            if (file.webkitRelativePath && file.webkitRelativePath.includes('/')) {
                                topLevelName = file.webkitRelativePath.split('/')[0];
                            }
                            if (!topLevelItems.has(topLevelName)) {
                                topLevelItems.set(topLevelName, { files: [], userDecision: 'upload' });
                            }
                            topLevelItems.get(topLevelName).files.push(file);
                        }

                        for (const [name, item] of topLevelItems) {
                            if (EXISTING_ITEM_NAMES_ON_PAGE.includes(name.toLowerCase())) {
                                const userDecision = await showOverwriteConfirmationModal(name);
                                item.userDecision = userDecision;
                                if (userDecision === 'abandon') console.log(`用戶放棄上傳/覆蓋 "${name}"。`);
                            }
                        }
                        for (const item of topLevelItems.values()) {
                            if (item.userDecision === 'upload' || item.userDecision === 'overwrite') {
                                filesToActuallyUpload.push(...item.files);
                            }
                        }
                        if (filesToActuallyUpload.length === 0 && filesFromInput.length > 0) { // 只有在用戶確實選擇了文件但全部放棄時才提示
                             alert('沒有文件被選中上傳，或者所有衝突的文件都已被放棄。');
                             proceedWithOperation = false;
                        } else if (filesToActuallyUpload.length === 0 && filesFromInput.length === 0 && !isAttemptingEmptyDroppedFolderUpload){
                            // 如果一開始就沒有文件，並且不是空文件夾上傳嘗試，則不提示 (由頂部檢查處理)
                            proceedWithOperation = false;
                        }
                    }

                    if (!proceedWithOperation) { cleanupUploadUI(); return; }
                    
                    if (folderNameToCreateIfEmpty) {
                        // ... (創建空文件夾的邏輯，保持不變) ...
                        const createFolderData = new FormData();
                        createFolderData.append('folderName', folderNameToCreateIfEmpty);
                        createFolderData.append('currentPath', uploadForm.querySelector('input[name="currentPath"]').value);
                        if (CSRF_TOKEN) createFolderData.append('_csrf', CSRF_TOKEN);
                        const targetUsernameInputVal = uploadForm.querySelector('input[name="targetUsername"]');
                        if (targetUsernameInputVal && targetUsernameInputVal.value) {
                            createFolderData.append('targetUsername', targetUsernameInputVal.value);
                        }
                        try {
                            const response = await fetch('/create-folder', { method: 'POST', body: createFolderData });
                            if (response.ok && response.redirected) { window.location.href = response.url; }
                            else { /* ... error handling ... */ }
                        } catch (err) { /* ... error handling ... */ }

                    } else if (filesToActuallyUpload.length > 0) {
                        const formData = new FormData();
                        const currentPathInput = uploadForm.querySelector('input[name="currentPath"]');
                        if (currentPathInput) formData.append('currentPath', currentPathInput.value);
                        const targetUsernameInput = uploadForm.querySelector('input[name="targetUsername"]');
                        if (targetUsernameInput && targetUsernameInput.value) formData.append('targetUsername', targetUsernameInput.value);
                        const csrfInput = uploadForm.querySelector('input[name="_csrf"]');
                        if (csrfInput) formData.append('_csrf', csrfInput.value);

                        console.log("CLIENT: Preparing to append files to FormData for XHR.");
                        for (const file of filesToActuallyUpload) {
                            // **恢復為原始的 formData.append 方式**
                            const thirdArg = file.webkitRelativePath || file.name;
                            console.log(`CLIENT: Appending to FormData: name="${file.name}", webkitRelativePath="${file.webkitRelativePath}", third_arg_to_append="${thirdArg}"`);
                            formData.append('userFiles', file, thirdArg);
                        }

                        const xhr = new XMLHttpRequest();
                        xhr.open('POST', uploadForm.action, true);
                        // ... (XHR 事件監聽器，保持不變) ...
                        xhr.upload.onprogress = function(event) { /* ... */ };
                        xhr.onload = function() { /* ... */ cleanupUploadUI(); };
                        xhr.onerror = function(e) { /* ... */ cleanupUploadUI(); };
                        xhr.openUrl = uploadForm.action; 
                        console.log("CLIENT: Sending XHR with FormData.");
                        xhr.send(formData);
                    }
                });
            }

            // 處理文件/文件夾拖拽 (保持不變，確保 updateFileListPreviewOnDrop 中的日誌仍然有效)
            if (dropArea && userFilesInput && fileListPreview && uploadSection && dropAreaText && uploadActionsContainer && toggleUploadActionsBtn) { 
                // ... (拖拽邏輯，保持不變) ...
                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => { /* ... */ });
                function preventDefaults(e) { /* ... */ }
                ['dragenter', 'dragover'].forEach(eventName => { /* ... */ });
                ['dragleave', 'drop'].forEach(eventName => { /* ... */ });
                dropArea.addEventListener('drop', (e) => { /* ... (確保日誌有效) ... */ });
                
                userFilesInput.addEventListener('change', () => {
                     if (uploadForm) delete uploadForm.dataset.emptyDroppedFolderName;
                     console.log("CLIENT: userFilesInput 'change' event fired. Files in input:", userFilesInput.files);
                     if (userFilesInput.files && userFilesInput.files.length > 0) {
                         for (let i = 0; i < userFilesInput.files.length; i++) {
                             console.log(`CLIENT: File ${i} from 'change' event - name: ${userFilesInput.files[i].name}, webkitRelativePath: ${userFilesInput.files[i].webkitRelativePath}, size: ${userFilesInput.files[i].size}`);
                         }
                     }
                     updateFileListPreviewOnDrop();
                }); 
                
                function updateFileListPreviewOnDrop(emptyDroppedFolderName = null) { 
                    if (!fileListPreview || !userFilesInput || !uploadButton) return;
                    fileListPreview.innerHTML = '';
                    const isDirectoryModeInput = userFilesInput.hasAttribute('webkitdirectory');
                    console.log("CLIENT: updateFileListPreviewOnDrop - isDirectoryModeInput:", isDirectoryModeInput, "emptyDroppedFolderName:", emptyDroppedFolderName, "userFilesInput.files.length:", userFilesInput.files ? userFilesInput.files.length : 0);

                    if (userFilesInput.files && userFilesInput.files.length > 0) {
                        // ... (預覽邏輯，保持不變) ...
                        uploadButton.style.display = 'inline-block';
                    } else if (emptyDroppedFolderName) {
                        // ... (空文件夾預覽邏輯，保持不變) ...
                        uploadButton.style.display = 'inline-block'; 
                    } else if (isDirectoryModeInput) { 
                         fileListPreview.innerHTML = '<p style="font-size:0.9em; color: #dc3545;">提示：无法通过文件对话框直接上传选中的空文件夹。请使用“创建文件夹”功能，或将空文件夹拖拽到此区域进行上传。</p>';
                         uploadButton.style.display = 'none';
                    } else { 
                        uploadButton.style.display = 'none';
                    }
                    if (userFilesInput && uploadButton && userFilesInput.files && userFilesInput.files.length === 0 && !(uploadForm && uploadForm.dataset.emptyDroppedFolderName)) {
                         uploadButton.style.display = 'none';
                    }
                }
            }

            const listViewBtn = document.getElementById('listViewBtn');
            const gridViewBtn = document.getElementById('gridViewBtn');
            if (fileContainer && listViewBtn && gridViewBtn) { 
                function toggleView(viewType) {
                    const isCurrentlyMultiSelect = fileContainer.classList.contains('multi-select-mode-active');
                    if (viewType === 'grid') {
                        fileContainer.className = 'grid-view'; 
                        gridViewBtn.classList.add('active');
                        listViewBtn.classList.remove('active');
                        localStorage.setItem('fileView', 'grid');
                    } else { 
                        fileContainer.className = 'list-view'; 
                        listViewBtn.classList.add('active');
                        gridViewBtn.classList.remove('active');
                        localStorage.setItem('fileView', 'list');
                    }
                    if (isCurrentlyMultiSelect) { 
                        fileContainer.classList.add('multi-select-mode-active');
                    }
                }
                const preferredView = localStorage.getItem('fileView') || 'list'; 
                toggleView(preferredView); 
                listViewBtn.addEventListener('click', () => toggleView('list'));
                gridViewBtn.addEventListener('click', () => toggleView('grid'));
            }

            const createItemModal = document.getElementById('create-item-modal');
            const closeCreateItemModalBtn = document.getElementById('close-create-item-modal-btn');
            const cancelCreateItemBtn = document.getElementById('cancel-create-item-btn');
            const createItemForm = document.getElementById('create-item-form');
            const createItemModalTitle = document.getElementById('create-item-modal-title');
            const createItemNameInput = document.getElementById('create-item-name-input');
            const createItemNameLabel = document.getElementById('create-item-name-label');
            const showCreateTextfileModalBtn = document.getElementById('show-create-textfile-modal-btn');
            const showCreateFolderModalBtn = document.getElementById('show-create-folder-modal-btn');

            function openCreateItemModal(type) { /* ... (保持不變) ... */ }
            if (showCreateTextfileModalBtn) showCreateTextfileModalBtn.addEventListener('click', () => openCreateItemModal('textfile'));
            if (showCreateFolderModalBtn) showCreateFolderModalBtn.addEventListener('click', () => openCreateItemModal('folder'));
            if (closeCreateItemModalBtn) closeCreateItemModalBtn.onclick = () => createItemModal.style.display = 'none';
            if (cancelCreateItemBtn) cancelCreateItemBtn.onclick = () => createItemModal.style.display = 'none';
            window.addEventListener('click', (event) => { /* ... (保持不變) ... */ });

            updateMultiSelectModeUI(); 
            updateSelectionActions(); 
        }); 

        function showRenameForm(encodedName, currentName, isDir) { /* ... (保持不變) ... */ }
        function hideRenameForm(encodedName) { /* ... (保持不變) ... */ }
    </script>
</body>
</html>
