<%# views/files.ejs %>
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= locals.pageTitle || ( (locals.viewContextUser ? viewContextUser.username : user.username) + ' 的文件') %> - 網路硬碟</title>
    <link rel="stylesheet" href="/style.css">
    <link id="theme-stylesheet" rel="stylesheet" href="">
    <style>
    :root {
        --button-primary-bg-color: #007bff;
        --button-primary-text-color: #ffffff;
        --button-primary-border-color: #007bff;
        --button-secondary-bg-color: #6c757d;
        --button-secondary-text-color: #ffffff;
        --button-secondary-border-color: #6c757d;
        --input-border-color: #ccc;
        --input-bg-color: #fff;
        --input-text-color: #333;
        --modal-bg: #ffffff;
        --modal-text-color: #333;
        --modal-border-color: #888;
        --video-modal-bg: #1c1c1c;
        --video-modal-text-color: #f1f1f1;
        --video-modal-border-color: #333;
        --video-modal-close-btn-color: #aaa;
        --video-modal-close-btn-hover-color: #fff;
        --tab-inactive-bg: #e9ecef;
        --tab-inactive-text: #495057;
        --tab-active-bg: #007bff;
        --tab-active-text: #ffffff;
        --tab-border: #dee2e6;
        --link-color: #007bff;
        --link-hover-color: #0056b3;
        --public-link-display-bg: #f8f9fa;
        --public-link-display-border: #ced4da;
        --action-bar-bg: #f0f0f0;
        --action-bar-border: #ccc;
        --hover-bg: #f0f0f0;
    }

    .dark-theme {
        --button-primary-bg-color: #0056b3;
        --button-primary-border-color: #0056b3;
        --button-secondary-bg-color: #5a6268;
        --button-secondary-border-color: #545b62;
        --input-border-color: #555;
        --input-bg-color: #2c2c2c;
        --input-text-color: #e0e0e0;
        --modal-bg: #2c2c2c;
        --modal-text-color: #e0e0e0;
        --modal-border-color: #555;
        --video-modal-bg: #2a2a2a;
        --video-modal-text-color: #e0e0e0;
        --video-modal-border-color: #444;
        --video-modal-close-btn-color: #bbb;
        --video-modal-close-btn-hover-color: #fff;
        --tab-inactive-bg: #3a3a3a;
        --tab-inactive-text: #adb5bd;
        --tab-active-bg: #0056b3;
        --tab-border: #495057;
        --link-color: #6cb2eb;
        --link-hover-color: #8dc9f0;
        --public-link-display-bg: #2c2c2c;
        --public-link-display-border: #495057;
        --action-bar-bg: #252525;
        --action-bar-border: #444;
        --hover-bg: #4a4a4a;
    }

    .nav-tabs { display: flex; margin-bottom: 15px; border-bottom: 1px solid var(--tab-border); }
    .nav-tabs .nav-link { padding: 10px 15px; text-decoration: none; background-color: var(--tab-inactive-bg); color: var(--tab-inactive-text); border: 1px solid var(--tab-border); border-bottom: none; margin-right: 5px; border-radius: 5px 5px 0 0; font-weight: 500; cursor: pointer; }
    .nav-tabs .nav-link.active { background-color: var(--tab-active-bg); color: var(--tab-active-text); border-color: var(--tab-active-bg); }
    .nav-tabs .nav-link:hover:not(.active) { opacity: 0.8; }

    #selection-action-bar, #public-link-selection-action-bar {
        padding: 10px;
        background-color: var(--action-bar-bg);
        border-bottom: 1px solid var(--action-bar-border);
        margin-bottom: 15px;
        display: none;
        flex-wrap: wrap;
        gap: 10px;
        align-items: center;
    }
    #selection-action-bar button, #public-link-selection-action-bar button { margin: 0; }

    .item-checkbox, .public-link-checkbox {
        display: none;
        margin-right: 10px;
        width: 18px;
        height: 18px;
        vertical-align: middle;
    }
    #file-container.multi-select-mode-active .item-checkbox,
    #file-container.multi-select-mode-active .public-link-checkbox {
        display: inline-block;
    }

    .file-entry-selectable { display: flex; align-items: center; width: 100%; }
    #file-container.list-view .file-entry-selectable { padding: 5px 0; }
    #file-container.grid-view .file-entry-selectable { padding: 0; flex-direction: column; height: 100%; }

    .file-content-wrapper { flex-grow: 1; display: flex; justify-content: space-between; align-items: center; cursor: pointer; overflow: hidden; width: 100%; }
    #file-container.grid-view .file-content-wrapper { flex-direction: column; justify-content: flex-start; text-align: center; }

    .list-view li { position: relative; }
    .list-view .file-entry { display: flex; align-items: center; gap: 8px; flex-grow: 1; min-width: 0; }
    .list-view .file-entry .file-name { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; flex-shrink: 1; }

    .list-view .file-details { display: flex; align-items: center; gap: 15px; font-size: 0.85em; color: #555; margin-left: auto; padding-left: 10px; white-space: nowrap; flex-shrink: 0; }
    .dark-theme .list-view .file-details { color: #bbb; }
    .list-view .file-details .file-size,
    .list-view .file-details .file-modified,
    .list-view .file-details .file-public-link,
    .list-view .file-details .file-created-at {
        min-width: 80px; text-align: right;
    }
    .list-view .file-details .file-public-link a { color: var(--link-color); text-decoration: none; }
    .list-view .file-details .file-public-link a:hover { color: var(--link-hover-color); text-decoration: underline; }

    #file-container.grid-view .file-details { display: none; }

    .list-view .file-actions-placeholder { min-width: 40px; text-align: right; font-size: 0.9em; color: #666; flex-shrink: 0; }
    .dark-theme .list-view .file-actions-placeholder { color: #aaa; }

    .list-view li.single-selected-item > .file-entry-selectable,
    .grid-view li.single-selected-item { background-color: #e9e9e9; border-radius: 4px; }
    .dark-theme .list-view li.single-selected-item > .file-entry-selectable,
    .dark-theme .grid-view li.single-selected-item { background-color: #404040; }

    .modal {
        display: none; position: fixed; z-index: 1001; left: 0; top: 0; width: 100%; height: 100%;
        overflow: auto; background-color: rgba(0,0,0,0.5);
    }
    #move-modal, #create-item-modal, #overwrite-confirm-modal, #video-player-modal, #share-modal, #public-link-display-modal, #existing-links-modal, #rename-item-modal {
        /* Inherits .modal styles */
    }
    div.modal .modal-content {
        background-color: var(--modal-bg);
        color: var(--modal-text-color); margin: 10% auto; padding: 20px; border: 1px solid var(--modal-border-color); border-radius: 8px; width: 90%; max-width: 500px; box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    }
    .modal-content h3 { margin-top: 0; }
    .modal-content .form-group { margin-bottom: 15px; }
    .modal-content .form-group label { display: block; margin-bottom: 5px; font-weight: 500; }
    .modal-content .form-group input[type="text"],
    .modal-content .form-group input[type="email"],
    .modal-content .form-group input[type="url"] {
        width: 100%; padding: 10px; box-sizing: border-box;
        border: 1px solid var(--input-border-color); border-radius: 4px;
        background-color: var(--input-bg-color); color: var(--input-text-color);
    }
    .modal-actions { text-align: right; margin-top: 20px; display: flex; gap: 10px; justify-content: flex-end; }

    #video-player-modal .modal-content { background-color: var(--video-modal-bg) !important; color: var(--video-modal-text-color); border-color: var(--video-modal-border-color); max-width: 900px; margin: 5% auto; }
    #video-player-modal #video-modal-title { color: var(--video-modal-text-color); margin-bottom: 15px; }
    #video-player-modal .close-modal-btn { color: var(--video-modal-close-btn-color); }
    #video-player-modal .close-modal-btn:hover,
    #video-player-modal .close-modal-btn:focus { color: var(--video-modal-close-btn-hover-color); text-decoration: none; cursor: pointer; }
    #html5-video-player { width: 100%; max-height: 75vh; display: block; margin-top: 10px; background-color: #000; border-radius: 4px; }

    #public-link-display-modal .modal-content, #existing-links-modal .modal-content { max-width: 600px; }
    #generated-public-link {
        width: calc(100% - 85px);
        padding: 10px;
        border: 1px solid var(--public-link-display-border);
        background-color: var(--public-link-display-bg);
        border-radius: 4px 0 0 4px;
        font-family: monospace;
        font-size: 0.9em;
        box-sizing: border-box;
        color: var(--input-text-color);
    }
    #copy-public-link-btn {
        padding: 10px 15px;
        border-radius: 0 4px 4px 0;
        margin-left: -1px;
        border: 1px solid var(--button-primary-border-color);
        background-color: var(--button-primary-bg-color);
        color: var(--button-primary-text-color);
        cursor: pointer;
        box-sizing: border-box;
        height: calc(20px + 2*10px + 2*1px);
    }
    #copy-public-link-btn:hover { opacity: 0.9; }
    .public-link-container { display: flex; align-items: center; margin-top: 10px; }
    #existing-links-list-container ul { list-style-type: none; padding-left: 0; }
    #existing-links-list-container li { padding: 8px 0; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center; }
    .dark-theme #existing-links-list-container li { border-bottom-color: #444; }
    #existing-links-list-container li:last-child { border-bottom: none; }
    #existing-links-list-container .link-info { flex-grow: 1; }
    #existing-links-list-container .link-info a { word-break: break-all; }
    #existing-links-list-container .link-details { font-size: 0.8em; color: #777; display: block; margin-top: 3px;}
    .dark-theme #existing-links-list-container .link-details { color: #aaa; }

    #directory-tree-container { max-height: 250px; overflow-y: auto; border: 1px solid var(--input-border-color); padding: 10px; margin-bottom: 15px; background-color: var(--input-bg-color); }
    #directory-tree-container ul { list-style-type: none; padding-left: 20px; }
    #directory-tree-container li { padding: 5px 0; cursor: pointer; border-bottom: 1px dashed var(--input-border-color); }
    #directory-tree-container li:last-child { border-bottom: none; }
    #directory-tree-container li:hover { background-color: var(--hover-bg); }
    #directory-tree-container li.selected-dir { background-color: #007bff; color: white; }
    .dark-theme #directory-tree-container li.selected-dir { background-color: #0056b3; }

    .close-modal-btn { float: right; font-size: 1.5em; font-weight: bold; cursor: pointer; line-height: 1; padding: 0 5px;}

    /* === Grid View Styles - REFINED START === */
    #file-container.grid-view ul {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(110px, 1fr));
        gap: 10px;
        list-style-type: none; padding: 0; margin: 0;
    }
    #file-container.grid-view li {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
        padding: 8px;
        border-radius: 6px;
        position: relative;
        min-height: 110px;
        background-color: var(--input-bg-color);
        border: 1px solid var(--input-border-color);
        box-shadow: 0 1px 2px rgba(0,0,0,0.05);
        overflow: hidden;
    }
    .dark-theme #file-container.grid-view li {
        background-color: #3a3a3a;
        border-color: #555;
        box-shadow: 0 1px 2px rgba(0,0,0,0.1);
    }
    #file-container.grid-view li .file-entry-selectable {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
    }
    .grid-view .file-entry {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 0;
        width: 100%;
        flex-grow: 1;
        padding-top: 4px;
    }
    .grid-view .file-icon-large {
        font-size: 3.5em;
        line-height: 1;
        margin-bottom: 4px;
        flex-shrink: 0;
    }
    .grid-view .file-name {
        font-size: 0.8em;
        line-height: 1.25;
        word-break: break-all;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: calc(100% - 4px);
        min-height: calc(0.8em * 1.25 * 2);
        margin-bottom: 6px;
        color: var(--input-text-color);
        flex-shrink: 0;
    }
    .dark-theme .grid-view .file-name {
        color: var(--input-text-color);
    }
    #file-container.grid-view.multi-select-mode-active .item-checkbox,
    #file-container.grid-view.multi-select-mode-active .public-link-checkbox {
        position: absolute;
        top: 6px;
        left: 6px;
        margin-bottom: 0;
    }
    .grid-view .link-actions-group { /* For 'userShares' view items */
        display: flex;
        justify-content: center; /* Center the buttons horizontally */
        align-items: center;
        gap: 5px; /* Space between buttons */
        width: 100%; /* Take full width to allow centering */
        margin-top: auto;
        padding-top: 4px;
        padding-bottom: 4px; /* Added padding at the bottom */
        flex-wrap: nowrap; /* Prevent buttons from wrapping to ensure they stay in one line */
        flex-shrink: 0;
        box-sizing: border-box; /* Include padding in width calculation */
    }
    .grid-view .link-actions-group .action-button-small,
    .grid-view .link-actions-group .revoke-single-link-form, /* Target the form for flex properties */
    .grid-view .link-actions-group .revoke-single-link-form button {
        font-size: 0.7em;
        padding: 4px 8px; /* Increased padding for better touch target and appearance */
        white-space: nowrap;
        flex-grow: 0; /* Prevent buttons from growing */
        flex-shrink: 0; /* Prevent buttons from shrinking excessively */
        margin: 0 2px; /* Small margin between items if needed */
    }
    .grid-view .link-actions-group .revoke-single-link-form {
        display: inline-flex; /* Make form behave like a button for flex layout */
    }
    /* === Grid View Styles - REFINED END === */

    #select-all-container, #select-all-public-links-container {
        display: none;
        align-items: center;
        padding: 5px 10px;
        background-color: #f9f9f9;
        border-bottom: 1px solid #eee;
    }
    .dark-theme #select-all-container, .dark-theme #select-all-public-links-container {
        background-color: #2e2e2e;
        border-bottom-color: #444;
    }
    #select-all-container.visible-in-multiselect,
    #select-all-public-links-container.visible-in-multiselect {
        display: flex;
    }
    #select-all-container label, #select-all-public-links-container label {
        margin-left: 5px;
        font-weight: normal;
    }

    #upload-actions-container { display: none; padding: 10px 0; gap: 10px; flex-wrap: wrap; align-items: center; margin-bottom: 15px; }
    #upload-actions-container button { margin: 0; }
    #upload-section { display: none; padding: 20px; border: 1px solid #dee2e6; border-radius: 6px; margin-top: 0; background-color: #f8f9fa; }
    .dark-theme #upload-section { background-color: #3a3a3a; border-color: #444; }
    #drop-area { border: 2px dashed #007bff; padding: 20px; text-align: center; border-radius: 5px; background-color: #fff; }
    .dark-theme #drop-area { border-color: #0056b3; background-color: #2c2c2c; }
    #drop-area.highlight { border-color: #28a745; background-color: #e9f7ef; }
    .dark-theme #drop-area.highlight { background-color: #333; }
    #drop-area p { margin-bottom: 15px; font-size: 1.1em; color: #6c757d; }
    .dark-theme #drop-area p { color: #adb5bd; }
    #upload-button { display: none; margin-top: 15px; }

    .search-results-info { padding: 10px; background-color: #e9ecef; border-radius: 5px; margin-bottom: 15px; font-size: 0.9em; }
    .dark-theme .search-results-info { background-color: #3a3a3a; }
    .file-location-in-search { font-size: 0.8em; color: #6c757d; margin-left: 8px; }
    .dark-theme .file-location-in-search { color: #adb5bd; }

    .file-browser-controls { display: flex; flex-wrap: wrap; align-items: center; gap: 10px; margin-bottom: 20px; }
    .file-browser-controls .actions-group-left { display: flex; gap: 10px; align-items: center; flex-shrink: 0; }
    .file-browser-controls .actions-group-left button, #toggle-multi-select-btn { padding: 8px 12px; font-size: 0.9em; margin: 0; background-color: var(--button-primary-bg-color); color: var(--button-primary-text-color); border: 1px solid var(--button-primary-border-color); border-radius: 4px; cursor: pointer; }
    .file-browser-controls .actions-group-left button:hover, #toggle-multi-select-btn:hover { opacity: 0.9; }
    .file-browser-controls .search-form-right { display: flex; align-items: center; gap: 5px; margin-left: auto; flex-shrink: 0; }
    .file-browser-controls .search-form-right input[type="search"] { width: 180px; padding: 8px 10px; font-size: 0.9em; border: 1px solid var(--input-border-color); background-color: var(--input-bg-color); color: var(--input-text-color); border-radius: 4px; margin: 0; }
    .file-browser-controls .search-form-right button { padding: 8px 12px; font-size: 0.9em; margin: 0; background-color: var(--button-primary-bg-color); color: var(--button-primary-text-color); border: 1px solid var(--button-primary-border-color); border-radius: 4px; }
    .file-browser-controls .view-toggle { display: flex; gap: 8px; align-items: center; flex-shrink: 0; }
    .file-browser-controls .view-toggle button { padding: 8px 12px; font-size: 0.9em; margin: 0; background-color: var(--button-secondary-bg-color); color: var(--button-secondary-text-color); border: 1px solid var(--button-secondary-border-color); border-radius: 4px; }
    .file-browser-controls .view-toggle button.active { background-color: var(--button-primary-bg-color); border-color: var(--button-primary-border-color); }
    .file-browser-controls:not(:has(.actions-group-left)) .search-form-right { margin-left: 0; flex-grow: 1; }
    .file-browser-controls:not(:has(.actions-group-left)) .search-form-right input[type="search"] { flex-grow: 1; }
    .file-browser-controls:not(:has(.actions-group-left)) .view-toggle { margin-left: auto; }

    .progress-bar-container { width: 100%; background-color: #e9ecef; border-radius: 4px; margin-top: 10px; padding: 2px; display: none; box-sizing: border-box; }
    .dark-theme .progress-bar-container { background-color: #495057; }
    .progress-bar { display: block; width: 0%; height: 20px; background-color: #007bff; border: 1px solid #0056b3; border-radius: 2px; text-align: center; line-height: 18px; color: white; font-size: 0.8em; font-weight: bold; transition: width 0.1s ease-in-out; box-sizing: border-box; overflow: hidden; }
    .dark-theme .progress-bar { background-color: #0056b3; border-color: #003d80; }

    #file-container { max-height: calc(100vh - 360px); overflow-y: auto; padding-right: 5px; box-sizing: border-box; }
    .action-button-small, a.action-button-small {
        padding: 3px 6px;
        font-size: 0.8em;
        margin-left: 5px;
        text-decoration: none;
        border: 1px solid var(--button-secondary-border-color);
        background-color: var(--button-secondary-bg-color);
        color: var(--button-secondary-text-color);
        border-radius: 3px;
        display: inline-block;
        cursor: pointer;
        line-height: normal;
        vertical-align: middle;
    }
    .action-button-small:hover, a.action-button-small:hover {
        opacity: 0.9;
    }
    .dark-theme .action-button-small, .dark-theme a.action-button-small {
            border-color: var(--button-secondary-border-color);
            background-color: var(--button-secondary-bg-color);
            color: var(--button-secondary-text-color);
    }

    #share-modal .form-group label[for="share-allow-download"],
    #share-modal .form-group label[for="share-allow-view"] {
        display: inline-block; margin-left: 5px; font-weight: normal;
    }
    #share-modal .form-group input[type="checkbox"] {
        width: auto; vertical-align: middle;
    }
    .link-actions-group { /* General for list view */
        display: flex;
        gap: 5px;
        align-items: center;
        margin-left: auto;
        padding-left: 10px;
        flex-shrink: 0;
    }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>
                <%
                let headerTitle = (locals.viewContextUser ? viewContextUser.username : user.username) + ' 的文件';
                if (locals.isSearchResult && locals.searchQuery) {
                    headerTitle = `有關 "${searchQuery}" 的搜尋結果`;
                    if (locals.viewContextUser && locals.viewContextUser.username !== user.username) {
                        headerTitle += ` (在 ${viewContextUser.username} 的文件中)`;
                    } else {
                        headerTitle += ` (在您的文件中)`;
                    }
                } else if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') {
                    headerTitle = `管理員視角: ${viewContextUser.username} 的文件`;
                } else if (locals.viewMode === 'userShares') {
                    headerTitle = `我創建的公開連結`;
                    if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') {
                        headerTitle += ` (來自 ${viewContextUser.username})`;
                    }
                }
                %>
                <%= headerTitle %>
            </h1>
            <div class="header-controls">
                <nav>
                    <% if (user.role === 'admin') { %><a href="/admin">管理面板</a><% } %>
                    <a href="/change-password">修改密碼</a>
                    <a href="/logout">登出</a>
                </nav>
                <%- include('partials/theme-switcher') %>
            </div>
        </header>

        <% if (locals.message) { %>
            <p class="message <%= (locals.messageType === 'error' || (locals.message && (message.includes('失敗') || message.includes('错误') || message.includes('沒有選擇文件') || message.includes('無效的') ))) ? 'error-message' : (locals.messageType === 'success' ? '' : (locals.messageType === 'warning' ? 'warning-message' : '') ) %>"><%= message %></p>
        <% } %>

        <div class="nav-tabs">
            <a href="/files<%= locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewContextUser.username) : '' %>"
               class="nav-link <%= (!locals.viewMode || locals.viewMode === 'myfiles') ? 'active' : '' %>" target="_self">
                我的文件
            </a>
            <a href="/files?viewMode=userShares<%= locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewContextUser.username) : '' %>"
               class="nav-link <%= locals.viewMode === 'userShares' ? 'active' : '' %>" target="_self">
                我的公開連結
            </a>
        </div>


        <% if (!locals.isSearchResult && (!locals.viewMode || locals.viewMode === 'myfiles')) { %>
            <div class="current-path">
                當前路徑:
                <a href="/files<%= locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewContextUser.username) : '' %>">根目錄</a>
                <%
                    let pathSegments = currentPath.split('/').filter(Boolean);
                    let cumulativePathForLink = '';
                    const adminTargetQueryForPath = locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewContextUser.username) : '';
                %>
                <% pathSegments.forEach(segment => { %>
                    <% cumulativePathForLink += '/' + segment; %>
                    / <a href="/files?path=<%= encodeURIComponent(cumulativePathForLink) %><%= adminTargetQueryForPath %>"><%= segment %></a>
                <% }); %>
            </div>
        <% } else if (locals.isSearchResult && locals.searchQuery) { %>
             <div class="search-results-info">
                正在顯示包含 "<%= searchQuery %>" 的文件。
                <a href="/files<%= locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewContextUser.username) : '' %>">清除搜索並返回根目錄</a>
            </div>
        <% } %>

        <div class="file-browser-controls">
            <% if ((!locals.viewMode || locals.viewMode === 'myfiles') && !locals.isSearchResult && currentPath && currentPath !== '/search-results') { %>
                <div class="actions-group-left">
                    <button type="button" id="show-create-textfile-modal-btn">新建文本文件</button>
                    <button type="button" id="show-create-folder-modal-btn">創建文件夾</button>
                    <button type="button" id="toggleUploadActionsBtn" class="upload-button-main">上傳</button>
                </div>
            <% } %>
            <% if (locals.viewMode !== 'userShares') { %>
                <button type="button" id="toggle-multi-select-btn">啟用多選</button>
            <% } else if (items.length > 0) { %> <button type="button" id="toggle-multi-select-btn">啟用多選</button>
            <% } %>

            <form action="/files" method="GET" class="control-form search-form-right">
                <% if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewContextUser.username %>">
                <% } %>
                <% if (locals.viewMode) { %>
                    <input type="hidden" name="viewMode" value="<%= locals.viewMode %>">
                <% } %>
                <input type="search" name="q" placeholder="搜索..." value="<%= locals.searchQuery || '' %>">
                <button type="submit">搜索</button>
            </form>

            <div class="view-toggle">
                <button id="listViewBtn">列表</button>
                <button id="gridViewBtn">網格</button>
            </div>
        </div>

        <% if ((!locals.viewMode || locals.viewMode === 'myfiles') && !locals.isSearchResult && currentPath && currentPath !== '/search-results') { %>
            <div id="upload-actions-container" style="justify-content: flex-start;">
                <button type="button" id="upload-files-btn">上傳文件</button>
                <button type="button" id="upload-folder-btn">上傳文件夾</button>
            </div>

            <div id="upload-section">
                <h2 id="upload-section-title">上傳到 "<%= currentPath === '/' ? '根目錄' : currentPath.split('/').pop() %>"</h2>
                <div id="drop-area">
                    <form id="upload-form" action="/upload" method="POST" enctype="multipart/form-data">
                        <input type="hidden" name="currentPath" value="<%= currentPath %>">
                        <% if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') { %><input type="hidden" name="targetUsername" value="<%= viewContextUser.username %>"><% } %>
                        <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                        <input type="file" id="userFiles" name="userFiles" multiple style="display: none;">
                        <p id="drop-area-text">將文件或文件夾拖拽到此處，或點擊上方按鈕選擇</p>
                        <button type="submit" id="upload-button">上傳已選項目</button>
                    </form>
                    <div id="file-list-preview" style="margin-top:10px; text-align:left;"></div>
                    <div class="progress-bar-container" id="upload-progress-container">
                        <div class="progress-bar" id="upload-progress-bar">0%</div>
                    </div>
                </div>
            </div>
        <% } %>

        <% if (locals.viewMode !== 'userShares') { %>
            <div id="selection-action-bar">
                <span id="selection-count" style="margin-right: 15px;">已選擇 0 項</span>
                <button id="action-play-btn" disabled>播放</button>
                <button id="action-edit-btn" disabled>編輯</button>
                <button id="action-rename-btn" disabled>重命名</button>
                <button id="action-move-btn" disabled>移動</button>
                <button id="action-share-btn" disabled>創建公開連結</button>
                <button id="action-view-existing-links-btn" disabled style="display:none;">查看已分享連結</button>
                <button id="action-download-btn" disabled>下載選中項</button>
                <button id="action-delete-btn" class="secondary" disabled>删除</button>
            </div>
        <% } else { %>
            <div id="public-link-selection-action-bar">
                <span id="public-link-selection-count" style="margin-right: 15px;">已選擇 0 個連結</span>
                <button id="action-revoke-selected-links-btn" class="secondary" disabled>撤銷選中連結</button>
            </div>
        <% } %>

        <%
            let pageHeading = '文件列表';
            if (locals.isSearchResult) pageHeading = '搜索結果';
            else if (locals.viewMode === 'userShares') pageHeading = '我創建的公開連結';
        %>
        <h2><%= pageHeading %></h2>

        <% if (items.length > 0 && locals.viewMode !== 'userShares') { %>
            <div id="select-all-container">
                <input type="checkbox" id="select-all-checkbox">
                <label for="select-all-checkbox">全選/取消全選</label>
            </div>
        <% } else if (items.length > 0 && locals.viewMode === 'userShares') { %>
            <div id="select-all-public-links-container">
                <input type="checkbox" id="select-all-public-links-checkbox">
                <label for="select-all-public-links-checkbox">全選/取消全選</label>
            </div>
        <% } %>

        <div id="file-container" class="list-view">
            <% if (items.length > 0) { %>
                <% const adminTargetQueryForActions = locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewContextUser.username) : ''; %>
                <ul>
                    <% items.forEach(item => { %>
                        <li data-item-path="<%= item.path %>"
                            <% if (locals.viewMode === 'userShares') { %>data-link-id="<%= item.link_id %>" data-token="<%= item.token %>" data-public-url="<%= item.publicUrl %>"<% } %>
                            >
                            <div class="file-entry-selectable">
                                <% if (locals.viewMode !== 'userShares') { %>
                                <input type="checkbox" class="item-checkbox"
                                       data-path="<%= item.path %>"
                                       data-encoded-path="<%= item.encodedPath %>"
                                       data-name="<%= item.name %>"
                                       data-encoded-name="<%= item.encodedName %>"
                                       data-is-dir="<%= item.isDir %>"
                                       data-is-playable-video="<%= item.isPlayableVideo || false %>"
                                       data-video-type="<%= item.videoType || '' %>"
                                       data-raw-name="<%= item.name.replace(/'/g, '\\\'').replace(/"/g, '&quot;') %>"
                                       >
                                <% } else { %>
                                    <input type="checkbox" class="public-link-checkbox" data-link-id="<%= item.link_id %>">
                                <% } %>
                                <div class="file-content-wrapper">
                                    <% if (item.isDir) { %>
                                        <div class="file-entry">
                                            <span class="file-icon-large folder-icon">📁</span>
                                            <% if (locals.viewMode === 'userShares') { %>
                                                <span class="file-name"><%= item.name %></span>
                                            <% } else { %>
                                                <a href="/files?path=<%= item.encodedPath %><%= adminTargetQueryForActions %>" class="file-name"><%= item.name %></a>
                                            <% } %>
                                            <% if (locals.isSearchResult && (!locals.viewMode || locals.viewMode === 'myfiles')) { %><span class="file-location-in-search">(位於: <%= (item.path.substring(0, item.path.lastIndexOf('/')) || '/') %>)</span><% } %>
                                        </div>
                                        <div class="file-details">
                                            <% if (locals.viewMode === 'userShares') { %>
                                                <span class="file-public-link"><a href="<%= item.publicUrl %>" target="_blank" title="點擊打開公開連結"><%= item.publicUrl %></a></span>
                                                <span class="file-created-at" data-date="<%= item.createdAt %>"></span>
                                            <% } else { %>
                                                <span class="file-size"></span>
                                                <span class="file-modified" data-date="<%= item.lastModified %>"></span>
                                            <% } %>
                                        </div>
                                    <% } else { // It's a file %>
                                        <div class="file-entry">
                                            <%
                                                const ext = item.name.includes('.') ? item.name.substring(item.name.lastIndexOf('.') + 1).toLowerCase() : '';
                                                let largeIcon = '📄';
                                                let iconClass = 'file-icon';

                                                if (item.isDir) {
                                                    largeIcon = '📁';
                                                    iconClass = 'folder-icon';
                                                } else if (ALLOWED_TEXT_EXTENSIONS.includes('.' + ext) || ALLOWED_TEXT_EXTENSIONS.includes(ext)) {
                                                    largeIcon = '📝'; iconClass = 'text-file-icon';
                                                } else if (item.isPlayableVideo) {
                                                    largeIcon = '🎥'; iconClass = 'video-file-icon';
                                                } else if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'].includes(ext)) {
                                                    largeIcon = '🖼️'; iconClass = 'image-file-icon';
                                                } else if (['pdf'].includes(ext)) {
                                                    largeIcon = '📕'; iconClass = 'pdf-file-icon';
                                                }
                                            %>
                                            <span class="file-icon-large <%= iconClass %>"><%= largeIcon %></span>
                                            <% if (locals.viewMode === 'userShares') { %>
                                                <span class="file-name"><%= item.name %></span>
                                            <% } else if (item.isPlayableVideo) { %>
                                                <a href="#" class="file-name video-link"
                                                   data-path="<%= item.encodedPath %>"
                                                   data-name="<%= item.name %>"
                                                   data-type="<%= item.videoType %>"
                                                   title="點擊播放 <%= item.name %>"><%= item.name %></a>
                                            <% } else if (ALLOWED_TEXT_EXTENSIONS.includes('.' + ext) || ALLOWED_TEXT_EXTENSIONS.includes(ext)) { %>
                                                <a href="/view?path=<%= item.encodedPath %><%= adminTargetQueryForActions %>" class="file-name" title="點擊查看"><%= item.name %></a>
                                            <% } else { %>
                                                <span class="file-name"><%= item.name %></span>
                                            <% } %>
                                            <% if (locals.isSearchResult && (!locals.viewMode || locals.viewMode === 'myfiles')) { %><span class="file-location-in-search">(位於: <%= (item.path.substring(0, item.path.lastIndexOf('/')) || '/') %>)</span><% } %>
                                        </div>
                                        <div class="file-details">
                                            <% if (locals.viewMode === 'userShares') { %>
                                                <span class="file-public-link"><a href="<%= item.publicUrl %>" target="_blank" title="點擊打開公開連結"><%= item.publicUrl %></a></span>
                                                <span class="file-created-at" data-date="<%= item.createdAt %>"></span>
                                            <% } else { %>
                                                <span class="file-size" title="<%= item.size %> bytes" data-size="<%= item.size %>"></span>
                                                <span class="file-modified" data-date="<%= item.lastModified %>"></span>
                                            <% } %>
                                        </div>
                                    <% } %>
                                    <% if (locals.viewMode === 'userShares') { %>
                                        <div class="link-actions-group">
                                            <button type="button" class="action-button-small view-public-link-btn" data-url="<%= item.publicUrl %>">查看</button>
                                            <form action="/actions/revoke-public-link" method="POST" class="revoke-single-link-form" style="display: inline;">
                                                <input type="hidden" name="link_id" value="<%= item.link_id %>">
                                                <% if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') { %>
                                                    <input type="hidden" name="contextUsername" value="<%= viewContextUser.username %>">
                                                <% } %>
                                                <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                                                <button type="submit" class="secondary action-button-small" onclick="return confirm('確定要撤銷此公開連結嗎？');">撤銷</button>
                                            </form>
                                        </div>
                                    <% } else { %>
                                        <span class="file-actions-placeholder"></span>
                                    <% } %>
                                </div>
                            </div>
                        </li>
                    <% }) %>
                </ul>
            <% } else { %>
                <p><%= locals.isSearchResult ? '找不到符合條件的文件。' : ( (locals.viewMode === 'userShares') ? '您尚未創建任何公開連結。' : '此文件夾為空。' ) %></p>
            <% } %>
        </div>
    </div>

    <div id="create-item-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-create-item-modal-btn">&times;</span>
            <h3 id="create-item-modal-title">创建新项目</h3>
            <form id="create-item-form" method="POST">
                <input type="hidden" name="currentPath" value="<%= currentPath %>">
                <% if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewContextUser.username %>">
                <% } %>
                <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                <div class="form-group">
                    <label for="create-item-name-input" id="create-item-name-label">名称:</label>
                    <input type="text" id="create-item-name-input" name="" required>
                </div>
                <div class="modal-actions">
                    <button type="button" class="secondary" id="cancel-create-item-btn">取消</button>
                    <button type="submit" id="confirm-create-item-btn">确认创建</button>
                </div>
            </form>
        </div>
    </div>

    <div id="rename-item-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-rename-item-modal-btn">&times;</span>
            <h3>重命名項目</h3>
            <form id="rename-item-form" action="/rename" method="POST">
                <input type="hidden" name="currentPath" id="rename-current-path-input">
                <input type="hidden" name="oldPath" id="rename-old-path-input">
                <input type="hidden" name="isDir" id="rename-is-dir-input">
                <% if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewContextUser.username %>" id="rename-target-username-input">
                <% } else { %>
                    <input type="hidden" name="targetUsername" value="" id="rename-target-username-input">
                <% } %>
                <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                <div class="form-group">
                    <label for="rename-new-name-input">新名稱:</label>
                    <input type="text" id="rename-new-name-input" name="newName" placeholder="新名稱" required>
                </div>
                <div class="modal-actions">
                    <button type="button" class="secondary" id="cancel-rename-item-btn">取消</button>
                    <button type="submit" id="confirm-rename-item-btn">確認</button>
                </div>
            </form>
        </div>
    </div>


    <div id="move-modal" class="modal">
        <div class="modal-content"> <span class="close-modal-btn" id="close-move-modal-btn">&times;</span>
            <h3>移動選中項目到:</h3>
            <div id="directory-tree-container">
                <p>正在加載目錄...</p>
            </div>
            <p>已選擇目標: <strong id="selected-destination-path">無</strong></p>
            <input type="hidden" id="move-destination-input" value="">
            <div class="modal-actions"> <button type="button" class="secondary" id="cancel-move-btn">取消</button>
                <button id="confirm-move-btn" disabled>確認移動</button>
            </div>
        </div>
    </div>

    <div id="overwrite-confirm-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-overwrite-modal-btn">&times;</span>
            <h3>確認操作</h3>
            <p id="overwrite-message">一個同名項目已存在。您要覆蓋它嗎？</p>
            <div class="modal-actions">
                <button type="button" class="secondary" id="overwrite-abandon-btn">放棄</button>
                <button type="button" id="overwrite-confirm-btn">覆蓋</button>
            </div>
        </div>
    </div>

    <div id="video-player-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-video-modal-btn">&times;</span>
            <h3 id="video-modal-title" style="margin-bottom: 15px;">播放視頻</h3>
            <video id="html5-video-player" controls controlsList="nodownload" width="100%" style="max-height: 75vh; display: block; background-color: #000;">
                <source id="video-source" src="" type="">
                您的瀏覽器不支持 HTML5 video 標籤。
            </video>
        </div>
    </div>

    <div id="share-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-share-modal-btn">&times;</span>
            <h3>創建公開分享連結</h3>
            <form id="share-form">
                <input type="hidden" name="filePathToShare" id="share-file-path-input">
                <input type="hidden" name="isDirectory" id="share-is-directory-input">
                <% if (locals.viewContextUser && locals.viewContextUser.username !== user.username && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewContextUser.username %>">
                <% } %>
                <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                <p>為 "<strong id="share-item-name-display"></strong>" 創建公開連結:</p>
                <div class="form-group">
                    <input type="checkbox" id="share-allow-download" name="allowDownload" checked>
                    <label for="share-allow-download">允許下載</label>
                </div>
                <div class="form-group">
                    <input type="checkbox" id="share-allow-view" name="allowView" checked>
                    <label for="share-allow-view">允許預覽 (如果支持)</label>
                </div>
                <div class="modal-actions">
                    <button type="button" class="secondary" id="cancel-share-btn">取消</button>
                    <button type="button" id="confirm-share-btn">創建連結</button>
                </div>
            </form>
        </div>
    </div>

    <div id="public-link-display-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-public-link-display-modal-btn">&times;</span>
            <h3 id="public-link-modal-title">公開連結</h3>
            <p id="public-link-modal-message">您可以複製下面的連結進行分享:</p>
            <div class="public-link-container">
                <input type="url" id="generated-public-link" readonly>
                <button id="copy-public-link-btn">複製</button>
            </div>
            <div class="modal-actions">
                <button type="button" class="secondary" id="ok-public-link-display-btn">完成</button>
            </div>
        </div>
    </div>

    <div id="existing-links-modal" class="modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-existing-links-modal-btn">&times;</span>
            <h3>項目 "<span id="existing-links-item-name"></span>" 的已分享連結</h3>
            <div id="existing-links-list-container">
                <p>正在加載連結...</p>
            </div>
            <div class="modal-actions">
                <button type="button" class="secondary" id="done-existing-links-btn">完成</button>
            </div>
        </div>
    </div>

    <script src="/theme.js"></script>
    <script>
        // --- App Structure Definition ---
        const App = {
            config: {
                ALLOWED_TEXT_EXTENSIONS: <%- JSON.stringify(locals.ALLOWED_TEXT_EXTENSIONS || []) %>,
                CSRF_TOKEN: "<%= locals.csrfToken || '' %>",
                VIEW_CONTEXT_USER_USERNAME: "<%= locals.viewContextUser ? locals.viewContextUser.username : '' %>",
                CURRENT_SESSION_USER_ROLE: "<%= user.role %>",
                CURRENT_SESSION_USER_USERNAME: "<%= user.username %>",
                CURRENT_PATH_ON_LOAD: "<%= currentPath %>",
                IS_SEARCH_RESULT_VIEW: <%= locals.isSearchResult || false %>,
                CURRENT_VIEW_MODE: "<%= locals.viewMode || 'myfiles' %>",
                EXISTING_ITEM_NAMES_ON_PAGE: <%- JSON.stringify((locals.viewMode || 'myfiles') === 'myfiles' && Array.isArray(items) ? items.map(item => item.name.toLowerCase()) : []) %>,
                HAS_ITEMS_ON_PAGE: <%= items.length > 0 %>,
            },
            state: {
                multiSelectModeActive: false,
                currentSingleSelectedItem: null,
                currentDirectoryTree: [],
            },
            elements: {},
            helpers: {
                formatFileSize: (bytes) => {
                    if (bytes === undefined || bytes === null || isNaN(bytes)) return '--';
                    if (bytes === 0) return '0 B';
                    const k = 1024;
                    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
                    const i = Math.floor(Math.log(bytes) / Math.log(k));
                    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
                },
                formatDate: (dateString) => {
                    if (!dateString) return '--';
                    try {
                        const date = new Date(dateString);
                        if (isNaN(date.getTime())) return '--';
                        return date.toLocaleDateString('zh-CN', {
                            year: 'numeric', month: '2-digit', day: '2-digit',
                            hour: '2-digit', minute: '2-digit'
                        });
                    } catch (e) { return '--'; }
                },
                getItemData: (liElement) => {
                    if (!liElement) return null;
                    const checkbox = liElement.querySelector('.item-checkbox');
                    if (!checkbox) return null;
                    return {
                        path: checkbox.dataset.path, encodedPath: checkbox.dataset.encodedPath,
                        name: checkbox.dataset.name, encodedName: checkbox.dataset.encodedName,
                        isDir: checkbox.dataset.isDir === 'true', rawName: checkbox.dataset.rawName,
                        isPlayableVideo: checkbox.dataset.isPlayableVideo === 'true',
                        videoType: checkbox.dataset.videoType, element: liElement
                    };
                },
                preventDefaults: (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                },
            },
            init() {
                const ids = [
                    'file-container', 'selection-action-bar', 'selection-count', 'action-play-btn',
                    'action-edit-btn', 'action-rename-btn', 'action-move-btn', 'action-share-btn',
                    'action-view-existing-links-btn', 'action-download-btn', 'action-delete-btn',
                    'public-link-selection-action-bar', 'public-link-selection-count',
                    'action-revoke-selected-links-btn', 'select-all-container', 'select-all-checkbox',
                    'select-all-public-links-container', 'select-all-public-links-checkbox',
                    'toggle-multi-select-btn', 'listViewBtn', 'gridViewBtn',
                    'move-modal', 'close-move-modal-btn', 'directory-tree-container', 'confirm-move-btn',
                    'cancel-move-btn', 'selected-destination-path', 'move-destination-input',
                    'rename-item-modal', 'close-rename-item-modal-btn', 'cancel-rename-item-btn',
                    'rename-item-form', 'rename-new-name-input', 'rename-old-path-input',
                    'rename-current-path-input', 'rename-is-dir-input', 'rename-target-username-input',
                    'create-item-modal', 'close-create-item-modal-btn', 'cancel-create-item-btn',
                    'create-item-form', 'create-item-modal-title', 'create-item-name-input', 'create-item-name-label',
                    'show-create-textfile-modal-btn', 'show-create-folder-modal-btn',
                    'upload-actions-container', 'toggleUploadActionsBtn', 'upload-section',
                    'upload-files-btn', 'upload-folder-btn', 'userFiles', 'drop-area', 'drop-area-text',
                    'upload-form', 'upload-button', 'file-list-preview', 'upload-progress-container', 'upload-progress-bar',
                    'overwrite-confirm-modal', 'close-overwrite-modal-btn', 'overwrite-message', 'overwrite-confirm-btn', 'overwrite-abandon-btn',
                    'video-player-modal', 'close-video-modal-btn', 'html5-video-player', 'video-source', 'video-modal-title',
                    'share-modal', 'close-share-modal-btn', 'cancel-share-btn', 'confirm-share-btn',
                    'share-item-name-display', 'share-file-path-input', 'share-is-directory-input',
                    'share-allow-download', 'share-allow-view',
                    'public-link-display-modal', 'close-public-link-display-modal-btn', 'ok-public-link-display-btn',
                    'generated-public-link', 'copy-public-link-btn', 'public-link-modal-title', 'public-link-modal-message',
                    'existing-links-modal', 'close-existing-links-modal-btn', 'done-existing-links-btn',
                    'existing-links-item-name', 'existing-links-list-container'
                ];
                ids.forEach(id => {
                    const el = document.getElementById(id);
                    if (el) App.elements[id] = el;
                });
                const preferredView = localStorage.getItem('fileView') || 'list';
                App.ui.toggleView(preferredView);
                App.ui.formatDatesAndSizesOnPage();
                App.events.setup();
                App.ui.updateMultiSelectModeUI();
                App.ui.updateSelectionActions();
                App.ui.updatePublicLinkSelectionActions();
            },
            ui: {},
            events: {},
            api: {},
        };

        // --- All Functions Go Here ---
        Object.assign(App.ui, {
            toggleView(viewType) {
                const { fileContainer, gridViewBtn, listViewBtn } = App.elements;
                if (!fileContainer || !gridViewBtn || !listViewBtn) return;
                const isCurrentlyMultiSelect = fileContainer.classList.contains('multi-select-mode-active');
                fileContainer.classList.remove('list-view', 'grid-view');
                if (viewType === 'grid') {
                    fileContainer.classList.add('grid-view');
                    gridViewBtn.classList.add('active');
                    listViewBtn.classList.remove('active');
                    localStorage.setItem('fileView', 'grid');
                } else {
                    fileContainer.classList.add('list-view');
                    listViewBtn.classList.add('active');
                    gridViewBtn.classList.remove('active');
                    localStorage.setItem('fileView', 'list');
                }
                if (isCurrentlyMultiSelect) fileContainer.classList.add('multi-select-mode-active');
                this.clearSingleSelection();
                this.updateSelectionActions();
                this.updatePublicLinkSelectionActions();
            },
            updateMultiSelectModeUI() {
                const { fileContainer, toggleMultiSelectBtn, selectAllContainer, selectAllPublicLinksContainer, selectAllCheckbox, selectAllPublicLinksCheckbox } = App.elements;
                if (!fileContainer || !toggleMultiSelectBtn) return;
                const isUserSharesView = App.config.CURRENT_VIEW_MODE === 'userShares';
                if (App.state.multiSelectModeActive) {
                    this.clearSingleSelection();
                    fileContainer.classList.add('multi-select-mode-active');
                    toggleMultiSelectBtn.textContent = '取消多選';
                    const containerToShow = isUserSharesView ? selectAllPublicLinksContainer : selectAllContainer;
                    if (containerToShow && App.config.HAS_ITEMS_ON_PAGE) containerToShow.classList.add('visible-in-multiselect');
                } else {
                    fileContainer.classList.remove('multi-select-mode-active');
                    toggleMultiSelectBtn.textContent = '啟用多選';
                    if (selectAllContainer) selectAllContainer.classList.remove('visible-in-multiselect');
                    if (selectAllPublicLinksContainer) selectAllPublicLinksContainer.classList.remove('visible-in-multiselect');
                    document.querySelectorAll('.item-checkbox:checked, .public-link-checkbox:checked').forEach(cb => cb.checked = false);
                    if (selectAllCheckbox) selectAllCheckbox.checked = false;
                    if (selectAllPublicLinksCheckbox) selectAllPublicLinksCheckbox.checked = false;
                }
                this.updateSelectionActions();
                this.updatePublicLinkSelectionActions();
            },
            getCheckboxSelectedItems: () => document.querySelectorAll('#file-container .item-checkbox:checked').length > 0 ? Array.from(document.querySelectorAll('#file-container .item-checkbox:checked')).map(cb => App.helpers.getItemData(cb.closest('li'))) : [],
            getSelectedPublicLinkIds: () => Array.from(document.querySelectorAll('#file-container .public-link-checkbox:checked')).map(cb => cb.dataset.linkId),
            clearSingleSelection() {
                if (App.state.currentSingleSelectedItem?.element) {
                    App.state.currentSingleSelectedItem.element.classList.remove('single-selected-item');
                }
                App.state.currentSingleSelectedItem = null;
            },
            async updateSelectionActions() {
                const { selectionActionBar, selectionCount, actionPlayBtn, actionEditBtn, actionRenameBtn, actionMoveBtn, actionShareBtn, actionViewExistingLinksBtn, actionDownloadBtn, actionDeleteBtn } = App.elements;
                if (App.config.CURRENT_VIEW_MODE === 'userShares' || !selectionActionBar) {
                    if (selectionActionBar) selectionActionBar.style.display = 'none';
                    return;
                }
                let itemsForActions = App.state.multiSelectModeActive ? this.getCheckboxSelectedItems() : (App.state.currentSingleSelectedItem ? [App.state.currentSingleSelectedItem] : []);
                const count = itemsForActions.length;
                let isSingleItem = count === 1;
                let isSingleFileEditable = false, isSingleFilePlayableVideo = false, hasExistingShares = false;

                if (isSingleItem) {
                    const item = itemsForActions[0];
                    if (!item.isDir) {
                        const fileExt = item.name.includes('.') ? '.' + item.name.split('.').pop().toLowerCase() : '';
                        if (App.config.ALLOWED_TEXT_EXTENSIONS.includes(fileExt)) isSingleFileEditable = true;
                        if (item.isPlayableVideo) isSingleFilePlayableVideo = true;
                    }
                    try {
                        const data = await App.api.fetchItemPublicLinks(item.path);
                        if (data.success && data.links?.length > 0) hasExistingShares = true;
                    } catch (e) { console.error("Error checking existing shares", e); }
                }

                selectionActionBar.style.display = count > 0 ? 'flex' : 'none';
                if (count > 0) selectionCount.textContent = `已選擇 ${count} 項`;

                if(actionPlayBtn) actionPlayBtn.disabled = !(isSingleItem && isSingleFilePlayableVideo);
                if(actionEditBtn) actionEditBtn.disabled = !(isSingleItem && isSingleFileEditable);
                if(actionRenameBtn) actionRenameBtn.disabled = !isSingleItem;
                if(actionMoveBtn) actionMoveBtn.disabled = !(count > 0);
                if(actionShareBtn) actionShareBtn.disabled = !isSingleItem;
                if(actionViewExistingLinksBtn) {
                    actionViewExistingLinksBtn.disabled = !(isSingleItem && hasExistingShares);
                    actionViewExistingLinksBtn.style.display = (isSingleItem && hasExistingShares) ? 'inline-block' : 'none';
                }
                if(actionDownloadBtn) actionDownloadBtn.disabled = !(count > 0);
                if(actionDeleteBtn) actionDeleteBtn.disabled = !(count > 0);
            },
            updatePublicLinkSelectionActions() {
                const { publicLinkSelectionActionBar, publicLinkSelectionCount, actionRevokeSelectedLinksBtn } = App.elements;
                if (App.config.CURRENT_VIEW_MODE !== 'userShares' || !publicLinkSelectionActionBar) {
                    if (publicLinkSelectionActionBar) publicLinkSelectionActionBar.style.display = 'none';
                    return;
                }
                const count = this.getSelectedPublicLinkIds().length;
                publicLinkSelectionActionBar.style.display = count > 0 ? 'flex' : 'none';
                if (actionRevokeSelectedLinksBtn) actionRevokeSelectedLinksBtn.disabled = (count === 0);
                if (publicLinkSelectionCount) publicLinkSelectionCount.textContent = `已選擇 ${count} 個連結`;
            },
            openModal: (modal) => { if(modal) modal.style.display = 'block'; },
            closeModal: (modal) => { if(modal) modal.style.display = 'none'; },
            openRenameModal(item) {
                const { renameItemModal, renameNewNameInput, renameOldPathInput, renameCurrentPathInput, renameIsDirInput, renameTargetUsernameInput } = App.elements;
                if (!renameItemModal || !item) return;
                renameOldPathInput.value = item.path;
                renameNewNameInput.value = item.name;
                renameIsDirInput.value = item.isDir;
                renameCurrentPathInput.value = App.config.IS_SEARCH_RESULT_VIEW ? (item.path.substring(0, item.path.lastIndexOf('/')) || '/') : App.config.CURRENT_PATH_ON_LOAD;
                if (renameTargetUsernameInput) renameTargetUsernameInput.value = (App.config.VIEW_CONTEXT_USER_USERNAME && App.config.CURRENT_SESSION_USER_ROLE === 'admin' && App.config.VIEW_CONTEXT_USER_USERNAME !== App.config.CURRENT_SESSION_USER_USERNAME) ? App.config.VIEW_CONTEXT_USER_USERNAME : '';
                this.openModal(renameItemModal);
                renameNewNameInput.focus();
                const dotIndex = !item.isDir && item.name.includes('.') ? item.name.lastIndexOf('.') : -1;
                if(dotIndex > -1) renameNewNameInput.setSelectionRange(0, dotIndex);
                else renameNewNameInput.select();
            },
            openCreateItemModal(type) {
                const { createItemModal, createItemForm, createItemModalTitle, createItemNameLabel, createItemNameInput } = App.elements;
                if (!createItemModal) return;
                createItemForm.reset();
                createItemForm.querySelector('input[name="currentPath"]').value = App.config.IS_SEARCH_RESULT_VIEW ? '/' : App.config.CURRENT_PATH_ON_LOAD;
                if (type === 'textfile') {
                    createItemModalTitle.textContent = '新建文本文件';
                    createItemNameLabel.textContent = '文件名 (例如: mydoc.txt):';
                    createItemNameInput.name = 'newFileName';
                    createItemForm.action = '/create-text-file';
                } else {
                    createItemModalTitle.textContent = '创建新文件夹';
                    createItemNameLabel.textContent = '文件夹名称:';
                    createItemNameInput.name = 'folderName';
                    createItemForm.action = '/create-folder';
                }
                this.openModal(createItemModal);
                createItemNameInput.focus();
            },
            openVideoPlayer(encodedPath, name, type) {
                const { videoPlayerModal, html5VideoPlayer, videoSource, videoModalTitle } = App.elements;
                if (!videoPlayerModal) return;
                let src = `/stream/${encodedPath}`;
                const params = new URLSearchParams();
                if (App.config.VIEW_CONTEXT_USER_USERNAME && App.config.CURRENT_SESSION_USER_ROLE === 'admin' && App.config.VIEW_CONTEXT_USER_USERNAME !== App.config.CURRENT_SESSION_USER_USERNAME) {
                    params.set('targetUsername', App.config.VIEW_CONTEXT_USER_USERNAME);
                }
                if (params.toString()) src += `?${params.toString()}`;
                videoModalTitle.textContent = name || '播放視頻';
                videoSource.src = src;
                if (type) videoSource.type = type; else videoSource.removeAttribute('type');
                html5VideoPlayer.load();
                this.openModal(videoPlayerModal);
            },
            closeVideoPlayer() {
                const { videoPlayerModal, html5VideoPlayer } = App.elements;
                this.closeModal(videoPlayerModal);
                if (html5VideoPlayer) {
                    html5VideoPlayer.pause();
                    html5VideoPlayer.querySelector('source').src = '';
                }
            },
            updateFileListPreview() {
                const { fileListPreview, userFiles, uploadButton } = App.elements;
                if (!fileListPreview || !userFiles || !uploadButton) return;
                fileListPreview.innerHTML = '';
                const files = userFiles.files;
                if (files.length > 0) {
                    const list = document.createElement('ul');
                    list.style.cssText = 'list-style-type: none; padding-left: 0;';
                    let isDirectoryUpload = userFiles.hasAttribute('webkitdirectory') || (files[0]?.webkitRelativePath?.includes('/'));
                    if (isDirectoryUpload) {
                        const folderName = files[0].webkitRelativePath.split('/')[0];
                        list.innerHTML = `<li style="font-size: 0.9em; font-weight: bold;">文件夾: ${folderName} (${files.length} 個文件)</li>`;
                    } else {
                        list.innerHTML = Array.from(files).map(f => `<li style="font-size: 0.9em;">${f.name} (${App.helpers.formatFileSize(f.size)})</li>`).join('');
                    }
                    fileListPreview.appendChild(list);
                    uploadButton.style.display = 'inline-block';
                } else {
                    uploadButton.style.display = 'none';
                }
            },
            formatDatesAndSizesOnPage() {
                document.querySelectorAll('[data-date]').forEach(el => el.textContent = App.helpers.formatDate(el.dataset.date));
                document.querySelectorAll('[data-size]').forEach(el => el.textContent = App.helpers.formatFileSize(parseInt(el.dataset.size, 10)));
            },
            renderDirectoryTree(nodes, container, itemsBeingMoved) {
                container.innerHTML = '';
                const ul = document.createElement('ul');
                ul.innerHTML = '<li data-path="/">根目錄 (/)</li>';
                ul.querySelector('li').addEventListener('click', (e) => App.events.handleDirectorySelect(e.target, '/'));

                function buildTree(dirItems, parentUl) {
                    dirItems.forEach(dirNode => {
                        const isMovingThisDirOrChild = itemsBeingMoved.some(item => item.isDir && (dirNode.path === item.path || dirNode.path.startsWith(item.path + '/')));
                        if (isMovingThisDirOrChild) return;
                        const isCurrentParent = itemsBeingMoved.every(item => (item.path.substring(0, item.path.lastIndexOf('/')) || '/') === dirNode.path);
                        const li = document.createElement('li');
                        li.textContent = dirNode.name;
                        li.dataset.path = dirNode.path;
                        if (isCurrentParent) {
                            li.style.cssText = "opacity: 0.5; cursor: not-allowed;";
                        } else {
                            li.addEventListener('click', (e) => { e.stopPropagation(); App.events.handleDirectorySelect(e.target, dirNode.path); });
                        }
                        if (dirNode.children?.length > 0) {
                            const nestedUl = document.createElement('ul');
                            li.appendChild(nestedUl);
                            buildTree(dirNode.children, nestedUl);
                        }
                        parentUl.appendChild(li);
                    });
                }
                buildTree(nodes, ul);
                container.appendChild(ul);
            },
            async showOverwriteConfirmation(itemName) {
                const { overwriteModal, overwriteMessage, overwriteConfirmBtn, overwriteAbandonBtn, closeOverwriteModalBtn } = App.elements;
                overwriteMessage.textContent = `一個名為 "${itemName}" 的項目已存在。您要覆蓋它嗎？`;
                this.openModal(overwriteModal);
                return new Promise(resolve => {
                    const handleConfirm = () => cleanupAndResolve('overwrite');
                    const handleAbandon = () => cleanupAndResolve('abandon');
                    const cleanupAndResolve = (decision) => {
                        this.closeModal(overwriteModal);
                        overwriteConfirmBtn.removeEventListener('click', handleConfirm);
                        overwriteAbandonBtn.removeEventListener('click', handleAbandon);
                        closeOverwriteModalBtn.removeEventListener('click', handleAbandon);
                        resolve(decision);
                    }
                    overwriteConfirmBtn.addEventListener('click', handleConfirm, { once: true });
                    overwriteAbandonBtn.addEventListener('click', handleAbandon, { once: true });
                    closeOverwriteModalBtn.addEventListener('click', handleAbandon, { once: true });
                });
            },
        });
        Object.assign(App.events, {
            setup() {
                document.body.addEventListener('click', this.handleBodyClick);
                const { uploadForm, dropArea, userFiles } = App.elements;
                if(uploadForm) uploadForm.addEventListener('submit', this.handleUploadSubmit);
                if (dropArea) {
                    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(evt => {
                        dropArea.addEventListener(evt, App.helpers.preventDefaults, false);
                        document.body.addEventListener(evt, App.helpers.preventDefaults, false);
                    });
                    dropArea.addEventListener('dragenter', () => dropArea.classList.add('highlight'));
                    dropArea.addEventListener('dragleave', () => dropArea.classList.remove('highlight'));
                    dropArea.addEventListener('drop', this.handleFileDrop);
                }
                if(userFiles) userFiles.addEventListener('change', App.ui.updateFileListPreview);
            },
            async handleBodyClick(e) {
                const target = e.target;
                const id = target.id;
                const modal = target.closest('.modal');
                if (target.matches('.close-modal-btn, #cancel-create-item-btn, #cancel-rename-item-btn, #cancel-move-btn, #ok-public-link-display-btn, #done-existing-links-btn, #cancel-share-btn') || (modal && target === modal)) {
                    if (modal?.id === 'video-player-modal') App.ui.closeVideoPlayer();
                    else if (modal) App.ui.closeModal(modal);
                    return;
                }
                const handlers = {
                    'toggle-multi-select-btn': () => { App.state.multiSelectModeActive = !App.state.multiSelectModeActive; App.ui.updateMultiSelectModeUI(); },
                    'listViewBtn': () => App.ui.toggleView('list'),
                    'gridViewBtn': () => App.ui.toggleView('grid'),
                    'show-create-textfile-modal-btn': () => App.ui.openCreateItemModal('textfile'),
                    'show-create-folder-modal-btn': () => App.ui.openCreateItemModal('folder'),
                    'toggleUploadActionsBtn': () => {
                        const { uploadActionsContainer, uploadSection } = App.elements;
                        const isHidden = uploadActionsContainer.style.display === 'none' || !uploadActionsContainer.style.display;
                        uploadActionsContainer.style.display = isHidden ? 'flex' : 'none';
                        if (!isHidden) uploadSection.style.display = 'none';
                        target.textContent = isHidden ? '取消上傳操作' : '上傳';
                    },
                    'upload-files-btn': () => App.events.handleUploadButton(false),
                    'upload-folder-btn': () => App.events.handleUploadButton(true),
                    'action-play-btn': App.events.handleActionPlay,
                    'action-edit-btn': App.events.handleActionEdit,
                    'action-rename-btn': App.events.handleActionRename,
                    'action-download-btn': App.events.handleActionDownload,
                    'action-delete-btn': App.events.handleActionDelete,
                    'action-move-btn': App.events.handleActionMove,
                    'action-share-btn': App.events.handleActionShare,
                    'action-view-existing-links-btn': App.events.handleActionViewLinks,
                    'action-revoke-selected-links-btn': App.events.handleActionRevokeBatch,
                    'select-all-checkbox': () => App.events.handleSelectAll(target, false),
                    'select-all-public-links-checkbox': () => App.events.handleSelectAll(target, true),
                    'confirm-move-btn': App.events.handleConfirmMove,
                    'confirm-share-btn': App.events.handleConfirmShare,
                    'copy-public-link-btn': App.events.handleCopyLink,
                };
                if (handlers[id]) {
                    e.preventDefault();
                    handlers[id]();
                    return;
                }
                const fileListItem = target.closest('#file-container li');
                if (fileListItem) App.events.handleItemClick(e, fileListItem);
                else if (target.closest('#file-container')) {
                    if (!App.state.multiSelectModeActive && App.config.CURRENT_VIEW_MODE !== 'userShares') {
                        App.ui.clearSingleSelection();
                        await App.ui.updateSelectionActions();
                    }
                }
            },
            handleUploadButton(isFolder) {
                const { userFiles, dropAreaText, uploadSection, toggleUploadActionsBtn } = App.elements;
                userFiles.toggleAttribute('webkitdirectory', isFolder);
                userFiles.toggleAttribute('directory', isFolder);
                userFiles.toggleAttribute('multiple', !isFolder);
                dropAreaText.textContent = isFolder ? '將文件夾拖拽到此處...' : '將文件拖拽到此處...';
                uploadSection.style.display = 'block';
                toggleUploadActionsBtn.textContent = '取消上傳操作';
                userFiles.value = null;
                App.ui.updateFileListPreview();
                userFiles.click();
            },
            async handleItemClick(event, listItem) {
                const target = event.target;
                if (target.tagName === 'A' || target.tagName === 'BUTTON' || target.closest('form')) {
                    if (target.matches('.video-link')) {
                        event.preventDefault();
                        App.ui.openVideoPlayer(target.dataset.path, target.dataset.name, target.dataset.type);
                    } else if (target.matches('.view-public-link-btn')) {
                        const { publicLinkDisplayModal, generatedPublicLink } = App.elements;
                        generatedPublicLink.value = target.dataset.url;
                        App.ui.openModal(publicLinkDisplayModal);
                    }
                    return;
                }
                const isUserSharesView = App.config.CURRENT_VIEW_MODE === 'userShares';
                const checkbox = listItem.querySelector(isUserSharesView ? '.public-link-checkbox' : '.item-checkbox');
                if (!checkbox || target === checkbox) return;
                if (App.state.multiSelectModeActive) {
                    checkbox.checked = !checkbox.checked;
                    App.ui.clearSingleSelection();
                } else if (!isUserSharesView) {
                    if (App.state.currentSingleSelectedItem?.element === listItem) {
                        App.ui.clearSingleSelection();
                    } else {
                        App.ui.clearSingleSelection();
                        App.state.currentSingleSelectedItem = App.helpers.getItemData(listItem);
                        listItem.classList.add('single-selected-item');
                    }
                }
                if (isUserSharesView) App.ui.updatePublicLinkSelectionActions();
                else await App.ui.updateSelectionActions();
            },
            handleSelectAll(checkbox, isPublic) {
                if (!App.state.multiSelectModeActive) return;
                const selector = isPublic ? '.public-link-checkbox' : '.item-checkbox';
                document.querySelectorAll(`#file-container ${selector}`).forEach(cb => cb.checked = checkbox.checked);
                if (isPublic) App.ui.updatePublicLinkSelectionActions(); else App.ui.updateSelectionActions();
            },
            async handleUploadSubmit(event) {
                event.preventDefault();
                const { userFiles, uploadProgressContainer, uploadButton, fileListPreview } = App.elements;
                if (userFiles.files.length === 0) return alert('請選擇要上傳的文件或文件夾。');
                
                let finalFilesToUpload = [];
                let processedTopLevelItems = new Set();
                for (const file of Array.from(userFiles.files)) {
                    let nameToCheck = file.webkitRelativePath ? file.webkitRelativePath.split('/')[0] : file.name;
                    if (App.config.EXISTING_ITEM_NAMES_ON_PAGE.includes(nameToCheck.toLowerCase()) && !processedTopLevelItems.has(nameToCheck.toLowerCase())) {
                        processedTopLevelItems.add(nameToCheck.toLowerCase());
                        const userDecision = await App.ui.showOverwriteConfirmation(nameToCheck);
                        if (userDecision === 'overwrite') {
                            finalFilesToUpload.push(...Array.from(userFiles.files).filter(f => (f.webkitRelativePath || f.name).startsWith(nameToCheck)));
                        }
                    } else {
                        finalFilesToUpload.push(file);
                    }
                }
                finalFilesToUpload = [...new Set(finalFilesToUpload)]; // Remove duplicates
                
                if (finalFilesToUpload.length === 0) {
                    alert('沒有文件準備上傳（可能所有衝突的文件都已被放棄）。');
                    return;
                }
                
                const formData = new FormData(App.elements.uploadForm);
                formData.delete('userFiles');
                finalFilesToUpload.forEach(file => formData.append('userFiles', file, file.webkitRelativePath || file.name));
                App.api.uploadFiles(formData);
            },
            handleFileDrop(e) {
                const { dropArea, userFiles, uploadSection, toggleUploadActionsBtn } = App.elements;
                dropArea.classList.remove('highlight');
                userFiles.files = e.dataTransfer.files;
                App.ui.updateFileListPreview();
                uploadSection.style.display = 'block';
                toggleUploadActionsBtn.textContent = '取消上傳操作';
            },
            handleDirectorySelect(target, path) {
                const { selectedDestinationPath, moveDestinationInput, confirmMoveBtn } = App.elements;
                document.querySelectorAll('#directory-tree-container li.selected-dir').forEach(el => el.classList.remove('selected-dir'));
                target.classList.add('selected-dir');
                selectedDestinationPath.textContent = path;
                moveDestinationInput.value = path;
                confirmMoveBtn.disabled = false;
            },
            // --- ACTION HANDLERS ---
            handleActionPlay() {
                if(App.elements.actionPlayBtn.disabled) return;
                const items = App.state.multiSelectModeActive ? App.ui.getCheckboxSelectedItems() : [App.state.currentSingleSelectedItem];
                if (items.length === 1 && items[0]?.isPlayableVideo) App.ui.openVideoPlayer(items[0].encodedPath, items[0].name, items[0].videoType);
            },
            handleActionEdit() {
                if(App.elements.actionEditBtn.disabled) return;
                const items = App.state.multiSelectModeActive ? App.ui.getCheckboxSelectedItems() : [App.state.currentSingleSelectedItem];
                if (items.length === 1 && !items[0].isDir) {
                    let url = `/edit?path=${items[0].encodedPath}`;
                    if (App.config.VIEW_CONTEXT_USER_USERNAME && App.config.CURRENT_SESSION_USER_ROLE === 'admin' && App.config.VIEW_CONTEXT_USER_USERNAME !== App.config.CURRENT_SESSION_USER_USERNAME) {
                        url += `&targetUsername=${encodeURIComponent(App.config.VIEW_CONTEXT_USER_USERNAME)}`;
                    }
                    window.location.href = url;
                }
            },
            handleActionRename() {
                if(App.elements.actionRenameBtn.disabled) return;
                const items = App.state.multiSelectModeActive ? App.ui.getCheckboxSelectedItems() : [App.state.currentSingleSelectedItem];
                if (items.length === 1) App.ui.openRenameModal(items[0]);
            },
            async handleActionDelete() {
                if(App.elements.actionDeleteBtn.disabled) return;
                const itemsToDelete = App.state.multiSelectModeActive ? App.ui.getCheckboxSelectedItems() : [App.state.currentSingleSelectedItem];
                if (itemsToDelete.length === 0) return;
                if (confirm(`確定要刪除選中的 ${itemsToDelete.length} 個項目嗎？此操作不可恢復！`)) {
                    const { success, message } = await App.api.deleteItems(itemsToDelete);
                    alert(message);
                    if (success) window.location.reload();
                }
            },
            async handleActionMove() {
                if(App.elements.actionMoveBtn.disabled) return;
                const itemsToMove = App.state.multiSelectModeActive ? App.ui.getCheckboxSelectedItems() : [App.state.currentSingleSelectedItem];
                if (itemsToMove.length === 0) return;
                const { moveDestinationInput, selectedDestinationPath, confirmMoveBtn, directoryTreeContainer, moveModal } = App.elements;
                moveDestinationInput.value = '';
                selectedDestinationPath.textContent = '無';
                confirmMoveBtn.disabled = true;
                directoryTreeContainer.innerHTML = '<p>正在加載目錄...</p>';
                App.ui.openModal(moveModal);
                try {
                    const tree = await App.api.fetchDirectoryTree(itemsToMove.filter(i => i.isDir).map(i => i.path));
                    App.state.currentDirectoryTree = tree;
                    App.ui.renderDirectoryTree(tree, directoryTreeContainer, itemsToMove);
                } catch (error) {
                    directoryTreeContainer.innerHTML = `<p style="color:red;">加載目錄失敗: ${error.message}</p>`;
                }
            },
            async handleConfirmMove() {
                if(App.elements.confirmMoveBtn.disabled) return;
                const itemsToMove = App.state.multiSelectModeActive ? App.ui.getCheckboxSelectedItems() : [App.state.currentSingleSelectedItem];
                const destinationPath = App.elements.moveDestinationInput.value;
                if (!itemsToMove.length || destinationPath === null || destinationPath === undefined) return alert('請選擇項目和目標。');
                for (const item of itemsToMove) {
                    const itemParentPath = item.path.substring(0, item.path.lastIndexOf('/')) || '/';
                    if (itemParentPath === destinationPath) return alert(`項目 "${item.name}" 已在目標文件夾中。`);
                    if (item.isDir && (destinationPath === item.path || destinationPath.startsWith(item.path + '/'))) return alert(`不能將文件夾 "${item.name}" 移動到其自身或其子文件夾中。`);
                }
                const { success, message, redirectUrl } = await App.api.moveItems(itemsToMove.map(i => i.path), destinationPath);
                alert(message);
                if (success) window.location.href = redirectUrl || window.location.href;
            },
            handleActionDownload() {
                if(App.elements.actionDownloadBtn.disabled) return;
                const itemsToDownload = App.state.multiSelectModeActive ? App.ui.getCheckboxSelectedItems() : [App.state.currentSingleSelectedItem];
                if (itemsToDownload.length === 0) return alert("請選擇要下載的項目。");
                
                const targetUsername = (App.config.VIEW_CONTEXT_USER_USERNAME && App.config.CURRENT_SESSION_USER_ROLE === 'admin' && App.config.VIEW_CONTEXT_USER_USERNAME !== App.config.CURRENT_SESSION_USER_USERNAME) ? App.config.VIEW_CONTEXT_USER_USERNAME : '';

                if (itemsToDownload.length === 1 && !itemsToDownload[0].isDir) {
                    let url = `/download?path=${itemsToDownload[0].encodedPath}`;
                    if (targetUsername) url += `&targetUsername=${encodeURIComponent(targetUsername)}`;
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = itemsToDownload[0].name;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                } else {
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '/download-archive';
                    const itemsPayload = itemsToDownload.map(item => ({ path: item.path, name: item.name, isDir: item.isDir }));
                    form.innerHTML = `
                        <input type="hidden" name="items" value='${JSON.stringify(itemsPayload)}'>
                        <input type="hidden" name="_csrf" value="${App.config.CSRF_TOKEN}">
                        ${targetUsername ? `<input type="hidden" name="targetUsername" value="${targetUsername}">` : ''}
                    `;
                    document.body.appendChild(form);
                    form.submit();
                    document.body.removeChild(form);
                }
            },
            handleActionShare() {
                if(App.elements.actionShareBtn.disabled) return;
                const items = App.state.multiSelectModeActive ? App.ui.getCheckboxSelectedItems() : [App.state.currentSingleSelectedItem];
                if (items.length === 1) {
                    const item = items[0];
                    const { shareModal, shareItemNameDisplay, shareFilePathInput, shareIsDirectoryInput, shareAllowDownload, shareAllowView } = App.elements;
                    shareItemNameDisplay.textContent = item.name;
                    shareFilePathInput.value = item.path;
                    shareIsDirectoryInput.value = item.isDir;
                    shareAllowDownload.checked = true;
                    shareAllowView.checked = true;
                    App.ui.openModal(shareModal);
                }
            },
            async handleConfirmShare() {
                const { shareFilePathInput, shareIsDirectoryInput, shareAllowDownload, shareAllowView, shareModal, publicLinkDisplayModal, generatedPublicLink } = App.elements;
                const payload = {
                    filePathToShare: shareFilePathInput.value,
                    isDirectory: shareIsDirectoryInput.value === 'true',
                    allowDownload: shareAllowDownload.checked,
                    allowView: shareAllowView.checked,
                };
                const { success, publicUrl, message } = await App.api.createPublicLink(payload);
                if (success) {
                    App.ui.closeModal(shareModal);
                    generatedPublicLink.value = publicUrl;
                    App.ui.openModal(publicLinkDisplayModal);
                    if (App.config.CURRENT_VIEW_MODE === 'userShares') window.location.reload();
                } else {
                    alert(`創建失敗: ${message || '未知錯誤'}`);
                }
            },
            async handleActionViewLinks() {
                if(App.elements.actionViewExistingLinksBtn.disabled) return;
                const items = App.state.multiSelectModeActive ? App.ui.getCheckboxSelectedItems() : [App.state.currentSingleSelectedItem];
                if (items.length === 1) {
                    const item = items[0];
                    const { existingLinksModal, existingLinksItemName, existingLinksListContainer } = App.elements;
                    existingLinksItemName.textContent = item.name;
                    existingLinksListContainer.innerHTML = '<p>正在加載連結...</p>';
                    App.ui.openModal(existingLinksModal);
                    try {
                        const { success, links, message } = await App.api.fetchItemPublicLinks(item.path);
                        if (success && links?.length > 0) {
                            existingLinksListContainer.innerHTML = `<ul>${links.map(link => `
                                <li>
                                    <div class="link-info">
                                        <a href="${link.publicUrl}" target="_blank">${link.publicUrl}</a>
                                        <span class="link-details">
                                            創建於: ${App.helpers.formatDate(link.created_at)}, 
                                            訪問: ${link.visit_count} 次
                                        </span>
                                    </div>
                                    <button class="secondary action-button-small revoke-link-btn" data-link-id="${link.link_id}">撤銷</button>
                                </li>`).join('')}</ul>`;
                            existingLinksListContainer.querySelectorAll('.revoke-link-btn').forEach(btn => {
                                btn.addEventListener('click', async e => {
                                    if(confirm('確定要撤銷此連結嗎？')) {
                                        const { success, message } = await App.api.revokePublicLink(e.target.dataset.linkId);
                                        alert(message);
                                        if(success) window.location.reload();
                                    }
                                });
                            });
                        } else {
                            existingLinksListContainer.innerHTML = `<p>${success ? '此項目沒有已分享的公開連結。' : `獲取列表失敗: ${message}`}</p>`;
                        }
                    } catch (e) {
                        existingLinksListContainer.innerHTML = `<p style="color:red;">獲取連結列表時發生客戶端錯誤。</p>`;
                    }
                }
            },
            async handleActionRevokeBatch() {
                const linkIds = App.ui.getSelectedPublicLinkIds();
                if (linkIds.length === 0) return alert('請選擇要撤銷的連結。');
                if (confirm(`確定要撤銷選中的 ${linkIds.length} 個公開連結嗎？`)) {
                    const { success, message } = await App.api.revokePublicLinksBatch(linkIds);
                    alert(message);
                    if (success) window.location.reload();
                }
            },
            handleCopyLink() {
                const { generatedPublicLink } = App.elements;
                generatedPublicLink.select();
                try {
                    document.execCommand('copy');
                    alert('連結已複製到剪貼簿！');
                } catch (err) {
                    alert('複製失敗。');
                }
            },
        });
        Object.assign(App.api, {
            async fetchDirectoryTree(excludePaths = []) {
                const params = new URLSearchParams();
                if (App.config.VIEW_CONTEXT_USER_USERNAME && App.config.CURRENT_SESSION_USER_ROLE === 'admin') params.set('targetUsername', App.config.VIEW_CONTEXT_USER_USERNAME);
                if (excludePaths.length > 0) params.set('excludePaths', excludePaths.join(','));
                const response = await fetch(`/api/directories?${params.toString()}`);
                if (!response.ok) throw new Error(`Server error: ${response.statusText}`);
                return response.json();
            },
            async deleteItems(items) {
                const body = { paths: items.map(i => i.path), _csrf: App.config.CSRF_TOKEN };
                if (App.config.VIEW_CONTEXT_USER_USERNAME && App.config.CURRENT_SESSION_USER_ROLE === 'admin') body.targetUsername = App.config.VIEW_CONTEXT_USER_USERNAME;
                const response = await fetch('/delete-items', {
                    method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body)
                });
                return response.json();
            },
            async moveItems(sourcePaths, destinationPath) {
                const body = { sourcePaths, destinationPath, _csrf: App.config.CSRF_TOKEN };
                if (App.config.VIEW_CONTEXT_USER_USERNAME && App.config.CURRENT_SESSION_USER_ROLE === 'admin') body.targetUsername = App.config.VIEW_CONTEXT_USER_USERNAME;
                const response = await fetch('/move-items', {
                    method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body)
                });
                return response.json();
            },
            async fetchItemPublicLinks(filePath) {
                const params = new URLSearchParams({ filePath });
                if (App.config.VIEW_CONTEXT_USER_USERNAME && App.config.CURRENT_SESSION_USER_ROLE === 'admin') params.set('targetUsername', App.config.VIEW_CONTEXT_USER_USERNAME);
                const response = await fetch(`/api/item-public-links?${params.toString()}`);
                return response.json();
            },
            async createPublicLink(payload) {
                payload._csrf = App.config.CSRF_TOKEN;
                if (App.config.VIEW_CONTEXT_USER_USERNAME && App.config.CURRENT_SESSION_USER_ROLE === 'admin') payload.targetUsername = App.config.VIEW_CONTEXT_USER_USERNAME;
                const response = await fetch('/actions/create-public-link', {
                    method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload)
                });
                return response.json();
            },
            async revokePublicLink(link_id) {
                const body = { link_id, _csrf: App.config.CSRF_TOKEN };
                if (App.config.VIEW_CONTEXT_USER_USERNAME && App.config.CURRENT_SESSION_USER_ROLE === 'admin') body.contextUsername = App.config.VIEW_CONTEXT_USER_USERNAME;
                const response = await fetch('/actions/revoke-public-link', {
                    method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body)
                });
                if(response.redirected) return { success: true, message: "連結已撤銷" };
                return response.json();
            },
            async revokePublicLinksBatch(link_ids) {
                const body = { link_ids, _csrf: App.config.CSRF_TOKEN };
                if (App.config.VIEW_CONTEXT_USER_USERNAME && App.config.CURRENT_SESSION_USER_ROLE === 'admin') body.contextUsername = App.config.VIEW_CONTEXT_USER_USERNAME;
                const response = await fetch('/actions/revoke-public-links-batch', {
                    method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body)
                });
                return response.json();
            },
             uploadFiles(formData) {
                const { uploadForm, uploadProgressContainer, uploadProgressBar } = App.elements;
                const xhr = new XMLHttpRequest();
                xhr.open('POST', uploadForm.action, true);
                if (uploadProgressContainer) uploadProgressContainer.style.display = 'block';
                xhr.upload.onprogress = (event) => {
                    if (event.lengthComputable) {
                        const percent = Math.round((event.loaded / event.total) * 100);
                        if (uploadProgressBar) {
                            uploadProgressBar.style.width = percent + '%';
                            uploadProgressBar.textContent = percent + '%';
                        }
                    }
                };
                xhr.onload = () => {
                    if (uploadProgressContainer) uploadProgressContainer.style.display = 'none';
                    let res; try { res = JSON.parse(xhr.responseText); } catch(e){}
                    if (xhr.status >= 200 && xhr.status < 300) {
                        if (res?.redirectUrl) window.location.href = res.redirectUrl;
                        else { alert(res?.message || '上傳成功！'); window.location.reload(); }
                    } else {
                        alert(`上傳失敗: ${res?.message || xhr.statusText}`);
                    }
                };
                xhr.onerror = () => {
                    if (uploadProgressContainer) uploadProgressContainer.style.display = 'none';
                    alert('上傳過程中發生網絡錯誤。');
                };
                xhr.send(formData);
            },
        });
        
        // --- App Initialization ---
        document.addEventListener('DOMContentLoaded', () => App.init());
    </script>
</body>
</html>
