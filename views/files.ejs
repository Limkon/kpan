<%# views/files.ejs %>
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= locals.pageTitle || ( (locals.viewTargetUsername ? viewTargetUsername : user.username) + ' 的文件') %> - 網路硬碟</title>
    <link rel="stylesheet" href="/style.css">
    <link id="theme-stylesheet" rel="stylesheet" href="">
    <style>
        /* Basic styling for new elements - move to style.css for production */
        #selection-action-bar {
            padding: 10px;
            background-color: #f0f0f0; /* Light grey, themeable */
            border-bottom: 1px solid #ccc; /* Themeable */
            margin-bottom: 15px;
            display: none; /* Hidden by default */
            flex-wrap: wrap;
            gap: 10px;
            align-items: center;
        }
        #selection-action-bar button {
            margin: 0;
        }
        .item-checkbox {
            margin-right: 10px;
            width: 18px; /* Larger checkbox */
            height: 18px;
            vertical-align: middle;
        }
        .file-entry-selectable { /* Wrapper for checkbox and item content */
            display: flex;
            align-items: center;
            width: 100%;
        }
        .file-content-wrapper { /* To take remaining width */
            flex-grow: 1;
            display: flex; /* For list view alignment */
            justify-content: space-between; /* For list view alignment */
            align-items: center; /* For list view alignment */
        }
        .list-view li { /* Ensure list items can contain positioned children */
            position: relative;
        }
        .list-view .file-content-wrapper > .file-entry {
             flex-grow: 1; /* Allow file name to take space */
        }
        .list-view .file-actions-placeholder { /* Space for old actions, now empty or for selection count */
            min-width: 150px; /* Adjust as needed */
            text-align: right;
            font-size: 0.9em;
            color: #666;
        }

        #move-modal {
            display: none;
            position: fixed;
            z-index: 1001;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.5);
        }
        .move-modal-content {
            background-color: #fff; /* Themeable */
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888; /* Themeable */
            border-radius: 8px;
            width: 80%;
            max-width: 500px;
            color: #333; /* Themeable */
        }
        .move-modal-content h3 { margin-top: 0;}
        #directory-tree-container {
            max-height: 300px;
            overflow-y: auto;
            border: 1px solid #eee; /* Themeable */
            padding: 10px;
            margin-bottom: 15px;
        }
        #directory-tree-container ul { list-style-type: none; padding-left: 20px; }
        #directory-tree-container li { padding: 5px 0; cursor: pointer; }
        #directory-tree-container li:hover { background-color: #f0f0f0; } /* Themeable */
        #directory-tree-container li.selected-dir { background-color: #007bff; color: white; } /* Themeable */

        .close-modal-btn { float: right; font-size: 1.5em; font-weight: bold; cursor: pointer; }

        /* Ensure file-entry still handles icons and names correctly */
        .file-entry {
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .list-view .file-entry .file-name {
             overflow: hidden; text-overflow: ellipsis; white-space: nowrap;
        }
        .grid-view .file-entry {
            flex-direction: column;
            justify-content: center;
            text-align: center;
        }
        #select-all-container {
            display: flex;
            align-items: center;
            padding: 5px 10px;
            background-color: #f9f9f9; /* Themeable */
            border-bottom: 1px solid #eee; /* Themeable */
        }
        #select-all-container label { margin-left: 5px; font-weight: normal;}

        /* Styles for inline rename form - attempt to fix layering */
        .rename-form {
            display: none;
            position: absolute; /* Position relative to the list item */
            left: 30px; /* Indent from checkbox */
            right: 10px; /* Give some padding on the right */
            top: 100%; /* Position below the item content, might need adjustment */
            background-color: var(--container-bg, #ffffff); /* Use CSS var for theme compatibility */
            padding: 10px;
            border: 1px solid var(--border-color, #ccc);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
            z-index: 100; /* Higher z-index */
            margin-top: 2px; /* Small gap */
        }
         /* Dark theme specific for rename form if not handled by CSS variables */
        .dark-theme .rename-form {
            background-color: #3a3a3a;
            border-color: #555;
        }


        /* From previous styles, might need adjustments */
        #upload-section { display: none; padding: 20px; border: 1px solid #dee2e6; border-radius: 6px; margin-top: 15px; background-color: #f8f9fa; }
        .search-results-info { padding: 10px; background-color: #e9ecef; border-radius: 5px; margin-bottom: 15px; font-size: 0.9em; }
        .file-location-in-search { font-size: 0.8em; color: #6c757d; margin-left: 8px; }

    </style>
</head>
<body>
    <div class="container">
        <header>
             <h1>
                <% if (locals.isSearchResult && locals.searchQuery) { %>
                    有關 "<%= searchQuery %>" 的搜尋結果 <% if (locals.viewTargetUsername) { %>(在 <%= viewTargetUsername %> 的文件中)<% } else { %>(在您的文件中)<% } %>
                <% } else if (locals.viewTargetUsername && user.role === 'admin') { %>
                    管理員視角: <%= viewTargetUsername %> 的文件
                <% } else { %>
                    <%= user.username %> 的文件
                <% } %>
            </h1>
            <nav>
                <% if (user.role === 'admin') { %><a href="/admin">管理面板</a><% } %>
                <a href="/change-password">修改密碼</a>
                <a href="/logout">登出</a>
            </nav>
        </header>

        <% if (locals.message) { %>
            <p class="message <%= (locals.messageType === 'error' || (locals.message && (message.includes('失敗') || message.includes('错误') || message.includes('沒有選擇文件') || message.includes('無效的') ))) ? 'error-message' : (locals.messageType === 'success' ? '' : (locals.messageType === 'warning' ? 'warning-message' : '') ) %>"><%= message %></p>
        <% } %>

        <% if (!locals.isSearchResult) { %>
            <div class="current-path">
                當前路徑:
                <a href="/files<%= locals.viewTargetUsername && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewTargetUsername) : '' %>">根目錄</a>
                <%
                    let pathSegments = currentPath.split('/').filter(Boolean);
                    let cumulativePathForLink = '';
                    const adminTargetQueryForPath = locals.viewTargetUsername && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewTargetUsername) : '';
                %>
                <% pathSegments.forEach(segment => { %>
                    <% cumulativePathForLink += '/' + segment; %>
                    / <a href="/files?path=<%= encodeURIComponent(cumulativePathForLink) %><%= adminTargetQueryForPath %>"><%= segment %></a>
                <% }); %>
            </div>
        <% } else if (locals.searchQuery) { %>
             <div class="search-results-info">
                正在顯示包含 "<%= searchQuery %>" 的文件。
                <a href="/files<%= locals.viewTargetUsername && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewTargetUsername) : '' %>">清除搜索並返回根目錄</a>
            </div>
        <% } %>

        <div class="file-browser-controls">
            <form action="/files" method="GET" class="control-form" style="flex-grow:2;">
                <% if (locals.viewTargetUsername && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>">
                <% } %>
                <input type="search" name="q" placeholder="搜索 <%= locals.viewTargetUsername || user.username %> 的文件..." value="<%= locals.searchQuery || '' %>" style="flex-grow:1;">
                <button type="submit">搜索</button>
            </form>

            <% if (!locals.isSearchResult && currentPath && currentPath !== '/search-results') { %>
                <form action="/create-folder" method="POST" class="control-form">
                    <input type="hidden" name="currentPath" value="<%= currentPath %>">
                    <% if (locals.viewTargetUsername && user.role === 'admin') { %><input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>"><% } %>
                    <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                    <input type="text" name="folderName" placeholder="新文件夾名稱" required>
                    <button type="submit">創建文件夾</button>
                </form>
                <button type="button" id="toggleUploadBtn" class="upload-button-main">上傳文件到此</button>
            <% } %>
            <div class="view-toggle">
                <button id="listViewBtn">列表</button>
                <button id="gridViewBtn">網格</button>
            </div>
        </div>
        
        <div id="selection-action-bar">
            <span id="selection-count" style="margin-right: 15px;">已選擇 0 項</span>
            <button id="action-edit-btn" disabled>編輯</button>
            <button id="action-rename-btn" disabled>重命名</button>
            <button id="action-move-btn" disabled>移動</button>
            <button id="action-download-btn" disabled>下載 (單個文件)</button>
            <button id="action-delete-btn" class="secondary" disabled>删除</button>
        </div>


        <% if (!locals.isSearchResult && currentPath && currentPath !== '/search-results') { %>
            <div id="upload-section">
                <h2>上傳到 "<%= currentPath === '/' ? '根目錄' : currentPath.split('/').pop() %>"</h2>
                <div id="drop-area">
                    <form id="upload-form" action="/upload" method="POST" enctype="multipart/form-data">
                        <input type="hidden" name="currentPath" value="<%= currentPath %>">
                        <% if (locals.viewTargetUsername && user.role === 'admin') { %><input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>"><% } %>
                        <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                        <input type="file" id="userFiles" name="userFiles" multiple style="display: none;">
                        <p>將文件拖拽到此處，或 <label for="userFiles">點擊選擇文件</label></p>
                        <button type="submit" id="upload-button">上傳已選文件</button>
                    </form>
                    <div id="file-list-preview" style="margin-top:10px; text-align:left;"></div>
                </div>
            </div>
        <% } %>

        <h2><%= locals.isSearchResult ? '搜索結果' : '文件列表' %></h2>
        <% if (items.length > 0) { %>
            <div id="select-all-container">
                <input type="checkbox" id="select-all-checkbox">
                <label for="select-all-checkbox">全選/取消全選</label>
            </div>
        <% } %>
        <div id="file-container">
            <% if (items.length > 0) { %>
                <% const adminTargetQueryForActions = locals.viewTargetUsername && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewTargetUsername) : ''; %>
                <ul>
                    <% items.forEach(item => { %>
                        <li>
                            <div class="file-entry-selectable">
                                <input type="checkbox" class="item-checkbox"
                                       data-path="<%= item.path %>"
                                       data-encoded-path="<%= item.encodedPath %>"
                                       data-name="<%= item.name %>"
                                       data-encoded-name="<%= item.encodedName %>"
                                       data-is-dir="<%= item.isDir %>"
                                       data-raw-name="<%= item.name.replace(/'/g, '\\\'').replace(/"/g, '&quot;') %>">
                                <div class="file-content-wrapper">
                                    <% if (item.isDir) { %>
                                        <div class="file-entry">
                                            <span class="file-icon-large folder-icon">📁</span>
                                            <a href="/files?path=<%= item.encodedPath %><%= adminTargetQueryForActions %>" class="file-name"><%= item.name %></a>
                                            <% if (locals.isSearchResult) { %><span class="file-location-in-search">(位於: <%= (item.path.substring(0, item.path.lastIndexOf('/')) || '/') %>)</span><% } %>
                                        </div>
                                    <% } else { %>
                                        <div class="file-entry">
                                            <%
                                                const ext = item.name.includes('.') ? item.name.substring(item.name.lastIndexOf('.') + 1).toLowerCase() : '';
                                                let largeIcon = '📄';
                                                if (['txt', 'md', 'json', 'js', 'css', 'html', 'xml', 'log', 'csv', 'py', 'java', 'c', 'cpp', 'go', 'rb'].includes(ext)) { largeIcon = '📝';}
                                                else if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'].includes(ext)) { largeIcon = '🖼️'; }
                                                else if (['pdf'].includes(ext)) { largeIcon = '📕';}
                                                else if (['doc', 'docx', 'odt'].includes(ext)) { largeIcon = '📃';}
                                                else if (['xls', 'xlsx', 'ods'].includes(ext)) { largeIcon = '📊';}
                                                else if (['ppt', 'pptx', 'odp'].includes(ext)) { largeIcon = '🖥️';}
                                                else if (['zip', 'rar', 'tar', 'gz', '7z'].includes(ext)) { largeIcon = '📦';}
                                                else if (['mp3', 'wav', 'ogg', 'aac', 'flac'].includes(ext)) { largeIcon = '🎵';}
                                                else if (['mp4', 'mov', 'avi', 'mkv', 'webm', 'wmv'].includes(ext)) { largeIcon = '🎬';}
                                            %>
                                            <span class="file-icon-large"><%= largeIcon %></span>
                                            <span class="file-name"><%= item.name %></span>
                                            <% if (locals.isSearchResult) { %><span class="file-location-in-search">(位於: <%= (item.path.substring(0, item.path.lastIndexOf('/')) || '/') %>)</span><% } %>
                                        </div>
                                    <% } %>
                                    <span class="file-actions-placeholder"></span>
                                </div>
                            </div>
                             <div class="rename-form" id="rename-form-<%= item.encodedName %>">
                                <form action="/rename" method="POST" class="control-form inline-form">
                                    <input type="hidden" name="currentPath" value="<%= locals.isSearchResult ? (item.path.substring(0, item.path.lastIndexOf('/')) || '/') : currentPath %>">
                                    <input type="hidden" name="oldPath" value="<%= item.path %>">
                                    <input type="hidden" name="isDir" value="<%= item.isDir %>">
                                    <% if (locals.viewTargetUsername && user.role === 'admin') { %><input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>"><% } %>
                                    <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                                    <input type="text" name="newName" placeholder="新名稱" value="<%= item.name %>" required>
                                    <button type="submit">確認</button>
                                    <button type="button" class="secondary" onclick="hideRenameForm('<%= item.encodedName %>'); return false;">取消</button>
                                </form>
                            </div>
                        </li>
                    <% }) %>
                </ul>
            <% } else { %>
                <p><%= locals.isSearchResult ? '找不到符合條件的文件。' : '此文件夾為空。' %></p>
            <% } %>
        </div>
    </div>

    <div id="move-modal">
        <div class="move-modal-content">
            <span class="close-modal-btn" id="close-move-modal-btn">&times;</span>
            <h3>移動選中項目到:</h3>
            <div id="directory-tree-container">
                <p>正在加載目錄...</p>
            </div>
            <p>已選擇目標: <strong id="selected-destination-path">無</strong></p>
            <input type="hidden" id="move-destination-input" value="">
            <button id="confirm-move-btn" disabled>確認移動</button>
            <button type="button" class="secondary" id="cancel-move-btn">取消</button>
        </div>
    </div>

    <%- include('partials/theme-switcher') %>
    <script src="/theme.js"></script>
    <script>
        // Ensure these are correctly passed from server and available globally or within this scope
        const ALLOWED_TEXT_EXTENSIONS = <%- JSON.stringify(locals.ALLOWED_TEXT_EXTENSIONS || []) %>;
        const CSRF_TOKEN = "<%= locals.csrfToken || '' %>";
        const VIEW_TARGET_USERNAME = "<%= locals.viewTargetUsername || '' %>";
        const CURRENT_USER_ROLE = "<%= user.role %>";
        const CURRENT_PATH_ON_LOAD = "<%= currentPath %>";
        const IS_SEARCH_RESULT_VIEW = <%= locals.isSearchResult || false %>;


        document.addEventListener('DOMContentLoaded', () => {
            const itemCheckboxes = document.querySelectorAll('.item-checkbox');
            const selectAllCheckbox = document.getElementById('select-all-checkbox');
            const selectionActionBar = document.getElementById('selection-action-bar');
            const selectionCountDisplay = document.getElementById('selection-count');

            const actionEditBtn = document.getElementById('action-edit-btn');
            const actionRenameBtn = document.getElementById('action-rename-btn');
            const actionMoveBtn = document.getElementById('action-move-btn');
            const actionDownloadBtn = document.getElementById('action-download-btn');
            const actionDeleteBtn = document.getElementById('action-delete-btn');

            const moveModal = document.getElementById('move-modal');
            const closeMoveModalBtn = document.getElementById('close-move-modal-btn');
            const directoryTreeContainer = document.getElementById('directory-tree-container');
            const confirmMoveBtn = document.getElementById('confirm-move-btn');
            const cancelMoveBtn = document.getElementById('cancel-move-btn');
            const selectedDestinationPathDisplay = document.getElementById('selected-destination-path');
            const moveDestinationInput = document.getElementById('move-destination-input');

            let currentDirectoryTree = [];

            function getSelectedItems() {
                const selected = [];
                itemCheckboxes.forEach(cb => {
                    if (cb.checked) {
                        selected.push({
                            path: cb.dataset.path,
                            encodedPath: cb.dataset.encodedPath,
                            name: cb.dataset.name,
                            encodedName: cb.dataset.encodedName,
                            isDir: cb.dataset.isDir === 'true',
                            rawName: cb.dataset.rawName
                        });
                    }
                });
                return selected;
            }

            function updateSelectionActions() {
                const selectedItems = getSelectedItems();
                const count = selectedItems.length;

                if (count > 0) {
                    selectionActionBar.style.display = 'flex';
                    selectionCountDisplay.textContent = `已選擇 ${count} 項`;
                } else {
                    selectionActionBar.style.display = 'none';
                }
                
                // EDIT BUTTON LOGIC: Enable if exactly one item is selected, it's NOT a directory, AND its extension is in ALLOWED_TEXT_EXTENSIONS
                let canEdit = false;
                if (count === 1 && !selectedItems[0].isDir) {
                    const fileName = selectedItems[0].name;
                    const fileExt = fileName.includes('.') ? fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase() : '';
                    if (ALLOWED_TEXT_EXTENSIONS.includes('.' + fileExt) || ALLOWED_TEXT_EXTENSIONS.includes(fileExt)) { // Check with and without leading dot for robustness
                        canEdit = true;
                    }
                }
                actionEditBtn.disabled = !canEdit;

                actionRenameBtn.disabled = !(count === 1);
                actionMoveBtn.disabled = !(count > 0);
                actionDownloadBtn.disabled = !(count === 1 && !selectedItems[0].isDir); // Only for single files
                actionDeleteBtn.disabled = !(count > 0);
            }

            itemCheckboxes.forEach(checkbox => {
                checkbox.addEventListener('change', updateSelectionActions);
            });

            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', (e) => {
                    itemCheckboxes.forEach(cb => cb.checked = e.target.checked);
                    updateSelectionActions();
                });
            }

            if (actionEditBtn) {
                actionEditBtn.addEventListener('click', () => {
                    const selected = getSelectedItems();
                    if (actionEditBtn.disabled) return; // Double check
                    if (selected.length === 1) { // Should be guaranteed by disabled state, but good practice
                        let url = `/edit?path=${selected[0].encodedPath}`;
                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                            url += `&targetUsername=${encodeURIComponent(VIEW_TARGET_USERNAME)}`;
                        }
                        window.location.href = url;
                    }
                });
            }

            if (actionRenameBtn) {
                actionRenameBtn.addEventListener('click', () => {
                    const selected = getSelectedItems();
                    if (selected.length === 1) {
                        showRenameForm(selected[0].encodedName, selected[0].name, selected[0].isDir);
                    }
                });
            }
            
            if (actionDownloadBtn) {
                actionDownloadBtn.addEventListener('click', () => {
                    const selected = getSelectedItems();
                    if (actionDownloadBtn.disabled) return;
                    if (selected.length === 1 && !selected[0].isDir) {
                        let url = `/download?path=${selected[0].encodedPath}`;
                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                            url += `&targetUsername=${encodeURIComponent(VIEW_TARGET_USERNAME)}`;
                        }
                        // Create a temporary link and click it to trigger download
                        const tempLink = document.createElement('a');
                        tempLink.href = url;
                        tempLink.setAttribute('download', selected[0].name); // Optional: suggest filename
                        tempLink.style.display = 'none';
                        document.body.appendChild(tempLink);
                        tempLink.click();
                        document.body.removeChild(tempLink);
                    } else {
                        alert("打包下載多個文件功能尚未實現。");
                    }
                });
            }

            if (actionDeleteBtn) {
                actionDeleteBtn.addEventListener('click', async () => {
                    const selectedItems = getSelectedItems();
                    if (selectedItems.length === 0) return;

                    const itemNames = selectedItems.map(item => item.rawName).join(', ');
                    if (confirm(`確定要刪除選中的 ${selectedItems.length} 個項目 (${itemNames}) 嗎？此操作不可恢復！`)) {
                        // Ideally, use a batch delete endpoint here.
                        // For now, simulating sequential calls (not recommended for production)
                        let allSucceeded = true;
                        let reloadPage = false;
                        for (const item of selectedItems) {
                            try {
                                let deleteUrl = `/delete?path=${item.encodedPath}&isDir=${item.isDir}`;
                                if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                                    deleteUrl += `&targetUsername=${encodeURIComponent(VIEW_TARGET_USERNAME)}`;
                                }
                                // For a real batch operation, you'd collect all promises or send one request
                                // This is a simplified version for demonstration
                                const response = await fetch(deleteUrl, { method: 'GET' }); // Assuming GET /delete redirects
                                if (response.ok && response.redirected) { // Check if redirect happened
                                   reloadPage = true; // Mark for reload after all attempts
                                } else if (!response.ok) {
                                    // Try to get error message if possible, though GET redirect might not provide one easily
                                    console.error('刪除失敗 (無重定向或錯誤狀態):', item.name, response.status);
                                    allSucceeded = false;
                                }
                            } catch (error) {
                                console.error('刪除項目時出錯:', item.name, error);
                                allSucceeded = false;
                            }
                        }
                        
                        if (reloadPage || !allSucceeded) {
                            // If any redirect happened or any error, reload to reflect changes or show server messages
                            alert(allSucceeded ? "選中項目已嘗試刪除，頁面將刷新。" : "部分項目刪除失敗，頁面將刷新。");
                            window.location.reload();
                        }
                        // Deselect items after action
                        if(selectAllCheckbox) selectAllCheckbox.checked = false;
                        itemCheckboxes.forEach(cb => cb.checked = false);
                        updateSelectionActions();
                    }
                });
            }

            if (actionMoveBtn) {
                actionMoveBtn.addEventListener('click', async () => {
                    const selectedItems = getSelectedItems();
                    if (selectedItems.length === 0) return;
                    
                    moveDestinationInput.value = '';
                    selectedDestinationPathDisplay.textContent = '無';
                    confirmMoveBtn.disabled = true;
                    directoryTreeContainer.innerHTML = '<p>正在加載目錄...</p>';
                    moveModal.style.display = 'block';

                    try {
                        let fetchUrl = '/api/directories';
                        let queryParams = [];
                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                            queryParams.push(`targetUsername=${encodeURIComponent(VIEW_TARGET_USERNAME)}`);
                        }
                        const pathsToExclude = selectedItems.filter(item => item.isDir).map(item => item.path);
                        if (pathsToExclude.length > 0) {
                            queryParams.push(`excludePaths=${encodeURIComponent(pathsToExclude.join(','))}`);
                        }
                        if (queryParams.length > 0) {
                            fetchUrl += `?${queryParams.join('&')}`;
                        }

                        const response = await fetch(fetchUrl);
                        if (!response.ok) throw new Error(`無法獲取目錄列表: ${response.statusText}`);
                        currentDirectoryTree = await response.json();
                        renderDirectoryTree(currentDirectoryTree, directoryTreeContainer, selectedItems.map(i => i.path));
                    } catch (error) {
                        console.error('獲取目錄樹時出錯:', error);
                        directoryTreeContainer.innerHTML = `<p style="color:red;">加載目錄失敗: ${error.message}</p>`;
                    }
                });
            }
            
            function renderDirectoryTree(nodes, container, itemsToMovePaths, currentLevelPath = '/') {
                container.innerHTML = '';
                const ul = document.createElement('ul');
                const rootLi = document.createElement('li');
                rootLi.textContent = '根目錄 (/)';
                rootLi.dataset.path = '/';
                rootLi.addEventListener('click', (e) => selectDestination(e.target, '/'));
                ul.appendChild(rootLi);

                function buildTree(items, parentUl, parentPath) {
                    items.forEach(item => {
                        if (itemsToMovePaths.some(sourcePath => item.path === sourcePath || (sourcePath.startsWith(item.path + '/') && item.path !=='/'))) { return; }
                        if (itemsToMovePaths.some(sourcePath => item.path.startsWith(sourcePath + '/'))) { return; }

                        const li = document.createElement('li');
                        li.textContent = item.name;
                        li.dataset.path = item.path;
                        li.addEventListener('click', (e) => {
                            e.stopPropagation();
                            selectDestination(e.target, item.path);
                        });
                        parentUl.appendChild(li);

                        if (item.children && item.children.length > 0) {
                            const nestedUl = document.createElement('ul');
                            li.appendChild(nestedUl);
                            buildTree(item.children, nestedUl, item.path);
                        }
                    });
                }
                buildTree(nodes, ul, '/');
                container.appendChild(ul);
            }

            function selectDestination(targetElement, path) {
                document.querySelectorAll('#directory-tree-container li.selected-dir').forEach(el => el.classList.remove('selected-dir'));
                targetElement.classList.add('selected-dir');
                selectedDestinationPathDisplay.textContent = path;
                moveDestinationInput.value = path;
                confirmMoveBtn.disabled = false;
            }

            if (closeMoveModalBtn) closeMoveModalBtn.onclick = () => moveModal.style.display = 'none';
            if (cancelMoveBtn) cancelMoveBtn.onclick = () => moveModal.style.display = 'none';
            window.onclick = (event) => { if (event.target == moveModal) moveModal.style.display = 'none'; }

            if (confirmMoveBtn) {
                confirmMoveBtn.addEventListener('click', async () => {
                    const selectedToMove = getSelectedItems();
                    const destinationPath = moveDestinationInput.value;

                    if (selectedToMove.length === 0 || !destinationPath) {
                        alert('請選擇要移動的項目和目標文件夾。');
                        return;
                    }
                    for (const item of selectedToMove) {
                        if (item.isDir && (destinationPath === item.path || destinationPath.startsWith(item.path + '/'))) {
                            alert(`不能將文件夾 "${item.name}" 移動到其自身或其子文件夾中。`);
                            return;
                        }
                    }
                    try {
                        const payload = {
                            sourcePaths: selectedToMove.map(item => item.path),
                            destinationPath: destinationPath,
                        };
                         if (CSRF_TOKEN) { // Add CSRF token if available
                            payload._csrf = CSRF_TOKEN;
                        }
                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                            payload.targetUsername = VIEW_TARGET_USERNAME;
                        }
                        const response = await fetch('/move-items', {
                            method: 'POST',
                            headers: { 
                                'Content-Type': 'application/json',
                                // If using csurf middleware that checks header:
                                // 'CSRF-Token': CSRF_TOKEN 
                            },
                            body: JSON.stringify(payload)
                        });
                        const result = await response.json();
                        if (response.ok && result.success) {
                            alert('項目移動成功！');
                            window.location.reload();
                        } else {
                            alert(`移動失敗: ${result.message || '未知錯誤'}`);
                        }
                    } catch (error) {
                        console.error('移動項目時出錯:', error);
                        alert(`移動項目時發生客戶端錯誤: ${error.message}`);
                    }
                    moveModal.style.display = 'none';
                });
            }

            const toggleUploadBtn = document.getElementById('toggleUploadBtn');
            const uploadSection = document.getElementById('upload-section');
            if (toggleUploadBtn && uploadSection) { /* ... (original logic) ... */ }
            const dropArea = document.getElementById('drop-area');
            const fileInput = document.getElementById('userFiles');
            const fileListPreview = document.getElementById('file-list-preview');
            const uploadFormButton = document.getElementById('upload-button');
            if (dropArea && fileInput && fileListPreview && uploadFormButton) { /* ... (original logic) ... */ }
            const fileContainer = document.getElementById('file-container');
            const listViewBtn = document.getElementById('listViewBtn');
            const gridViewBtn = document.getElementById('gridViewBtn');
            if (fileContainer && listViewBtn && gridViewBtn) { /* ... (original logic) ... */ }
            
            updateSelectionActions(); // Initial call
        });

        function showRenameForm(encodedName, currentName, isDir) {
            document.querySelectorAll('.rename-form').forEach(form => form.style.display = 'none');
            const formContainer = document.getElementById('rename-form-' + encodedName);
            if (formContainer) {
                formContainer.style.display = 'block';
                const inputField = formContainer.querySelector('input[name="newName"]');
                if (inputField) {
                    inputField.value = currentName;
                    inputField.focus();
                    inputField.select();
                }
                const currentPathInput = formContainer.querySelector('input[name="currentPath"]');
                if (currentPathInput && IS_SEARCH_RESULT_VIEW) {
                     const itemOriginalPath = formContainer.querySelector('input[name="oldPath"]').value;
                     currentPathInput.value = itemOriginalPath.substring(0, itemOriginalPath.lastIndexOf('/')) || '/';
                } else if (currentPathInput) {
                    currentPathInput.value = CURRENT_PATH_ON_LOAD;
                }
            }
        }
        function hideRenameForm(encodedName) {
            const form = document.getElementById('rename-form-' + encodedName);
            if (form) form.style.display = 'none';
        }
    </script>
</body>
</html>
