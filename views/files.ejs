<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ÊàëÁöÑÊñá‰ª∂ - Á∂≤Ë∑ØÁ°¨Á¢ü</title>
    <link rel="stylesheet" href="/style.css">
    <style>
        /* Drag and drop area styling */
        #drop-area {
            border: 2px dashed #ccc;
            border-radius: 8px;
            padding: 30px;
            text-align: center;
            margin-bottom: 20px;
            background-color: #f9f9f9;
            transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out;
        }
        #drop-area.highlight {
            border-color: #007bff;
            background-color: #e9f5ff;
        }
        #drop-area p { margin: 0; color: #555; }
        #drop-area label { color: #007bff; cursor: pointer; text-decoration: underline; }

        .file-browser-controls {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
            align-items: center;
        }
        .file-browser-controls input[type="text"] {
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 4px;
            flex-grow: 1;
        }
        .file-browser-controls button {
            padding: 8px 15px;
        }

        .view-toggle { margin-left: auto; } /* Pushes view toggle to the right */
        .view-toggle button { background: #6c757d; }
        .view-toggle button.active { background: #007bff; }


        /* Grid View Styles */
        .grid-view {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); /* Responsive grid */
            gap: 20px;
            list-style-type: none;
            padding: 0;
        }
        .grid-view li {
            background-color: #f9f9f9;
            border: 1px solid #eee;
            border-radius: 8px;
            padding: 15px;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: space-between; /* For actions at bottom */
            min-height: 150px; /* Ensure consistent height */
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .grid-view li:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .grid-view .file-icon-large {
            font-size: 3.5em; /* Larger icon for grid view */
            margin-bottom: 10px;
            color: #007bff; /* Default icon color */
        }
        .grid-view .file-icon-large.folder-icon { color: #ffc107; } /* Folder color */

        .grid-view .file-name {
            font-size: 0.9em;
            word-break: break-all; /* Break long names */
            margin-bottom: 10px;
            flex-grow: 1; /* Allow name to take space */
        }
        .grid-view .file-actions {
            display: flex;
            flex-wrap: wrap; /* Allow actions to wrap on small items */
            justify-content: center;
            gap: 5px; /* Space between action links */
            width: 100%; /* Take full width for centering */
        }
        .grid-view .file-actions .action-link {
            font-size: 0.8em;
            padding: 3px 6px;
            background-color: #e9ecef;
            border-radius: 3px;
            color: #495057;
        }
         .grid-view .file-actions .action-link:hover {
            background-color: #ced4da;
            text-decoration: none;
        }
        .grid-view .file-actions .delete-link { background-color: #f8d7da; color: #721c24; }
        .grid-view .file-actions .delete-link:hover { background-color: #f1b0b7; }
        .grid-view .file-actions .edit-link { background-color: #d4edda; color: #155724; }
        .grid-view .file-actions .edit-link:hover { background-color: #b8dfc1; }


        /* List View Styles (default) */
        .list-view { list-style-type: none; padding: 0; }
        .list-view li {
            background-color: #f9f9f9;
            border: 1px solid #eee;
            padding: 10px 15px;
            margin-bottom: 8px;
            border-radius: 4px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .list-view .file-entry { display: flex; align-items: center; flex-grow: 1; overflow: hidden; }
        .list-view .file-icon { font-size: 1.5em; margin-right: 10px; vertical-align: middle; }
        .list-view .file-name { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
        .list-view .file-actions .action-link { margin-left: 10px; font-size: 0.9em; }
        .list-view .file-actions .edit-link { color: #28a745; }
        .list-view .file-actions .edit-link:hover { color: #1e7e34; }

        /* Current path display */
        .current-path {
            margin-bottom: 15px;
            padding: 10px;
            background-color: #e9ecef;
            border-radius: 4px;
            font-size: 0.95em;
        }
        .current-path a { color: #007bff; }
        .current-path span { color: #6c757d; }

        /* Rename form (modal or inline) */
        .rename-form { display: none; margin-top: 5px; }
        .rename-form input[type="text"] { width: auto; margin-right: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1><%= user.username %> ÁöÑÊñá‰ª∂</h1>
            <nav>
                <a href="/change-password">‰øÆÊîπÂØÜÁ¢º</a>
                <% if (user.role === 'admin') { %>
                    <a href="/admin">ÁÆ°ÁêÜÁî®Êà∂</a>
                <% } %>
                <a href="/logout">ÁôªÂá∫</a>
            </nav>
        </header>

        <% if (locals.message) { %>
            <p class="message <%= (locals.messageType === 'error' || (locals.message && (message.includes('Â§±Êïó') || message.includes('ÈîôËØØ') || message.includes('Ê≤íÊúâÈÅ∏ÊìáÊñá‰ª∂')))) ? 'error-message' : '' %>"><%= message %></p>
        <% } %>

        <div class="current-path">
            Áï∂ÂâçË∑ØÂæë:
            <a href="/files">Ê†πÁõÆÈåÑ</a>
            <% let pathSegments = currentPath.split('/').filter(Boolean); %>
            <% let cumulativePath = ''; %>
            <% pathSegments.forEach(segment => { %>
                <% cumulativePath += '/' + segment; %>
                / <a href="/files?path=<%= encodeURIComponent(cumulativePath) %>"><%= segment %></a>
            <% }); %>
        </div>


        <div class="file-browser-controls">
            <form action="/create-folder" method="POST" style="display: inline-flex; gap: 10px;">
                <input type="hidden" name="currentPath" value="<%= currentPath %>">
                <input type="text" name="folderName" placeholder="Êñ∞Êñá‰ª∂Â§æÂêçÁ®±" required>
                <button type="submit">ÂâµÂª∫Êñá‰ª∂Â§æ</button>
            </form>
            <div class="view-toggle">
                <button id="listViewBtn" class="active" onclick="toggleView('list')">ÂàóË°®</button>
                <button id="gridViewBtn" onclick="toggleView('grid')">Á∂≤Ê†º</button>
            </div>
        </div>


        <h2>‰∏äÂÇ≥Êñá‰ª∂Âà∞ "<%= currentPath === '/' ? 'Ê†πÁõÆÈåÑ' : currentPath.split('/').pop() %>"</h2>
        <div id="drop-area">
            <form id="upload-form" action="/upload" method="POST" enctype="multipart/form-data">
                <input type="hidden" name="currentPath" value="<%= currentPath %>">
                <input type="file" id="userFiles" name="userFiles" multiple style="display: none;">
                <p>Â∞áÊñá‰ª∂ÊãñÊãΩÂà∞Ê≠§ËôïÔºåÊàñ <label for="userFiles">ÈªûÊìäÈÅ∏ÊìáÊñá‰ª∂</label></p>
                <button type="submit" id="upload-button" style="margin-top: 10px;">‰∏äÂÇ≥Â∑≤ÈÅ∏Êñá‰ª∂</button>
            </form>
            <div id="file-list-preview" style="margin-top:10px; text-align:left;"></div>
        </div>

        <h2>Êñá‰ª∂ÂàóË°®</h2>
        <div id="file-container" class="list-view"> <% if (items.length > 0) { %>
                <ul> <% items.forEach(item => { %>
                        <li>
                            <% if (item.isDir) { %>
                                <div class="file-entry">
                                    <span class="file-icon-large folder-icon">üìÅ</span> <span class="file-icon folder-icon">üìÅ</span> <a href="/files?path=<%= encodeURIComponent(item.path) %>" class="file-name"><%= item.name %></a>
                                </div>
                            <% } else { %>
                                <div class="file-entry">
                                     <%
                                        const ext = item.name.includes('.') ? item.name.substring(item.name.lastIndexOf('.') + 1).toLowerCase() : '';
                                        let icon = 'üìÑ'; // Default
                                        let largeIcon = 'üìÑ'; // Default for grid
                                        if (['txt', 'md', 'json', 'js', 'css', 'html', 'xml', 'log', 'csv', 'py', 'java', 'c', 'cpp', 'go', 'rb'].includes(ext)) { icon = 'üìù'; largeIcon = 'üìù';}
                                        else if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'].includes(ext)) { icon = 'üñºÔ∏è'; largeIcon = 'üñºÔ∏è'; }
                                        else if (['pdf'].includes(ext)) { icon = 'üìï'; largeIcon = 'üìï';}
                                        else if (['doc', 'docx'].includes(ext)) { icon = 'üìÉ'; largeIcon = 'üìÉ';}
                                        else if (['xls', 'xlsx'].includes(ext)) { icon = 'üìä'; largeIcon = 'üìä';}
                                        else if (['ppt', 'pptx'].includes(ext)) { icon = 'üñ•Ô∏è'; largeIcon = 'üñ•Ô∏è';}
                                        else if (['zip', 'rar', 'tar', 'gz'].includes(ext)) { icon = 'üì¶'; largeIcon = 'üì¶';}
                                        else if (['mp3', 'wav', 'ogg', 'aac'].includes(ext)) { icon = 'üéµ'; largeIcon = 'üéµ';}
                                        else if (['mp4', 'mov', 'avi', 'mkv', 'webm'].includes(ext)) { icon = 'üé¨'; largeIcon = 'üé¨';}
                                    %>
                                    <span class="file-icon-large"><%= largeIcon %></span>
                                    <span class="file-icon"><%= icon %></span>
                                    <span class="file-name"><%= item.name %></span>
                                </div>
                            <% } %>
                            <span class="file-actions">
                                <a href="#" class="action-link rename-link" onclick="showRenameForm('<%= item.encodedName %>', '<%= item.name.replace(/'/g, '\\\'') %>', <%= item.isDir %>); return false;">ÈáçÂëΩÂêç</a>
                                <% if (!item.isDir) { %>
                                    <% if (['txt', 'md', 'json', 'js', 'css', 'html', 'xml', 'log', 'csv', 'py', 'java', 'c', 'cpp', 'go', 'rb'].includes(item.name.includes('.') ? item.name.substring(item.name.lastIndexOf('.') + 1).toLowerCase() : '')) { %>
                                        <a href="/edit?path=<%= item.encodedPath %>" class="action-link edit-link">Á∑®ËºØ</a>
                                    <% } %>
                                    <a href="/download?path=<%= item.encodedPath %>" class="action-link">‰∏ãËºâ</a>
                                <% } %>
                                <a href="/delete?path=<%= item.encodedPath %>&isDir=<%= item.isDir %>" class="action-link delete-link" onclick="return confirm('Á¢∫ÂÆöË¶ÅÂà™Èô§ <%= item.name.replace(/'/g, '\\\'') %><%= item.isDir ? ' ÂèäÂÖ∂ÊâÄÊúâÂÖßÂÆπ' : '' %> ÂóéÔºü');">Âà†Èô§</a>
                            </span>
                            <div class="rename-form" id="rename-form-<%= item.encodedName %>">
                                <form action="/rename" method="POST" style="display:inline-flex; gap: 5px;">
                                    <input type="hidden" name="currentPath" value="<%= currentPath %>">
                                    <input type="hidden" name="oldPath" value="<%= item.path %>">
                                    <input type="hidden" name="isDir" value="<%= item.isDir %>">
                                    <input type="text" name="newName" placeholder="Êñ∞ÂêçÁ®±" value="<%= item.name %>" required>
                                    <button type="submit" style="font-size:0.8em; padding: 4px 8px;">Á¢∫Ë™ç</button>
                                    <button type="button" style="font-size:0.8em; padding: 4px 8px; background-color: #6c757d;" onclick="hideRenameForm('<%= item.encodedName %>'); return false;">ÂèñÊ∂à</button>
                                </form>
                            </div>
                        </li>
                    <% }) %>
                </ul>
            <% } else { %>
                <p>Ê≠§Êñá‰ª∂Â§æÁÇ∫Á©∫„ÄÇ</p>
            <% } %>
        </div>
    </div>

    <script>
        const dropArea = document.getElementById('drop-area');
        const fileInput = document.getElementById('userFiles');
        const uploadForm = document.getElementById('upload-form');
        const fileListPreview = document.getElementById('file-list-preview');
        const uploadButton = document.getElementById('upload-button');
        const fileContainer = document.getElementById('file-container');
        const listViewBtn = document.getElementById('listViewBtn');
        const gridViewBtn = document.getElementById('gridViewBtn');

        // Drag and Drop
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
            document.body.addEventListener(eventName, preventDefaults, false);
        });
        function preventDefaults(e) { e.preventDefault(); e.stopPropagation(); }
        ['dragenter', 'dragover'].forEach(eventName => dropArea.addEventListener(eventName, () => dropArea.classList.add('highlight'), false));
        ['dragleave', 'drop'].forEach(eventName => dropArea.addEventListener(eventName, () => dropArea.classList.remove('highlight'), false));
        dropArea.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            fileInput.files = e.dataTransfer.files;
            updateFileListPreview();
        }
        fileInput.addEventListener('change', updateFileListPreview);

        function updateFileListPreview() {
            fileListPreview.innerHTML = '';
            if (fileInput.files.length > 0) {
                const list = document.createElement('ul');
                list.style.listStyleType = 'none'; list.style.paddingLeft = '0';
                for (let i = 0; i < fileInput.files.length; i++) {
                    const listItem = document.createElement('li');
                    listItem.textContent = fileInput.files[i].name;
                    listItem.style.fontSize = '0.9em'; listItem.style.color = '#333';
                    list.appendChild(listItem);
                }
                fileListPreview.appendChild(list);
                uploadButton.style.display = 'inline-block';
            } else {
                uploadButton.style.display = 'none';
            }
        }
        if(fileInput.files.length === 0) uploadButton.style.display = 'none';

        // View Toggle
        function toggleView(viewType) {
            if (viewType === 'grid') {
                fileContainer.classList.remove('list-view');
                fileContainer.classList.add('grid-view');
                gridViewBtn.classList.add('active');
                listViewBtn.classList.remove('active');
                localStorage.setItem('fileView', 'grid');
            } else {
                fileContainer.classList.remove('grid-view');
                fileContainer.classList.add('list-view');
                listViewBtn.classList.add('active');
                gridViewBtn.classList.remove('active');
                localStorage.setItem('fileView', 'list');
            }
        }
        // Restore view preference
        const preferredView = localStorage.getItem('fileView');
        if (preferredView) {
            toggleView(preferredView);
        } else {
            toggleView('list'); // Default
        }


        // Rename Form
        function showRenameForm(encodedName, currentName, isDir) {
            // Hide all other rename forms first
            document.querySelectorAll('.rename-form').forEach(form => form.style.display = 'none');
            const form = document.getElementById('rename-form-' + encodedName);
            if (form) {
                form.style.display = 'block';
                form.querySelector('input[name="newName"]').focus();
                form.querySelector('input[name="newName"]').select();
            }
        }
        function hideRenameForm(encodedName) {
            const form = document.getElementById('rename-form-' + encodedName);
            if (form) form.style.display = 'none';
        }

    </script>
</body>
</html>
