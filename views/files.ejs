<%# views/files.ejs %>
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= locals.pageTitle || ( (locals.viewTargetUsername ? viewTargetUsername : user.username) + ' 的文件') %> - 網路硬碟</title>
    <link rel="stylesheet" href="/style.css">
    <link id="theme-stylesheet" rel="stylesheet" href="">
    <style>
        /* CSS 變量定義 */
        :root {
            --button-primary-bg-color: #007bff;
            --button-primary-text-color: #ffffff;
            --button-primary-border-color: #007bff;
            
            --button-secondary-bg-color: #6c757d; /* 用於次要按鈕，例如取消 */
            --button-secondary-text-color: #ffffff;
            --button-secondary-border-color: #6c757d;

            --input-border-color: #ccc;
            --input-bg-color: #fff;
            --input-text-color: #333;

            --modal-bg: #ffffff;
            --modal-text-color: #333;
            --modal-border-color: #888;

            --rename-form-bg: #ffffff;
            --rename-form-border-color: #cccccc;
        }

        .dark-theme {
            --button-primary-bg-color: #0056b3;
            --button-primary-text-color: #ffffff;
            --button-primary-border-color: #0056b3;

            --button-secondary-bg-color: #5a6268;
            --button-secondary-text-color: #ffffff;
            --button-secondary-border-color: #545b62;
            
            --input-border-color: #555; /* 暗色主題的輸入框邊框 */
            --input-bg-color: #2c2c2c;   /* 暗色主題的輸入框背景 */
            --input-text-color: #e0e0e0; /* 暗色主題的輸入框文字 */
            
            --modal-bg: #2c2c2c;
            --modal-text-color: #e0e0e0;
            --modal-border-color: #555;

            --rename-form-bg: #3a3a3a;
            --rename-form-border-color: #555;
        }

        /* 其他通用樣式 */
        #selection-action-bar { padding: 10px; background-color: #f0f0f0; border-bottom: 1px solid #ccc; margin-bottom: 15px; display: none; flex-wrap: wrap; gap: 10px; align-items: center; }
        .dark-theme #selection-action-bar { background-color: #252525; border-bottom-color: #444; }
        #selection-action-bar button { margin: 0; }
        
        .item-checkbox { 
            display: none; 
            margin-right: 10px; 
            width: 18px; 
            height: 18px; 
            vertical-align: middle; 
        }
        #file-container.multi-select-mode-active .item-checkbox {
            display: inline-block; 
        }

        .file-entry-selectable { display: flex; align-items: center; width: 100%; padding: 5px 0; }
        .file-content-wrapper { flex-grow: 1; display: flex; justify-content: space-between; align-items: center; cursor: pointer; }
        
        .list-view li { position: relative; }
        .list-view .file-content-wrapper > .file-entry { flex-grow: 1; }
        .list-view .file-actions-placeholder { min-width: 150px; text-align: right; font-size: 0.9em; color: #666; }
        .dark-theme .list-view .file-actions-placeholder { color: #aaa; }
        
        .list-view li.single-selected-item > .file-entry-selectable,
        .grid-view li.single-selected-item { 
            background-color: #e9e9e9; 
            border-radius: 4px;
        }
        .dark-theme .list-view li.single-selected-item > .file-entry-selectable,
        .dark-theme .grid-view li.single-selected-item {
            background-color: #404040; 
        }

        #move-modal, #create-item-modal, #overwrite-confirm-modal {
            display: none; position: fixed; z-index: 1001; left: 0; top: 0; width: 100%; height: 100%;
            overflow: auto; background-color: rgba(0,0,0,0.5); 
        }
        .modal-content { 
            background-color: var(--modal-bg) !important;
            color: var(--modal-text-color);
            margin: 10% auto; 
            padding: 20px; 
            border: 1px solid var(--modal-border-color);
            border-radius: 8px; 
            width: 90%; 
            max-width: 500px; 
            box-shadow: 0 5px 15px rgba(0,0,0,0.3); 
        }
        .modal-content h3 { margin-top: 0; }
        .modal-content .form-group { margin-bottom: 15px; }
        .modal-content .form-group label { display: block; margin-bottom: 5px; font-weight: 500; }
        .modal-content .form-group input[type="text"] {
            width: 100%; padding: 10px; box-sizing: border-box;
            border: 1px solid var(--input-border-color); border-radius: 4px;
            background-color: var(--input-bg-color); color: var(--input-text-color);
        }
        .modal-actions { text-align: right; margin-top: 20px; display: flex; gap: 10px; justify-content: flex-end; }

        #directory-tree-container { 
            max-height: 250px; 
            overflow-y: auto; 
            border: 1px solid var(--input-border-color); 
            padding: 10px; 
            margin-bottom: 15px; 
            background-color: var(--input-bg-color); 
        }
        #directory-tree-container ul { list-style-type: none; padding-left: 20px; }
        #directory-tree-container li { padding: 5px 0; cursor: pointer; border-bottom: 1px dashed var(--input-border-color); }
        #directory-tree-container li:last-child { border-bottom: none; }
        #directory-tree-container li:hover { background-color: var(--hover-bg, #f0f0f0); } 
        .dark-theme #directory-tree-container li:hover { --hover-bg: #4a4a4a; }
        #directory-tree-container li.selected-dir { background-color: #007bff; color: white; } 
        .dark-theme #directory-tree-container li.selected-dir { background-color: #0056b3; }

        .close-modal-btn { float: right; font-size: 1.5em; font-weight: bold; cursor: pointer; line-height: 1; padding: 0 5px;}

        .file-entry { display: flex; align-items: center; gap: 8px; }
        .list-view .file-entry .file-name { overflow: hidden; text-overflow: ellipsis; white-space: nowrap; }
        
        /* --- Grid View Specific Styles --- */
        #file-container.grid-view ul {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); /* 最小寬度120px，自動填充 */
            gap: 16px; /* 項目之間的間距 */
            list-style-type: none;
            padding: 0;
            margin: 0;
        }

        #file-container.grid-view li {
            display: flex;
            flex-direction: column;
            align-items: center; /* 水平居中 li 內的 .file-entry-selectable */
            justify-content: center; /* 垂直居中 li 內的 .file-entry-selectable */
            padding: 12px; /* 項目內部填充 */
            border-radius: 8px;
            /* background-color: #f8f9fa; */ /* 可選：項目背景色 */
            /* border: 1px solid #e0e0e0; */ /* 可選：項目邊框 */
            position: relative;
            min-height: 140px; /* 給定一個最小高度以保持視覺一致性 */
        }
        /* .dark-theme #file-container.grid-view li { background-color: #3a3a3a; border-color: #444; } */

        #file-container.grid-view li .file-entry-selectable {
            display: flex;
            flex-direction: column;
            align-items: center; /* 水平居中 checkbox 和 .file-content-wrapper */
            justify-content: center; /* 垂直居中 checkbox 和 .file-content-wrapper */
            width: 100%;
            flex-grow: 1;
        }
        
        #file-container.grid-view li .file-content-wrapper {
            display: flex;
            flex-direction: column;
            align-items: center;    /* 水平居中 .file-entry */
            justify-content: center;/* 垂直居中 .file-entry */
            width: 100%;
            flex-grow: 1;
            text-decoration: none;
            color: inherit;
            padding: 5px 0; /* 在圖標/名稱塊周圍添加一些垂直填充 */
        }

        .grid-view .file-entry { /* 包含圖標和名稱的塊 */
            display: flex;
            flex-direction: column;
            justify-content: center; /* 垂直居中圖標和名稱組 */
            align-items: center;     /* 水平居中圖標和名稱各自的容器 */
            text-align: center;      /* 使文件名文本在其容器內居中 */
            gap: 6px;                /* 圖標和名稱之間的間距 */
            width: 100%;             /* 確保使用父容器的全部寬度 */
        }

        .grid-view .file-icon-large { /* 圖標的容器 */
            font-size: 3.5em;        /* 調整圖標大小 */
            line-height: 1;          /* 對於文本類圖標（如Emoji）的垂直居中很重要 */
            display: flex;           /* 使用flex來居中圖標字符本身 */
            justify-content: center; /* 水平居中圖標字符 */
            align-items: center;     /* 垂直居中圖標字符 */
            min-height: 48px;        /* 給圖標區域一個最小高度 */
            margin-bottom: 4px;      /* 圖標下方的空間 */
        }

        .grid-view .file-name { /* 文件名樣式 */
            font-size: 0.8em;
            line-height: 1.3;
            word-break: break-word; /* 允許長單詞換行 */
            display: -webkit-box;
            -webkit-line-clamp: 2; /* 限制最多顯示兩行 */
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis; /* 超出部分顯示省略號 */
            max-width: 100%;         /* 確保不超出容器寬度 */
        }
        
        #file-container.grid-view.multi-select-mode-active .item-checkbox {
            margin-bottom: 8px; /* 多選模式下，複選框與下方內容的間距 */
        }
        /* --- End of Grid View Specific Styles --- */
        
        #select-all-container { 
            display: none; 
            align-items: center; 
            padding: 5px 10px; 
            background-color: #f9f9f9; 
            border-bottom: 1px solid #eee; 
        }
        .dark-theme #select-all-container { background-color: #2e2e2e; border-bottom-color: #444; }
        #file-container.multi-select-mode-active #select-all-container.has-items {
             display: flex;
        }
        #select-all-container label { margin-left: 5px; font-weight: normal;}

        .rename-form {
            display: none;
            position: absolute;
            left: 25px; /* For list view */
            right: 5px; /* For list view */
            top: calc(100% + 2px); /* For list view */
            background-color: var(--rename-form-bg);
            padding: 10px;
            border: 1px solid var(--rename-form-border-color);
            box-shadow: 0 4px 10px rgba(0,0,0,0.15); 
            z-index: 100;
            border-radius: 6px;
            max-width: 400px; /* For list view */
            box-sizing: border-box;
        }
        
        /* Adjust rename form for grid view to be centered below the item */
        #file-container.grid-view li .rename-form {
            left: 50%;
            transform: translateX(-50%);
            top: 100%; /* Position below the li */
            margin-top: 5px; /* Space between item and form */
            width: calc(100% - 10px); /* Slightly less than item width */
            max-width: 220px; /* Max width for rename form in grid */
            right: auto; /* Override list view style */
        }

        .rename-form form.inline-form {
            display: flex;
            gap: 8px; 
            align-items: stretch; 
        }

        .rename-form input[type="text"],
        .rename-form button {
            box-sizing: border-box; 
            font-size: 0.9em;     
            line-height: 1.4;    
            padding-top: 6px;     
            padding-bottom: 6px;  
            border-radius: 4px;    
            margin: 0;            
        }

        .rename-form input[type="text"] {
            flex-grow: 1;
            padding-left: 8px;
            padding-right: 8px;
            background-color: var(--input-bg-color);
            color: var(--input-text-color);
            border: 1px solid var(--input-border-color);
        }

        .rename-form button {
            padding-left: 12px;  
            padding-right: 12px;
            cursor: pointer;
            white-space: nowrap; 
            border-width: 1px; 
            border-style: solid;
        }
        
        .rename-form button[type="submit"] {
            background-color: var(--button-primary-bg-color);
            color: var(--button-primary-text-color);
            border-color: var(--button-primary-border-color);
        }
        .rename-form button.secondary { /* 取消按鈕使用次要按鈕顏色 */
            background-color: var(--button-secondary-bg-color);
            color: var(--button-secondary-text-color);
            border-color: var(--button-secondary-border-color);
        }
        
        #upload-actions-container { display: none; padding: 10px 0; gap: 10px; flex-wrap: wrap; align-items: center; margin-bottom: 15px; }
        #upload-actions-container button { margin: 0; }
        #upload-section { display: none; padding: 20px; border: 1px solid #dee2e6; border-radius: 6px; margin-top: 0; background-color: #f8f9fa; }
        .dark-theme #upload-section { background-color: #3a3a3a; border-color: #444; }
        #drop-area { border: 2px dashed #007bff; padding: 20px; text-align: center; border-radius: 5px; background-color: #fff; }
        .dark-theme #drop-area { border-color: #0056b3; background-color: #2c2c2c; }
        #drop-area.highlight { border-color: #28a745; background-color: #e9f7ef; }
        .dark-theme #drop-area.highlight { background-color: #333; }
        #drop-area p { margin-bottom: 15px; font-size: 1.1em; color: #6c757d; }
        .dark-theme #drop-area p { color: #adb5bd; }
        #upload-button { display: none; margin-top: 15px; }

        .search-results-info { padding: 10px; background-color: #e9ecef; border-radius: 5px; margin-bottom: 15px; font-size: 0.9em; }
        .dark-theme .search-results-info { background-color: #3a3a3a; }
        .file-location-in-search { font-size: 0.8em; color: #6c757d; margin-left: 8px; }
        .dark-theme .file-location-in-search { color: #adb5bd; }

        .file-browser-controls { display: flex; flex-wrap: wrap; align-items: center; gap: 10px; margin-bottom: 20px; }
        .file-browser-controls .actions-group-left { display: flex; gap: 10px; align-items: center; flex-shrink: 0; }
        
        .file-browser-controls .actions-group-left button,
        #toggle-multi-select-btn { 
            padding: 8px 12px; 
            font-size: 0.9em; 
            margin: 0;
            background-color: var(--button-primary-bg-color);
            color: var(--button-primary-text-color);
            border: 1px solid var(--button-primary-border-color);
            border-radius: 4px;
            cursor: pointer;
        }
        .file-browser-controls .actions-group-left button:hover,
        #toggle-multi-select-btn:hover {
            opacity: 0.9;
        }

        .file-browser-controls .search-form-right { display: flex; align-items: center; gap: 5px; margin-left: auto; flex-shrink: 0; }
        .file-browser-controls .search-form-right input[type="search"] { 
            width: 180px; padding: 8px 10px; font-size: 0.9em; 
            border: 1px solid var(--input-border-color); 
            background-color: var(--input-bg-color);
            color: var(--input-text-color);
            border-radius: 4px; margin: 0; 
        }
        .file-browser-controls .search-form-right button { 
            padding: 8px 12px; font-size: 0.9em; margin: 0;
            background-color: var(--button-primary-bg-color);
            color: var(--button-primary-text-color);
            border: 1px solid var(--button-primary-border-color);
            border-radius: 4px;
        }
        .file-browser-controls .view-toggle { display: flex; gap: 8px; align-items: center; flex-shrink: 0; }
        .file-browser-controls .view-toggle button { 
            padding: 8px 12px; font-size: 0.9em; margin: 0;
            background-color: var(--button-secondary-bg-color);
            color: var(--button-secondary-text-color);
            border: 1px solid var(--button-secondary-border-color);
            border-radius: 4px;
        }
        .file-browser-controls .view-toggle button.active {
            background-color: var(--button-primary-bg-color);
            border-color: var(--button-primary-border-color);
        }

        .file-browser-controls:not(:has(.actions-group-left)) .search-form-right { margin-left: 0; flex-grow: 1; }
        .file-browser-controls:not(:has(.actions-group-left)) .search-form-right input[type="search"] { flex-grow: 1; }
        .file-browser-controls:not(:has(.actions-group-left)) .view-toggle { margin-left: auto; }
        
        .progress-bar-container { width: 100%; background-color: #e9ecef; border-radius: 4px; margin-top: 10px; padding: 2px; display: none; box-sizing: border-box; }
        .dark-theme .progress-bar-container { background-color: #495057; }
        .progress-bar { display: block; width: 0%; height: 20px; background-color: #007bff; border: 1px solid #0056b3; border-radius: 2px; text-align: center; line-height: 18px; color: white; font-size: 0.8em; font-weight: bold; transition: width 0.1s ease-in-out; box-sizing: border-box; overflow: hidden; }
        .dark-theme .progress-bar { background-color: #0056b3; border-color: #003d80; }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>
                <% if (locals.isSearchResult && locals.searchQuery) { %>
                    有關 "<%= searchQuery %>" 的搜尋結果 <% if (locals.viewTargetUsername) { %>(在 <%= viewTargetUsername %> 的文件中)<% } else { %>(在您的文件中)<% } %>
                <% } else if (locals.viewTargetUsername && user.role === 'admin') { %>
                    管理員視角: <%= viewTargetUsername %> 的文件
                <% } else { %>
                    <%= user.username %> 的文件
                <% } %>
            </h1>
            <div class="header-controls">
                <nav>
                    <% if (user.role === 'admin') { %><a href="/admin">管理面板</a><% } %>
                    <a href="/change-password">修改密碼</a>
                    <a href="/logout">登出</a>
                </nav>
                <%- include('partials/theme-switcher') %>
            </div>
        </header>

        <% if (locals.message) { %>
            <p class="message <%= (locals.messageType === 'error' || (locals.message && (message.includes('失敗') || message.includes('错误') || message.includes('沒有選擇文件') || message.includes('無效的') ))) ? 'error-message' : (locals.messageType === 'success' ? '' : (locals.messageType === 'warning' ? 'warning-message' : '') ) %>"><%= message %></p>
        <% } %>

        <% if (!locals.isSearchResult) { %>
            <div class="current-path">
                當前路徑:
                <a href="/files<%= locals.viewTargetUsername && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewTargetUsername) : '' %>">根目錄</a>
                <%
                    let pathSegments = currentPath.split('/').filter(Boolean);
                    let cumulativePathForLink = '';
                    const adminTargetQueryForPath = locals.viewTargetUsername && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewTargetUsername) : '';
                %>
                <% pathSegments.forEach(segment => { %>
                    <% cumulativePathForLink += '/' + segment; %>
                    / <a href="/files?path=<%= encodeURIComponent(cumulativePathForLink) %><%= adminTargetQueryForPath %>"><%= segment %></a>
                <% }); %>
            </div>
        <% } else if (locals.searchQuery) { %>
             <div class="search-results-info">
                正在顯示包含 "<%= searchQuery %>" 的文件。
                <a href="/files<%= locals.viewTargetUsername && user.role === 'admin' ? '?targetUsername=' + encodeURIComponent(viewTargetUsername) : '' %>">清除搜索並返回根目錄</a>
            </div>
        <% } %>

        <div class="file-browser-controls">
            <% if (!locals.isSearchResult && currentPath && currentPath !== '/search-results') { %>
                <div class="actions-group-left">
                    <button type="button" id="show-create-textfile-modal-btn">新建文本文件</button>
                    <button type="button" id="show-create-folder-modal-btn">創建文件夾</button>
                    <button type="button" id="toggleUploadActionsBtn" class="upload-button-main">上傳</button> 
                </div>
            <% } %>
            <button type="button" id="toggle-multi-select-btn">啟用多選</button>
        
            <form action="/files" method="GET" class="control-form search-form-right">
                <% if (locals.viewTargetUsername && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>">
                <% } %>
                <input type="search" name="q" placeholder="搜索..." value="<%= locals.searchQuery || '' %>">
                <button type="submit">搜索</button>
            </form>
        
            <div class="view-toggle">
                <button id="listViewBtn">列表</button>
                <button id="gridViewBtn">網格</button>
            </div>
        </div>
        
        <% if (!locals.isSearchResult && currentPath && currentPath !== '/search-results') { %>
            <div id="upload-actions-container" style="justify-content: flex-start;">
                <button type="button" id="upload-files-btn">上傳文件</button>
                <button type="button" id="upload-folder-btn">上傳文件夾</button>
            </div>

            <div id="upload-section">
                <h2 id="upload-section-title">上傳到 "<%= currentPath === '/' ? '根目錄' : currentPath.split('/').pop() %>"</h2>
                <div id="drop-area">
                    <form id="upload-form" action="/upload" method="POST" enctype="multipart/form-data">
                        <input type="hidden" name="currentPath" value="<%= currentPath %>">
                        <% if (locals.viewTargetUsername && user.role === 'admin') { %><input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>"><% } %>
                        <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                        <input type="file" id="userFiles" name="userFiles" multiple style="display: none;"> 
                        <p id="drop-area-text">將文件或文件夾拖拽到此處，或點擊上方按鈕選擇</p>
                        <button type="submit" id="upload-button">上傳已選項目</button>
                    </form>
                    <div id="file-list-preview" style="margin-top:10px; text-align:left;"></div>
                    <div class="progress-bar-container" id="upload-progress-container">
                        <div class="progress-bar" id="upload-progress-bar">0%</div>
                    </div>
                </div>
            </div>
        <% } %>

        <div id="selection-action-bar">
            <span id="selection-count" style="margin-right: 15px;">已選擇 0 項</span>
            <button id="action-edit-btn" disabled>編輯</button>
            <button id="action-rename-btn" disabled>重命名</button>
            <button id="action-move-btn" disabled>移動</button>
            <button id="action-download-btn" disabled>下載選中項</button>
            <button id="action-delete-btn" class="secondary" disabled>删除</button>
        </div>

        <h2><%= locals.isSearchResult ? '搜索結果' : '文件列表' %></h2>
        <% if (items.length > 0) { %>
            <div id="select-all-container">
                <input type="checkbox" id="select-all-checkbox">
                <label for="select-all-checkbox">全選/取消全選</label>
            </div>
        <% } %>
        <div id="file-container" class="list-view"> <% if (items.length > 0) { %>
                <% const adminTargetQueryForActions = locals.viewTargetUsername && user.role === 'admin' ? '&targetUsername=' + encodeURIComponent(viewTargetUsername) : ''; %>
                <ul>
                    <% items.forEach(item => { %>
                        <li data-item-path="<%= item.path %>">
                            <div class="file-entry-selectable">
                                <input type="checkbox" class="item-checkbox"
                                       data-path="<%= item.path %>"
                                       data-encoded-path="<%= item.encodedPath %>"
                                       data-name="<%= item.name %>"
                                       data-encoded-name="<%= item.encodedName %>"
                                       data-is-dir="<%= item.isDir %>"
                                       data-raw-name="<%= item.name.replace(/'/g, '\\\'').replace(/"/g, '&quot;') %>">
                                <div class="file-content-wrapper">
                                    <% if (item.isDir) { %>
                                        <div class="file-entry">
                                            <span class="file-icon-large folder-icon">📁</span>
                                            <a href="/files?path=<%= item.encodedPath %><%= adminTargetQueryForActions %>" class="file-name"><%= item.name %></a>
                                            <% if (locals.isSearchResult) { %><span class="file-location-in-search">(位於: <%= (item.path.substring(0, item.path.lastIndexOf('/')) || '/') %>)</span><% } %>
                                        </div>
                                    <% } else { %>
                                        <div class="file-entry">
                                            <%
                                                const ext = item.name.includes('.') ? item.name.substring(item.name.lastIndexOf('.') + 1).toLowerCase() : '';
                                                let largeIcon = '📄'; 
                                                let isViewableTextFile = false;
                                                if (ALLOWED_TEXT_EXTENSIONS.includes('.' + ext) || ALLOWED_TEXT_EXTENSIONS.includes(ext)) {
                                                    isViewableTextFile = true;
                                                    largeIcon = '📝'; 
                                                }
                                                else if (['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'].includes(ext)) { largeIcon = '🖼️'; }
                                                else if (['pdf'].includes(ext)) { largeIcon = '📕';}
                                                // ... 其他圖標邏輯 ...
                                            %>
                                            <span class="file-icon-large"><%= largeIcon %></span>
                                            <% if (isViewableTextFile) { %>
                                                <a href="/view?path=<%= item.encodedPath %><%= adminTargetQueryForActions %>" class="file-name" title="點擊查看"><%= item.name %></a>
                                            <% } else { %>
                                                <span class="file-name"><%= item.name %></span>
                                            <% } %>
                                            <% if (locals.isSearchResult) { %><span class="file-location-in-search">(位於: <%= (item.path.substring(0, item.path.lastIndexOf('/')) || '/') %>)</span><% } %>
                                        </div>
                                    <% } %>
                                    <span class="file-actions-placeholder"></span> </div>
                            </div>
                             <div class="rename-form" id="rename-form-<%= item.encodedName %>">
                                <form action="/rename" method="POST" class="control-form inline-form">
                                    <input type="hidden" name="currentPath" value="<%= locals.isSearchResult ? (item.path.substring(0, item.path.lastIndexOf('/')) || '/') : currentPath %>">
                                    <input type="hidden" name="oldPath" value="<%= item.path %>">
                                    <input type="hidden" name="isDir" value="<%= item.isDir %>">
                                    <% if (locals.viewTargetUsername && user.role === 'admin') { %><input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>"><% } %>
                                    <% if (locals.csrfToken) { %><input type="hidden" name="_csrf" value="<%= csrfToken %>"><% } %>
                                    <input type="text" name="newName" placeholder="新名稱" value="<%= item.name %>" required>
                                    <button type="submit">確認</button>
                                    <button type="button" class="secondary" onclick="hideRenameForm('<%= item.encodedName %>'); return false;">取消</button>
                                </form>
                            </div>
                        </li>
                    <% }) %>
                </ul>
            <% } else { %>
                <p><%= locals.isSearchResult ? '找不到符合條件的文件。' : '此文件夾為空。' %></p>
            <% } %>
        </div>
    </div>

    <div id="create-item-modal">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-create-item-modal-btn">&times;</span>
            <h3 id="create-item-modal-title">创建新项目</h3>
            <form id="create-item-form" method="POST"> 
                <input type="hidden" name="currentPath" value="<%= currentPath %>">
                <% if (locals.viewTargetUsername && user.role === 'admin') { %>
                    <input type="hidden" name="targetUsername" value="<%= viewTargetUsername %>">
                <% } %>
                <% if (locals.csrfToken) { %>
                    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
                <% } %>
                <div class="form-group">
                    <label for="create-item-name-input" id="create-item-name-label">名称:</label>
                    <input type="text" id="create-item-name-input" name="" required> 
                </div>
                <div class="modal-actions">
                    <button type="button" class="secondary" id="cancel-create-item-btn">取消</button>
                    <button type="submit" id="confirm-create-item-btn">确认创建</button>
                </div>
            </form>
        </div>
    </div>

    <div id="move-modal">
        <div class="modal-content"> <span class="close-modal-btn" id="close-move-modal-btn">&times;</span>
            <h3>移動選中項目到:</h3>
            <div id="directory-tree-container">
                <p>正在加載目錄...</p>
            </div>
            <p>已選擇目標: <strong id="selected-destination-path">無</strong></p>
            <input type="hidden" id="move-destination-input" value="">
            <div class="modal-actions"> <button type="button" class="secondary" id="cancel-move-btn">取消</button>
                <button id="confirm-move-btn" disabled>確認移動</button>
            </div>
        </div>
    </div>

    <div id="overwrite-confirm-modal" class="modal" style="display:none; z-index: 1002;">
        <div class="modal-content">
            <span class="close-modal-btn" id="close-overwrite-modal-btn">&times;</span>
            <h3>確認操作</h3>
            <p id="overwrite-message">一個同名項目已存在。您要覆蓋它嗎？</p>
            <div class="modal-actions">
                <button type="button" class="secondary" id="overwrite-abandon-btn">放棄</button>
                <button type="button" id="overwrite-confirm-btn">覆蓋</button>
            </div>
        </div>
    </div>


    <script src="/theme.js"></script>
    <script>
        const ALLOWED_TEXT_EXTENSIONS = <%- JSON.stringify(locals.ALLOWED_TEXT_EXTENSIONS || []) %>;
        const CSRF_TOKEN = "<%= locals.csrfToken || '' %>";
        const VIEW_TARGET_USERNAME = "<%= locals.viewTargetUsername || '' %>";
        const CURRENT_USER_ROLE = "<%= user.role %>";
        const CURRENT_PATH_ON_LOAD = "<%= currentPath %>";
        const IS_SEARCH_RESULT_VIEW = <%= locals.isSearchResult || false %>;
        const EXISTING_ITEM_NAMES_ON_PAGE = <%- JSON.stringify(items.map(item => item.name.toLowerCase())) %>;
        const HAS_ITEMS_ON_PAGE = <%= items.length > 0 %>;

        document.addEventListener('DOMContentLoaded', () => {
            const fileContainer = document.getElementById('file-container');
            const selectAllCheckbox = document.getElementById('select-all-checkbox');
            const selectAllContainer = document.getElementById('select-all-container');
            const selectionActionBar = document.getElementById('selection-action-bar');
            const selectionCountDisplay = document.getElementById('selection-count');
            const actionEditBtn = document.getElementById('action-edit-btn');
            const actionRenameBtn = document.getElementById('action-rename-btn');
            const actionMoveBtn = document.getElementById('action-move-btn');
            const actionDownloadBtn = document.getElementById('action-download-btn');
            const actionDeleteBtn = document.getElementById('action-delete-btn');
            
            const moveModal = document.getElementById('move-modal');
            const closeMoveModalBtn = document.getElementById('close-move-modal-btn');
            const directoryTreeContainer = document.getElementById('directory-tree-container');
            const confirmMoveBtn = document.getElementById('confirm-move-btn');
            const cancelMoveBtn = document.getElementById('cancel-move-btn');
            const selectedDestinationPathDisplay = document.getElementById('selected-destination-path');
            const moveDestinationInput = document.getElementById('move-destination-input');
            let currentDirectoryTree = [];

            const toggleUploadActionsBtn = document.getElementById('toggleUploadActionsBtn');
            const uploadActionsContainer = document.getElementById('upload-actions-container');
            const uploadFilesBtn = document.getElementById('upload-files-btn');
            const uploadFolderBtn = document.getElementById('upload-folder-btn');
            const uploadSection = document.getElementById('upload-section');
            const userFilesInput = document.getElementById('userFiles');
            const dropAreaText = document.getElementById('drop-area-text');
            const uploadForm = document.getElementById('upload-form');
            const uploadProgressContainer = document.getElementById('upload-progress-container');
            const uploadProgressBar = document.getElementById('upload-progress-bar');
            const fileListPreview = document.getElementById('file-list-preview');
            const uploadButton = document.getElementById('upload-button'); 
            const dropArea = document.getElementById('drop-area');

            const overwriteModal = document.getElementById('overwrite-confirm-modal');
            const overwriteMessage = document.getElementById('overwrite-message');
            const overwriteConfirmBtn = document.getElementById('overwrite-confirm-btn');
            const overwriteAbandonBtn = document.getElementById('overwrite-abandon-btn');
            const closeOverwriteModalBtn = document.getElementById('close-overwrite-modal-btn');

            const toggleMultiSelectBtn = document.getElementById('toggle-multi-select-btn');
            let multiSelectModeActive = false;
            let currentSingleSelectedItem = null;

            function clearSingleSelection() {
                if (currentSingleSelectedItem && currentSingleSelectedItem.element) {
                    currentSingleSelectedItem.element.classList.remove('single-selected-item');
                }
                currentSingleSelectedItem = null;
            }

            function updateMultiSelectModeUI() {
                if (!fileContainer || !toggleMultiSelectBtn) return;

                if (multiSelectModeActive) {
                    clearSingleSelection(); 
                    fileContainer.classList.add('multi-select-mode-active');
                    toggleMultiSelectBtn.textContent = '取消多選';
                    if (selectAllContainer && HAS_ITEMS_ON_PAGE) {
                        // selectAllContainer.style.display = 'flex'; // Handled by CSS class now
                        selectAllContainer.classList.add('has-items'); // Ensure class for CSS rule is present
                    }
                } else {
                    fileContainer.classList.remove('multi-select-mode-active');
                    toggleMultiSelectBtn.textContent = '啟用多選';
                    if (selectAllContainer) {
                        // selectAllContainer.style.display = 'none'; // Handled by CSS class now
                        selectAllContainer.classList.remove('has-items');
                    }
                    document.querySelectorAll('.item-checkbox:checked').forEach(cb => cb.checked = false);
                    if (selectAllCheckbox) selectAllCheckbox.checked = false;
                }
                updateSelectionActions();
            }
            
            if (toggleMultiSelectBtn) {
                toggleMultiSelectBtn.addEventListener('click', () => {
                    multiSelectModeActive = !multiSelectModeActive;
                    updateMultiSelectModeUI();
                });
            }

            function getCheckboxSelectedItems() {
                const currentCheckboxes = document.querySelectorAll('#file-container .item-checkbox'); 
                const selected = [];
                currentCheckboxes.forEach((cb) => {
                    if (cb.checked) {
                        selected.push({
                            path: cb.dataset.path, encodedPath: cb.dataset.encodedPath,
                            name: cb.dataset.name, encodedName: cb.dataset.encodedName,
                            isDir: cb.dataset.isDir === 'true', rawName: cb.dataset.rawName,
                            element: cb.closest('li')
                        });
                    }
                });
                return selected;
            }

            function updateSelectionActions() {
                let count = 0;
                let itemsForActions = []; 
                let isSingleFileEditable = false;

                if (multiSelectModeActive) {
                    const checkboxSelectedItems = getCheckboxSelectedItems();
                    count = checkboxSelectedItems.length;
                    itemsForActions = checkboxSelectedItems;
                    if (count === 1 && itemsForActions[0] && !itemsForActions[0].isDir) {
                        const fileName = itemsForActions[0].name;
                        const fileExt = fileName.includes('.') ? fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase() : '';
                        if (ALLOWED_TEXT_EXTENSIONS.includes('.' + fileExt) || ALLOWED_TEXT_EXTENSIONS.includes(fileExt)) {
                            isSingleFileEditable = true;
                        }
                    }
                } else if (currentSingleSelectedItem) {
                    count = 1;
                    itemsForActions.push(currentSingleSelectedItem);
                    if (!currentSingleSelectedItem.isDir) {
                        const fileName = currentSingleSelectedItem.name;
                        const fileExt = fileName.includes('.') ? fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase() : '';
                         if (ALLOWED_TEXT_EXTENSIONS.includes('.' + fileExt) || ALLOWED_TEXT_EXTENSIONS.includes(fileExt)) {
                            isSingleFileEditable = true;
                        }
                    }
                }

                if (count > 0) {
                    selectionActionBar.style.display = 'flex';
                    selectionCountDisplay.textContent = `已選擇 ${count} 項`;
                } else {
                    selectionActionBar.style.display = 'none';
                }
                
                if(actionEditBtn) actionEditBtn.disabled = !(count === 1 && isSingleFileEditable);
                if(actionRenameBtn) actionRenameBtn.disabled = !(count === 1);
                if(actionMoveBtn) actionMoveBtn.disabled = !(count > 0);
                if(actionDownloadBtn) actionDownloadBtn.disabled = !(count > 0);
                if(actionDeleteBtn) actionDeleteBtn.disabled = !(count > 0);
            }

            document.querySelectorAll('#file-container .item-checkbox').forEach((checkbox) => {
                checkbox.addEventListener('change', () => {
                    if (multiSelectModeActive) { 
                        clearSingleSelection(); 
                        updateSelectionActions(); 
                    } else {
                        // If not in multi-select mode, a checkbox change implies it was likely an error or programmatic change we want to revert for single-select logic
                        checkbox.checked = false; 
                    }
                });
            });
            
            if (selectAllCheckbox && selectAllContainer) {
                selectAllCheckbox.addEventListener('change', (e) => {
                    if (!multiSelectModeActive) return; 
                    clearSingleSelection(); 
                    const currentCheckboxes = document.querySelectorAll('#file-container .item-checkbox'); 
                    currentCheckboxes.forEach(cb => {
                        if (cb.checked !== e.target.checked) { 
                            cb.checked = e.target.checked;
                        }
                    });
                    updateSelectionActions(); 
                });
            }

            if (fileContainer) {
                fileContainer.querySelectorAll('ul > li .file-content-wrapper').forEach(contentWrapper => {
                    contentWrapper.addEventListener('click', (event) => {
                        const listItem = contentWrapper.closest('li');
                        if (!listItem) return;
                        const checkbox = listItem.querySelector('.item-checkbox');
                        if (!checkbox) return;

                        // Prevent selection if clicking on a link, the checkbox itself, or the rename form
                        if (event.target.tagName === 'A' || event.target.closest('a') || 
                            event.target.classList.contains('item-checkbox') || 
                            event.target.closest('.rename-form')) {
                            return;
                        }

                        const itemData = {
                            path: checkbox.dataset.path, encodedPath: checkbox.dataset.encodedPath,
                            name: checkbox.dataset.name, encodedName: checkbox.dataset.encodedName,
                            isDir: checkbox.dataset.isDir === 'true', rawName: checkbox.dataset.rawName,
                            element: listItem 
                        };

                        if (multiSelectModeActive) { 
                            // In multi-select mode, clicking the item toggles its checkbox
                            checkbox.checked = !checkbox.checked;
                             // No single selection highlight in multi-select mode
                            clearSingleSelection();
                        } else {
                            // Single selection mode
                            if (currentSingleSelectedItem && currentSingleSelectedItem.element === listItem) {
                                // Clicked the same item again, deselect it
                                clearSingleSelection();
                            } else {
                                // Clicked a new item
                                clearSingleSelection(); 
                                currentSingleSelectedItem = itemData;
                                listItem.classList.add('single-selected-item');
                            }
                        }
                        updateSelectionActions();
                    });
                });
            
                fileContainer.addEventListener('click', (event) => {
                    // If clicked on the empty area of the file container (not on an item or its children)
                    if (event.target.closest('li') === null && (event.target.isSameNode(fileContainer) || event.target.tagName === 'UL')) {
                        if (!multiSelectModeActive) { 
                            clearSingleSelection();
                            updateSelectionActions(); 
                        }
                    }
                });
            }
            
            // --- 操作按鈕的事件監聽器 ---
             if (actionEditBtn) {
                actionEditBtn.addEventListener('click', () => {
                    if (actionEditBtn.disabled) return;
                    let itemToEdit = null;
                    if (!multiSelectModeActive && currentSingleSelectedItem) {
                        itemToEdit = currentSingleSelectedItem;
                    } else if (multiSelectModeActive) {
                        const selected = getCheckboxSelectedItems();
                        if (selected.length === 1) itemToEdit = selected[0];
                    }

                    if (itemToEdit && !itemToEdit.isDir) { // Ensure it's a file
                        let url = `/edit?path=${itemToEdit.encodedPath}`;
                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                            url += `&targetUsername=${encodeURIComponent(VIEW_TARGET_USERNAME)}`;
                        }
                        window.location.href = url;
                    }
                });
            }

            if (actionRenameBtn) {
                actionRenameBtn.addEventListener('click', () => {
                    if (actionRenameBtn.disabled) return;
                    let itemToRename = null;
                     if (!multiSelectModeActive && currentSingleSelectedItem) {
                        itemToRename = currentSingleSelectedItem;
                    } else if (multiSelectModeActive) {
                        const selected = getCheckboxSelectedItems();
                        if (selected.length === 1) itemToRename = selected[0];
                    }
                    if (itemToRename) {
                        showRenameForm(itemToRename.encodedName, itemToRename.name, itemToRename.isDir);
                    }
                });
            }
            
            if (actionDownloadBtn) {
                actionDownloadBtn.addEventListener('click', () => {
                    if (actionDownloadBtn.disabled) return;
                    let itemsToDownload = [];
                    if (!multiSelectModeActive && currentSingleSelectedItem) {
                        itemsToDownload.push(currentSingleSelectedItem);
                    } else if (multiSelectModeActive) {
                        itemsToDownload = getCheckboxSelectedItems();
                    }

                    if (itemsToDownload.length === 0) {
                        alert("請選擇要下載的項目。"); return;
                    }

                    if (itemsToDownload.length === 1 && !itemsToDownload[0].isDir) {
                        let url = `/download?path=${itemsToDownload[0].encodedPath}`;
                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                            url += `&targetUsername=${encodeURIComponent(VIEW_TARGET_USERNAME)}`;
                        }
                        const tempLink = document.createElement('a');
                        tempLink.href = url;
                        tempLink.setAttribute('download', itemsToDownload[0].name);
                        tempLink.style.display = 'none';
                        document.body.appendChild(tempLink);
                        tempLink.click();
                        document.body.removeChild(tempLink);
                    } else { // Multiple items or a single directory
                        const form = document.createElement('form');
                        form.method = 'POST';
                        form.action = '/download-archive';
                        form.style.display = 'none';

                        const itemsInput = document.createElement('input');
                        itemsInput.type = 'hidden';
                        itemsInput.name = 'items';
                        const itemsForPayload = itemsToDownload.map(item => ({ 
                            path: item.path, name: item.name, isDir: item.isDir 
                        }));
                        itemsInput.value = JSON.stringify(itemsForPayload);
                        form.appendChild(itemsInput);

                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                            const targetUserInput = document.createElement('input');
                            targetUserInput.type = 'hidden';
                            targetUserInput.name = 'targetUsername';
                            targetUserInput.value = VIEW_TARGET_USERNAME;
                            form.appendChild(targetUserInput);
                        }
                        if (CSRF_TOKEN) { 
                            const csrfInput = document.createElement('input');
                            csrfInput.type = 'hidden';
                            csrfInput.name = '_csrf'; 
                            csrfInput.value = CSRF_TOKEN;
                            form.appendChild(csrfInput);
                        }
                        document.body.appendChild(form);
                        try { form.submit(); } catch (e) { console.error("表單提交錯誤:", e); alert("觸發下載時發生錯誤。"); }
                        // Delay removal slightly to ensure submission in all browsers
                        setTimeout(() => {
                           if (form.parentNode === document.body) { document.body.removeChild(form); }
                        }, 100);
                    }
                });
            }

            if (actionDeleteBtn) {
                actionDeleteBtn.addEventListener('click', async () => {
                    if (actionDeleteBtn.disabled) return;
                    let itemsToDelete = [];
                     if (!multiSelectModeActive && currentSingleSelectedItem) {
                        itemsToDelete.push(currentSingleSelectedItem);
                    } else if (multiSelectModeActive) {
                        itemsToDelete = getCheckboxSelectedItems();
                    }

                    if (itemsToDelete.length === 0) return;

                    const itemNames = itemsToDelete.map(item => item.rawName).join(', ');
                    if (confirm(`確定要刪除選中的 ${itemsToDelete.length} 個項目 (${itemNames}) 嗎？此操作不可恢復！`)) {
                        // Use a single POST request for deleting multiple items
                        const payload = {
                            items: itemsToDelete.map(item => ({ path: item.path, isDir: item.isDir })),
                        };
                        if (CSRF_TOKEN) payload._csrf = CSRF_TOKEN;
                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                            payload.targetUsername = VIEW_TARGET_USERNAME;
                        }

                        try {
                            const response = await fetch('/delete-items', { // Assuming a new route /delete-items for batch deletion
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(payload)
                            });
                            const result = await response.json();
                            if (response.ok && result.success) {
                                alert(result.message || "選中項目已成功刪除。");
                                window.location.reload();
                            } else {
                                alert(result.message || "部分或全部項目刪除失敗。");
                                if(result.shouldReload) window.location.reload(); // Reload if server indicates partial success/failure
                            }
                        } catch (error) {
                            console.error('刪除項目時出錯:', error);
                            alert(`刪除項目時發生客戶端錯誤: ${error.message}`);
                        }
                        clearSingleSelection(); 
                        if(selectAllCheckbox) selectAllCheckbox.checked = false; 
                        document.querySelectorAll('#file-container .item-checkbox').forEach(cb => cb.checked = false); 
                        updateSelectionActions();
                    }
                });
            }
            
            if (actionMoveBtn) {
                actionMoveBtn.addEventListener('click', async () => {
                    if (actionMoveBtn.disabled) return;
                    let itemsToMove = [];
                     if (!multiSelectModeActive && currentSingleSelectedItem) {
                        itemsToMove.push(currentSingleSelectedItem);
                    } else if (multiSelectModeActive) {
                        itemsToMove = getCheckboxSelectedItems();
                    }
                    if (itemsToMove.length === 0) return;

                    moveDestinationInput.value = ''; selectedDestinationPathDisplay.textContent = '無';
                    confirmMoveBtn.disabled = true; directoryTreeContainer.innerHTML = '<p>正在加載目錄...</p>';
                    moveModal.style.display = 'block';
                    try {
                        let fetchUrl = '/api/directories'; let queryParams = [];
                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') queryParams.push(`targetUsername=${encodeURIComponent(VIEW_TARGET_USERNAME)}`);
                        
                        // Exclude the paths of the items being moved and their children if they are directories
                        const pathsToExclude = itemsToMove.flatMap(item => {
                            if (item.isDir) {
                                // In a real scenario, you might want to fetch all children of item.path to exclude them too.
                                // For simplicity here, we just exclude the item.path itself.
                                // A more robust solution would involve the backend filtering out subdirectories of moved items.
                                return [item.path];
                            }
                            return [];
                        });
                        if (pathsToExclude.length > 0) queryParams.push(`excludePaths=${encodeURIComponent(pathsToExclude.join(','))}`);
                        
                        if (queryParams.length > 0) fetchUrl += `?${queryParams.join('&')}`;
                        
                        const response = await fetch(fetchUrl);
                        if (!response.ok) throw new Error(`無法獲取目錄列表: ${response.statusText}`);
                        currentDirectoryTree = await response.json();
                        renderDirectoryTree(currentDirectoryTree, directoryTreeContainer, itemsToMove);
                    } catch (error) {
                        console.error('獲取目錄樹時出錯:', error);
                        directoryTreeContainer.innerHTML = `<p style="color:red;">加載目錄失敗: ${error.message}</p>`;
                    }
                });
            }
            function renderDirectoryTree(nodes, container, itemsBeingMoved) {
                container.innerHTML = ''; const ul = document.createElement('ul');
                const rootLi = document.createElement('li'); 
                rootLi.textContent = '根目錄 (/)';
                rootLi.dataset.path = '/'; 
                
                // Check if root is a valid destination
                let isRootInvalid = itemsBeingMoved.some(item => item.path.substring(0, item.path.lastIndexOf('/')) === '' && item.path !== '/'); // item is in root
                if (isRootInvalid) {
                    // If any item being moved is already in the root, root is not a valid new destination for that item
                    // However, other items might still be movable to root. This logic is complex for mixed selections.
                    // For simplicity, if an item's parent is root, we don't disable root, but the backend should prevent moving to same parent.
                }

                rootLi.addEventListener('click', (e) => selectDestination(e.target, '/'));
                ul.appendChild(rootLi);

                function buildTree(dirItems, parentUl, currentParentPath) {
                    dirItems.forEach(dirNode => {
                        // An item cannot be moved into itself or one of its own subdirectories.
                        const isMovingThisDirOrChild = itemsBeingMoved.some(movedItem => 
                            movedItem.isDir && (dirNode.path === movedItem.path || dirNode.path.startsWith(movedItem.path + '/'))
                        );
                        // An item cannot be moved to its current parent directory.
                        const isCurrentParent = itemsBeingMoved.every(movedItem => {
                            const movedItemParentPath = movedItem.path.substring(0, movedItem.path.lastIndexOf('/')) || '/';
                            return movedItemParentPath === dirNode.path;
                        });

                        if (isMovingThisDirOrChild) {
                            return; // Skip rendering this directory as a destination
                        }

                        const li = document.createElement('li'); 
                        li.textContent = dirNode.name; 
                        li.dataset.path = dirNode.path;
                        if (isCurrentParent) {
                            li.style.opacity = "0.5"; // Visually indicate it's the current parent
                            li.style.pointerEvents = "none"; // Disable selection
                        } else {
                           li.addEventListener('click', (e) => { e.stopPropagation(); selectDestination(e.target, dirNode.path); });
                        }
                        parentUl.appendChild(li);
                        if (dirNode.children && dirNode.children.length > 0) {
                            const nestedUl = document.createElement('ul'); 
                            li.appendChild(nestedUl);
                            buildTree(dirNode.children, nestedUl, dirNode.path);
                        }
                    });
                }
                buildTree(nodes, ul, '/'); 
                container.appendChild(ul);
            }
            function selectDestination(targetElement, path) {
                document.querySelectorAll('#directory-tree-container li.selected-dir').forEach(el => el.classList.remove('selected-dir'));
                targetElement.classList.add('selected-dir');
                selectedDestinationPathDisplay.textContent = path; moveDestinationInput.value = path;
                confirmMoveBtn.disabled = false;
            }
            if (closeMoveModalBtn) closeMoveModalBtn.onclick = () => moveModal.style.display = 'none';
            if (cancelMoveBtn) cancelMoveBtn.onclick = () => moveModal.style.display = 'none';
            
            if (confirmMoveBtn) {
                confirmMoveBtn.addEventListener('click', async () => {
                    let selectedToMove = [];
                    if (!multiSelectModeActive && currentSingleSelectedItem) {
                        selectedToMove.push(currentSingleSelectedItem);
                    } else if (multiSelectModeActive) {
                        selectedToMove = getCheckboxSelectedItems();
                    }

                    const destinationPath = moveDestinationInput.value;
                    if (selectedToMove.length === 0 || !destinationPath && destinationPath !== "") { // Allow moving to root which is "" or "/"
                        alert('請選擇要移動的項目和目標文件夾。'); return; 
                    }

                    for (const item of selectedToMove) {
                        const itemParentPath = item.path.substring(0, item.path.lastIndexOf('/')) || '/';
                        if (itemParentPath === destinationPath) {
                            alert(`項目 "${item.name}" 已經在目標文件夾 "${destinationPath === '/' ? '根目錄' : destinationPath}" 中。`);
                            return;
                        }
                        if (item.isDir && (destinationPath === item.path || destinationPath.startsWith(item.path + '/'))) {
                            alert(`不能將文件夾 "${item.name}" 移動到其自身或其子文件夾中。`); return;
                        }
                    }
                    try {
                        const payload = { 
                            sourceItems: selectedToMove.map(item => ({path: item.path, isDir: item.isDir, name: item.name })), // Send more info if needed by backend
                            destinationPath: destinationPath, 
                        };
                        if (CSRF_TOKEN) payload._csrf = CSRF_TOKEN;
                        if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') payload.targetUsername = VIEW_TARGET_USERNAME;
                        
                        const response = await fetch('/move-items', { // Ensure this route exists and handles the payload
                            method: 'POST', headers: { 'Content-Type': 'application/json', },
                            body: JSON.stringify(payload)
                        });
                        const result = await response.json(); // Expect JSON response
                        if (response.ok && result.success) { 
                            alert(result.message || '項目移動成功！'); 
                            window.location.href = result.redirectUrl || window.location.pathname + window.location.search; // Use redirectUrl from server or reload current
                        } else {
                             alert(`移動失敗: ${result.message || '伺服器發生未知錯誤。'}`);
                        }
                    } catch (error) { 
                        console.error('移動項目時出錯:', error); 
                        alert(`移動項目時發生客戶端錯誤: ${error.message}`); 
                    }
                    moveModal.style.display = 'none';
                });
            }

            function showOverwriteConfirmationModal(itemName) {
                return new Promise((resolve) => {
                    if (!overwriteModal || !overwriteMessage || !overwriteConfirmBtn || !overwriteAbandonBtn || !closeOverwriteModalBtn) {
                        console.error("Overwrite modal elements not found!");
                        resolve('abandon'); 
                        return;
                    }
                    overwriteMessage.textContent = `一個名為 "${itemName}" 的項目已存在於當前目錄。您要覆蓋它嗎？`;
                    overwriteModal.style.display = 'block';

                    const handleConfirm = () => { cleanupAndResolve('overwrite'); };
                    const handleAbandon = () => { cleanupAndResolve('abandon'); };

                    function cleanupAndResolve(decision) {
                        overwriteModal.style.display = 'none';
                        overwriteConfirmBtn.removeEventListener('click', handleConfirm);
                        overwriteAbandonBtn.removeEventListener('click', handleAbandon);
                        closeOverwriteModalBtn.removeEventListener('click', handleAbandon);
                        resolve(decision);
                    }

                    overwriteConfirmBtn.addEventListener('click', handleConfirm, { once: true });
                    overwriteAbandonBtn.addEventListener('click', handleAbandon, { once: true });
                    closeOverwriteModalBtn.addEventListener('click', handleAbandon, { once: true });
                });
            }

            if (toggleUploadActionsBtn && uploadActionsContainer && uploadSection) {
                toggleUploadActionsBtn.addEventListener('click', () => {
                    const isActionsHidden = uploadActionsContainer.style.display === 'none' || uploadActionsContainer.style.display === '';
                    uploadActionsContainer.style.display = isActionsHidden ? 'flex' : 'none';
                    if (!isActionsHidden) { 
                        uploadSection.style.display = 'none'; 
                        toggleUploadActionsBtn.textContent = '上傳';
                        // Clear file input and preview when hiding upload section
                        if(userFilesInput) userFilesInput.value = null;
                        if(fileListPreview) fileListPreview.innerHTML = '';
                        if(uploadButton) uploadButton.style.display = 'none';
                        if(uploadProgressContainer) uploadProgressContainer.style.display = 'none';

                    } else { 
                        toggleUploadActionsBtn.textContent = '取消上傳操作';
                    }
                });
            }

            if (uploadFilesBtn && uploadSection && userFilesInput && dropAreaText && fileListPreview && uploadButton) {
                uploadFilesBtn.addEventListener('click', () => {
                    userFilesInput.removeAttribute('webkitdirectory');
                    userFilesInput.removeAttribute('directory');
                    userFilesInput.setAttribute('multiple', '');
                    if (dropAreaText) dropAreaText.textContent = '將文件拖拽到此處進行上傳，或點擊選擇文件。';
                    uploadSection.style.display = 'block';
                    if (toggleUploadActionsBtn) toggleUploadActionsBtn.textContent = '取消上傳操作';
                    if (!uploadActionsContainer || uploadActionsContainer.style.display === 'none') {
                        if(uploadActionsContainer) uploadActionsContainer.style.display = 'flex';
                    }
                    userFilesInput.value = null; 
                    fileListPreview.innerHTML = ''; 
                    uploadButton.style.display = 'none'; 
                    userFilesInput.click(); // Trigger file selection dialog
                });
            }

            if (uploadFolderBtn && uploadSection && userFilesInput && dropAreaText && fileListPreview && uploadButton) {
                uploadFolderBtn.addEventListener('click', () => {
                    userFilesInput.setAttribute('webkitdirectory', '');
                    userFilesInput.setAttribute('directory', '');
                    userFilesInput.removeAttribute('multiple'); 
                    if (dropAreaText) dropAreaText.textContent = '將文件夾拖拽到此處進行上傳，或點擊選擇文件夾。';
                    uploadSection.style.display = 'block';
                    if (toggleUploadActionsBtn) toggleUploadActionsBtn.textContent = '取消上傳操作';
                     if (!uploadActionsContainer || uploadActionsContainer.style.display === 'none') {
                        if(uploadActionsContainer) uploadActionsContainer.style.display = 'flex';
                    }
                    userFilesInput.value = null; 
                    fileListPreview.innerHTML = ''; 
                    uploadButton.style.display = 'none';
                    userFilesInput.click(); // Trigger folder selection dialog
                });
            }
            
            if (uploadForm && userFilesInput) {
                uploadForm.addEventListener('submit', async function(event) { 
                    event.preventDefault(); 
                    if (userFilesInput.files.length === 0) {
                        alert('請選擇要上傳的文件或文件夾。');
                        return;
                    }

                    const originalFiles = Array.from(userFilesInput.files);
                    const finalFilesToUpload = [];
                    let hasConflicts = false;

                    for (const file of originalFiles) {
                        // For folder uploads, webkitRelativePath gives "folderName/fileName.txt"
                        // We only care about conflicts for top-level items in the current directory.
                        let nameToCheck = file.name;
                        if (file.webkitRelativePath) {
                            const pathParts = file.webkitRelativePath.split('/');
                            if (pathParts.length > 1) { // It's a file within a subfolder of the dropped folder
                                nameToCheck = pathParts[0]; // Check conflict for the top-level folder itself
                            }
                        }
                        
                        // Only check for conflict once per unique top-level item name
                        if (EXISTING_ITEM_NAMES_ON_PAGE.includes(nameToCheck.toLowerCase()) && !finalFilesToUpload.some(f => (f.webkitRelativePath || f.name).startsWith(nameToCheck + '/')) && !finalFilesToUpload.some(f => f.name === nameToCheck) ) {
                            hasConflicts = true;
                            const userDecision = await showOverwriteConfirmationModal(nameToCheck);
                            if (userDecision === 'overwrite') {
                                // If overwriting a folder, all original files from that folder path should be included
                                originalFiles.forEach(origFile => {
                                    if ((origFile.webkitRelativePath && origFile.webkitRelativePath.startsWith(nameToCheck+'/')) || origFile.name === nameToCheck) {
                                        if (!finalFilesToUpload.includes(origFile)) finalFilesToUpload.push(origFile);
                                    } else if (!origFile.webkitRelativePath && !EXISTING_ITEM_NAMES_ON_PAGE.includes(origFile.name.toLowerCase())) {
                                        // if it's a mixed selection of files and a conflicting folder, add non-conflicting files
                                         if (!finalFilesToUpload.includes(origFile)) finalFilesToUpload.push(origFile);
                                    }
                                });
                            } else {
                                console.log(`Skipping ${nameToCheck} and its contents due to user choice.`);
                                // Remove all files related to this skipped folder/file from originalFiles to prevent them from being added later
                                for (let i = originalFiles.length - 1; i >= 0; i--) {
                                    if ((originalFiles[i].webkitRelativePath && originalFiles[i].webkitRelativePath.startsWith(nameToCheck + '/')) || originalFiles[i].name === nameToCheck) {
                                        // originalFiles.splice(i, 1); // This modifies the array being iterated, better to build a new list
                                    }
                                }
                            }
                        } else if (!EXISTING_ITEM_NAMES_ON_PAGE.includes(nameToCheck.toLowerCase()) || finalFilesToUpload.some(f => (f.webkitRelativePath || f.name).startsWith(nameToCheck + '/')) || finalFilesToUpload.some(f => f.name === nameToCheck) ) {
                            // Add if no conflict, or if it's part of an already approved folder overwrite, or if it's a file already added
                            if (!finalFilesToUpload.includes(file)) finalFilesToUpload.push(file);
                        }
                    }
                     // If there were conflicts but no files ended up in finalFilesToUpload (e.g., all abandoned)
                    if (hasConflicts && finalFilesToUpload.length === 0) {
                         alert('沒有文件被選中上傳，所有衝突的文件都已被放棄。');
                         if (uploadProgressContainer) uploadProgressContainer.style.display = 'none';
                         return;
                    }
                    // If no conflicts, finalFilesToUpload should be same as originalFiles
                    if (!hasConflicts) {
                        finalFilesToUpload.length = 0; // Clear and repopulate
                        originalFiles.forEach(f => finalFilesToUpload.push(f));
                    }


                    if (finalFilesToUpload.length === 0) {
                        alert('沒有文件準備上傳。');
                        if (uploadProgressContainer) uploadProgressContainer.style.display = 'none';
                        return;
                    }

                    const formData = new FormData(); 
                    const currentPathInput = uploadForm.querySelector('input[name="currentPath"]');
                    if (currentPathInput) formData.append('currentPath', currentPathInput.value);
                    
                    const targetUsernameInput = uploadForm.querySelector('input[name="targetUsername"]');
                    if (targetUsernameInput && targetUsernameInput.value) formData.append('targetUsername', targetUsernameInput.value);

                    const csrfInput = uploadForm.querySelector('input[name="_csrf"]');
                    if (csrfInput) formData.append('_csrf', csrfInput.value);

                    for (const file of finalFilesToUpload) {
                        formData.append('userFiles', file, file.webkitRelativePath || file.name);
                    }

                    const xhr = new XMLHttpRequest();
                    xhr.open('POST', uploadForm.action, true);
                    if (uploadProgressContainer && uploadProgressBar) {
                        uploadProgressContainer.style.display = 'block';
                        uploadProgressBar.style.width = '0%';
                        uploadProgressBar.textContent = '0%';
                    }
                    xhr.upload.onprogress = function(event) {
                        if (event.lengthComputable) {
                            const percentComplete = Math.round((event.loaded / event.total) * 100);
                            if (uploadProgressBar) {
                                uploadProgressBar.style.width = percentComplete + '%';
                                uploadProgressBar.textContent = percentComplete + '%';
                            }
                        }
                    };
                    xhr.onload = function() {
                        if (uploadProgressContainer) uploadProgressContainer.style.display = 'none';
                        if (xhr.status >= 200 && xhr.status < 300) { // Typically 200 OK, 201 Created, or 202 Accepted
                            let responseData = null;
                            try { responseData = JSON.parse(xhr.responseText); } catch (e) { /* Ignore parsing error if not JSON */ }

                            if (responseData && responseData.redirectUrl) {
                                window.location.href = responseData.redirectUrl;
                            } else if (xhr.responseURL && xhr.responseURL !== xhr.openUrl && xhr.responseURL.includes('/files')) { // Check for server-side redirect
                                window.location.href = xhr.responseURL; 
                            } else {
                                alert( (responseData && responseData.message) || '上傳成功！頁面將刷新。');
                                window.location.reload(); 
                            }
                        } else { // Handle errors
                            let errorMessage = `上傳失敗。伺服器響應: ${xhr.status}`;
                            try {
                                const responseJson = JSON.parse(xhr.responseText);
                                if (responseJson && responseJson.message) {
                                    errorMessage = responseJson.message;
                                }
                            } catch (e) {
                                if(xhr.responseText && xhr.responseText.length < 500) errorMessage = xhr.responseText; 
                            }
                            alert(errorMessage);
                            console.error('Upload failed:', xhr.status, xhr.responseText);
                        }
                    };
                    xhr.onerror = function(e) { 
                        if (uploadProgressContainer) uploadProgressContainer.style.display = 'none';
                        alert('上傳過程中發生網絡錯誤。請檢查網絡連接和服務器狀態。');
                        console.error('Upload network error:', e);
                    };
                    xhr.openUrl = uploadForm.action; // Store the original URL for comparison in case of redirect
                    xhr.send(formData);
                });
            }

            if (dropArea && userFilesInput && fileListPreview && uploadSection && dropAreaText && uploadActionsContainer && toggleUploadActionsBtn) { 
                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                    dropArea.addEventListener(eventName, preventDefaults, false);
                    // Prevent body dragover to stop browser from opening file
                    document.body.addEventListener(eventName, preventDefaults, false); 
                });
                function preventDefaults(e) { e.preventDefault(); e.stopPropagation(); }
                
                dropArea.addEventListener('dragenter', () => dropArea.classList.add('highlight'), false);
                dropArea.addEventListener('dragover', () => dropArea.classList.add('highlight'), false); // Need this for drop to work
                dropArea.addEventListener('dragleave', (e) => {
                    // Only remove highlight if leaving the dropArea for real, not an internal child
                    if (e.relatedTarget === null || !dropArea.contains(e.relatedTarget)) {
                        dropArea.classList.remove('highlight');
                    }
                }, false);
                
                dropArea.addEventListener('drop', (e) => {
                    preventDefaults(e); // Already called, but good practice
                    dropArea.classList.remove('highlight');
                    const dt = e.dataTransfer;
                    const files = dt.files;
                    
                    // Heuristic to check if it's likely a folder drop
                    let isLikelyFolderDrop = false;
                    if (dt.items && dt.items.length > 0 && dt.items[0].webkitGetAsEntry) {
                        const entry = dt.items[0].webkitGetAsEntry();
                        if (entry && entry.isDirectory) {
                            isLikelyFolderDrop = true;
                        }
                    } else if (files.length > 1 && files[0].webkitRelativePath) { 
                        // If multiple files and they have relative paths, it's a folder
                        isLikelyFolderDrop = true;
                    } else if (files.length === 1 && files[0].webkitRelativePath && files[0].webkitRelativePath !== files[0].name) {
                        // Single file from a folder (e.g. dragging one file out of a folder into the drop zone)
                        // This is tricky, as it could be a single file OR a folder with one file.
                        // Let's assume if webkitRelativePath exists and is different from name, it's part of a folder structure.
                        // The input type (directory vs multiple files) will ultimately be set by button click or this heuristic.
                         isLikelyFolderDrop = true; // Tentatively
                    }


                    if (isLikelyFolderDrop) {
                        userFilesInput.setAttribute('webkitdirectory', '');
                        userFilesInput.setAttribute('directory', '');
                        userFilesInput.removeAttribute('multiple');
                        if(dropAreaText) dropAreaText.textContent = '已拖入文件夾，準備上傳。';
                    } else {
                        userFilesInput.removeAttribute('webkitdirectory');
                        userFilesInput.removeAttribute('directory');
                        userFilesInput.setAttribute('multiple', '');
                        if(dropAreaText) dropAreaText.textContent = '已拖入文件，準備上傳。';
                    }

                    userFilesInput.files = files; 
                    updateFileListPreviewOnDrop(); // Call the function to update UI
                    uploadSection.style.display = 'block'; 
                    if (uploadActionsContainer.style.display === 'none') {
                         uploadActionsContainer.style.display = 'flex'; 
                    }
                    if (toggleUploadActionsBtn) toggleUploadActionsBtn.textContent = '取消上傳操作';
                }, false);

                userFilesInput.addEventListener('change', updateFileListPreviewOnDrop); 

                function updateFileListPreviewOnDrop() { 
                    if (!fileListPreview || !userFilesInput || !uploadButton) return;
                    fileListPreview.innerHTML = ''; // Clear previous preview
                    const files = userFilesInput.files;
                    if (files.length > 0) {
                        const list = document.createElement('ul');
                        list.style.listStyleType = 'none'; list.style.paddingLeft = '0';
                        
                        let isDirectoryUpload = false;
                        // Check if webkitdirectory attribute is present, or if files have webkitRelativePath
                        if (userFilesInput.hasAttribute('webkitdirectory') || (files[0] && files[0].webkitRelativePath)) {
                             // More robust check for actual folder structure
                            if (files[0].webkitRelativePath && files[0].webkitRelativePath.includes('/')) {
                                isDirectoryUpload = true;
                            } else if (files.length > 1 && Array.from(files).every(f => f.webkitRelativePath.startsWith(files[0].webkitRelativePath.split('/')[0] + '/'))) {
                                // Multiple files, all starting with the same top-level folder path
                                isDirectoryUpload = true;
                            } else if (files.length ===1 && files[0].webkitRelativePath && files[0].webkitRelativePath !== files[0].name){
                                // A single file that is part of a folder structure
                                isDirectoryUpload = true;
                            }
                        }


                        if (isDirectoryUpload) {
                            const folderName = files[0].webkitRelativePath.split('/')[0];
                            const listItem = document.createElement('li');
                            listItem.textContent = `文件夾: ${folderName} (${files.length} 個文件)`;
                            listItem.style.fontSize = '0.9em'; listItem.style.fontWeight = 'bold';
                            list.appendChild(listItem);
                        } else { 
                            for (let i = 0; i < files.length; i++) {
                                const listItem = document.createElement('li');
                                listItem.textContent = files[i].name + (files[i].size ? ` (${(files[i].size / 1024).toFixed(1)} KB)` : '');
                                listItem.style.fontSize = '0.9em';
                                list.appendChild(listItem);
                            }
                        }
                        fileListPreview.appendChild(list);
                        uploadButton.style.display = 'inline-block';
                    } else {
                        uploadButton.style.display = 'none';
                    }
                }
                // Initial check in case files are pre-selected (e.g. after a page reload with form data)
                if (userFilesInput && uploadButton && userFilesInput.files.length === 0) {
                     uploadButton.style.display = 'none';
                }
            }

            const listViewBtn = document.getElementById('listViewBtn');
            const gridViewBtn = document.getElementById('gridViewBtn');
            if (fileContainer && listViewBtn && gridViewBtn) { 
                function toggleView(viewType) {
                    const isCurrentlyMultiSelect = fileContainer.classList.contains('multi-select-mode-active');
                    // Remove existing view classes first
                    fileContainer.classList.remove('list-view', 'grid-view');

                    if (viewType === 'grid') {
                        fileContainer.classList.add('grid-view'); 
                        gridViewBtn.classList.add('active');
                        listViewBtn.classList.remove('active');
                        localStorage.setItem('fileView', 'grid');
                    } else { // Default to list
                        fileContainer.classList.add('list-view'); 
                        listViewBtn.classList.add('active');
                        gridViewBtn.classList.remove('active');
                        localStorage.setItem('fileView', 'list');
                    }
                    // Re-apply multi-select mode if it was active
                    if (isCurrentlyMultiSelect) { 
                        fileContainer.classList.add('multi-select-mode-active');
                    }
                    // After view toggle, selection might need re-evaluation or clearing
                    clearSingleSelection(); // Clear single selection when view changes
                    updateSelectionActions(); // Update action buttons based on new view (and potentially cleared selection)
                }
                const preferredView = localStorage.getItem('fileView') || 'list'; 
                toggleView(preferredView); 
                listViewBtn.addEventListener('click', () => toggleView('list'));
                gridViewBtn.addEventListener('click', () => toggleView('grid'));
            }

            const createItemModal = document.getElementById('create-item-modal');
            const closeCreateItemModalBtn = document.getElementById('close-create-item-modal-btn');
            const cancelCreateItemBtn = document.getElementById('cancel-create-item-btn');
            const createItemForm = document.getElementById('create-item-form');
            const createItemModalTitle = document.getElementById('create-item-modal-title');
            const createItemNameInput = document.getElementById('create-item-name-input');
            const createItemNameLabel = document.getElementById('create-item-name-label');
            const showCreateTextfileModalBtn = document.getElementById('show-create-textfile-modal-btn');
            const showCreateFolderModalBtn = document.getElementById('show-create-folder-modal-btn');

            function openCreateItemModal(type) {
                if (!createItemModal || !createItemForm || !createItemModalTitle || !createItemNameLabel || !createItemNameInput) return;
                createItemForm.reset(); 
                
                const currentPathForCreation = IS_SEARCH_RESULT_VIEW ? '/' : CURRENT_PATH_ON_LOAD;
                const currentPathInputInForm = createItemForm.querySelector('input[name="currentPath"]');
                if (currentPathInputInForm) currentPathInputInForm.value = currentPathForCreation;


                if (type === 'textfile') {
                    createItemModalTitle.textContent = '新建文本文件';
                    createItemNameLabel.textContent = '文件名 (例如: mydoc.txt):';
                    createItemNameInput.name = 'newFileName';
                    createItemNameInput.placeholder = '例如: notes.txt, script.js';
                    createItemForm.action = '/create-text-file';
                } else if (type === 'folder') {
                    createItemModalTitle.textContent = '创建新文件夹';
                    createItemNameLabel.textContent = '文件夹名称:';
                    createItemNameInput.name = 'folderName';
                    createItemNameInput.placeholder = '例如: 我的文档';
                    createItemForm.action = '/create-folder';
                }
                
                const targetUsernameHiddenInput = createItemForm.querySelector('input[name="targetUsername"]');
                if (targetUsernameHiddenInput) { 
                    if (VIEW_TARGET_USERNAME && CURRENT_USER_ROLE === 'admin') {
                        targetUsernameHiddenInput.value = VIEW_TARGET_USERNAME;
                    } else {
                        // Ensure it's removed or cleared if not applicable
                        targetUsernameHiddenInput.value = ''; 
                        // Or even remove the input if it's not needed for non-admin/non-target views
                        // if (targetUsernameHiddenInput.parentNode) targetUsernameHiddenInput.parentNode.removeChild(targetUsernameHiddenInput);
                    }
                }
                createItemModal.style.display = 'block';
                createItemNameInput.focus();
            }

            if (showCreateTextfileModalBtn) showCreateTextfileModalBtn.addEventListener('click', () => openCreateItemModal('textfile'));
            if (showCreateFolderModalBtn) showCreateFolderModalBtn.addEventListener('click', () => openCreateItemModal('folder'));
            if (closeCreateItemModalBtn) closeCreateItemModalBtn.onclick = () => createItemModal.style.display = 'none';
            if (cancelCreateItemBtn) cancelCreateItemBtn.onclick = () => createItemModal.style.display = 'none';
            
            window.addEventListener('click', (event) => { 
                if (event.target == createItemModal) createItemModal.style.display = 'none';
                if (event.target == moveModal) moveModal.style.display = 'none'; 
                if (event.target == overwriteModal) { 
                    const abandonButton = overwriteModal.querySelector('#overwrite-abandon-btn');
                    if (abandonButton) abandonButton.click(); // Trigger the abandon logic
                }
            });

            // Initial UI setup
            updateMultiSelectModeUI(); 
            updateSelectionActions(); 
            if (selectAllContainer && !HAS_ITEMS_ON_PAGE) { // Hide select-all if no items
                selectAllContainer.classList.remove('has-items');
            } else if (selectAllContainer && HAS_ITEMS_ON_PAGE) {
                selectAllContainer.classList.add('has-items');
            }


        }); 

        function showRenameForm(encodedName, currentName, isDir) { 
            // Hide all other rename forms first
            document.querySelectorAll('.rename-form').forEach(form => {
                if (form.id !== 'rename-form-' + encodedName) {
                    form.style.display = 'none';
                }
            });

            const formContainer = document.getElementById('rename-form-' + encodedName);
            if (formContainer) {
                const isCurrentlyVisible = formContainer.style.display === 'block';
                formContainer.style.display = isCurrentlyVisible ? 'none' : 'block';
                
                if (!isCurrentlyVisible) { 
                    const inputField = formContainer.querySelector('input[name="newName"]');
                    if (inputField) {
                        inputField.value = currentName; 
                        inputField.focus(); 
                        // Select text based on whether it's a file or folder (extension handling)
                        if (!isDir && currentName.includes('.')) {
                            const dotIndex = currentName.lastIndexOf('.');
                            inputField.setSelectionRange(0, dotIndex);
                        } else {
                            inputField.select();
                        }
                    }
                    // Update currentPath in rename form if in search results view
                    const currentPathInput = formContainer.querySelector('input[name="currentPath"]');
                    const oldPathInput = formContainer.querySelector('input[name="oldPath"]');
                    if (currentPathInput && oldPathInput && IS_SEARCH_RESULT_VIEW) {
                         const itemOriginalPath = oldPathInput.value;
                         currentPathInput.value = itemOriginalPath.substring(0, itemOriginalPath.lastIndexOf('/')) || '/';
                    } else if (currentPathInput) { // For normal view
                        currentPathInput.value = CURRENT_PATH_ON_LOAD;
                    }
                }
            }
        }
        function hideRenameForm(encodedName) { 
            const form = document.getElementById('rename-form-' + encodedName);
            if (form) form.style.display = 'none';
        }
    </script>
</body>
</html>
